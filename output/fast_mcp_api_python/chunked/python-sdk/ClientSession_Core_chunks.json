[
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:ClientSession_Core:chunk:0",
    "content": "The\n```\nClientSession\n```\nclass provides the high-level client interface for communicating with MCP servers. It manages the complete lifecycle of client-server communication, including session initialization, protocol negotiation, request/response handling, and server-initiated callbacks. This document covers the core session management architecture and message handling system.\nFor transport-specific client implementations, see\n[Client Transports](#3.2)\n. For OAuth authentication in client sessions, see\n[Client Authentication](#3.3)\n.",
    "metadata": {
      "source": "python-sdk\\ClientSession_Core.md",
      "file_name": "ClientSession_Core.md",
      "subfolder": "python-sdk",
      "chunk_index": 0,
      "total_chunks": 9,
      "char_count": 540,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:13.588786"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:ClientSession_Core:chunk:1",
    "content": "The client session architecture consists of layered components that handle different aspects of MCP communication:\n```\ngraph TB\n    subgraph \"Client Application Layer\"\n        App[\"Client Application\"]\n    end\n    \n    subgraph \"ClientSession Layer\"\n        CS[\"ClientSession\"]\n        Callbacks[\"Callback Functions\"]\n        Capabilities[\"Client Capabilities\"]\n    end\n    \n    subgraph \"BaseSession Layer\"\n        BS[\"BaseSession\"]\n        RequestResponder[\"RequestResponder\"]\n        ProgressTracking[\"Progress Tracking\"]\n    end\n    \n    subgraph \"Message Layer\"\n        SessionMessage[\"SessionMessage\"]\n        JSONRPCMessage[\"JSONRPCMessage\"]\n        Types[\"mcp.types\"]\n    end\n    \n    subgraph \"Transport Layer\"\n        ReadStream[\"MemoryObjectReceiveStream\"]\n        WriteStream[\"MemoryObjectSendStream\"]\n    end\n    \n    App --> CS\n    CS --> Callbacks\n    CS --> Capabilities\n    CS --> BS\n    BS --> RequestResponder\n    BS --> ProgressTracking\n    BS --> SessionMessage\n    SessionMessage --> JSONRPCMessage\n    JSONRPCMessage --> Types\n    BS --> ReadStream\n    BS --> WriteStream\n```\nSources:\n[src/mcp/client/session.py:101-434](.)\n,\n[src/mcp/shared/session.py:159-471](.)",
    "metadata": {
      "source": "python-sdk\\ClientSession_Core.md",
      "file_name": "ClientSession_Core.md",
      "subfolder": "python-sdk",
      "chunk_index": 1,
      "total_chunks": 9,
      "char_count": 1187,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:13.588802"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:ClientSession_Core:chunk:2",
    "content": "The\n```\nClientSession\n```\nclass extends\n```\nBaseSession\n```\nwith client-specific functionality and type parameters:\n```\nclassDiagram\n    class BaseSession {\n        +send_request(request, result_type)\n        +send_notification(notification)\n        +_receive_loop()\n        +_received_request(responder)\n        +_received_notification(notification)\n        -_response_streams: dict\n        -_in_flight: dict\n        -_progress_callbacks: dict\n    }\n    \n    class ClientSession {\n        +initialize() InitializeResult\n        +call_tool(name, arguments) CallToolResult\n        +list_resources() ListResourcesResult\n        +read_resource(uri) ReadResourceResult\n        +list_tools() ListToolsResult\n        +get_prompt(name, arguments) GetPromptResult\n        +send_ping() EmptyResult\n        -_sampling_callback: SamplingFnT\n        -_elicitation_callback: ElicitationFnT\n        -_list_roots_callback: ListRootsFnT\n        -_logging_callback: LoggingFnT\n        -_tool_output_schemas: dict\n    }\n    \n    class RequestResponder {\n        +respond(response)\n        +cancel()\n        +request_id: RequestId\n        +request: ReceiveRequestT\n        +in_flight: bool\n        +cancelled: bool\n    }\n    \n    BaseSession <|-- ClientSession\n    BaseSession --> RequestResponder\n```\nSources:\n[src/mcp/client/session.py:101-109](.)\n,\n[src/mcp/shared/session.py:159-167](.)\n,\n[src/mcp/shared/session.py:52-67](.)",
    "metadata": {
      "source": "python-sdk\\ClientSession_Core.md",
      "file_name": "ClientSession_Core.md",
      "subfolder": "python-sdk",
      "chunk_index": 2,
      "total_chunks": 9,
      "char_count": 1410,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:13.588809"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:ClientSession_Core:chunk:3",
    "content": "The initialization process establishes communication and negotiates capabilities between client and server:\n```\nsequenceDiagram\n    participant Client as \"ClientSession\"\n    participant BaseSession as \"BaseSession\"\n    participant Server as \"MCP Server\"\n    \n    Note over Client,Server: Session Setup\n    Client->>BaseSession: __aenter__()\n    BaseSession->>BaseSession: start _receive_loop()\n    \n    Note over Client,Server: Protocol Negotiation\n    Client->>Client: initialize()\n    Client->>BaseSession: send_request(InitializeRequest)\n    BaseSession->>Server: JSONRPCRequest(initialize)\n    Server->>BaseSession: JSONRPCResponse(InitializeResult)\n    BaseSession->>Client: InitializeResult\n    Client->>Client: validate protocol version\n    Client->>BaseSession: send_notification(InitializedNotification)\n    BaseSession->>Server: JSONRPCNotification(initialized)\n```\nThe\n```\ninitialize\n```\nmethod\n[src/mcp/client/session.py:137-174](.)\nperforms several key operations:\n1. **Capability Advertisement** : Determines client capabilities based on provided callbacks\n2. **Protocol Version** : Sends `LATEST_PROTOCOL_VERSION` and validates server response\n3. **Initialization Request** : Sends `InitializeRequest` with client info and capabilities\n4. **Version Validation** : Ensures server protocol version is in `SUPPORTED_PROTOCOL_VERSIONS`\n5. **Completion Notification** : Sends `InitializedNotification` to complete handshake\nSources:\n[src/mcp/client/session.py:137-174](.)\n,\n[tests/client/test_session.py:30-114](.)",
    "metadata": {
      "source": "python-sdk\\ClientSession_Core.md",
      "file_name": "ClientSession_Core.md",
      "subfolder": "python-sdk",
      "chunk_index": 3,
      "total_chunks": 9,
      "char_count": 1524,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:13.588816"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:ClientSession_Core:chunk:4",
    "content": "The session manages request/response pairs using a stream-based approach with timeout handling:\n```\nsend_request\n```\n```\n_response_streams\n```\n```\n_progress_callbacks\n```\n```\nRequestResponder\n```\n, Purpose = . , Key Methods = \n```\ngraph LR\n    subgraph \"Request Flow\"\n        SendReq[\"send_request()\"]\n        ReqStream[\"_response_streams[id]\"]\n        Timeout[\"Timeout Handling\"]\n        Response[\"Response Validation\"]\n    end\n    \n    subgraph \"Response Flow\"  \n        ReceiveLoop[\"_receive_loop()\"]\n        ResponseMatch[\"Response Matching\"]\n        StreamSend[\"stream.send(response)\"]\n    end\n    \n    SendReq --> ReqStream\n    ReqStream --> Timeout\n    Timeout --> Response\n    ReceiveLoop --> ResponseMatch\n    ResponseMatch --> StreamSend\n    StreamSend --> Response\n```\nThe\n```\nsend_request\n```\nmethod\n[src/mcp/shared/session.py:220-294](.)\nprovides:\n- **Type Safety** : Generic type parameters ensure request/response type matching\n- **Progress Support** : Automatic progress token injection and callback registration\n- **Timeout Management** : Request-specific and session-level timeout support\n- **Error Handling** : Converts `JSONRPCError` responses to `McpError` exceptions\nSources:\n[src/mcp/shared/session.py:220-294](.)\n,\n[src/mcp/shared/session.py:331-436](.)",
    "metadata": {
      "source": "python-sdk\\ClientSession_Core.md",
      "file_name": "ClientSession_Core.md",
      "subfolder": "python-sdk",
      "chunk_index": 4,
      "total_chunks": 9,
      "char_count": 1277,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:13.588822"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:ClientSession_Core:chunk:5",
    "content": "The client handles four types of server-initiated requests through configurable callback functions:\n```\ngraph TB\n    subgraph \"Server Requests\"\n        CreateMessage[\"CreateMessageRequest\"]\n        Elicit[\"ElicitRequest\"] \n        ListRoots[\"ListRootsRequest\"]\n        Ping[\"PingRequest\"]\n    end\n    \n    subgraph \"Client Callbacks\"\n        SamplingFn[\"SamplingFnT\"]\n        ElicitationFn[\"ElicitationFnT\"]\n        ListRootsFn[\"ListRootsFnT\"]\n        PingHandler[\"Built-in Handler\"]\n    end\n    \n    subgraph \"Default Implementations\"\n        DefaultSampling[\"_default_sampling_callback\"]\n        DefaultElicitation[\"_default_elicitation_callback\"]  \n        DefaultListRoots[\"_default_list_roots_callback\"]\n    end\n    \n    CreateMessage --> SamplingFn\n    Elicit --> ElicitationFn\n    ListRoots --> ListRootsFn\n    Ping --> PingHandler\n    \n    SamplingFn -.-> DefaultSampling\n    ElicitationFn -.-> DefaultElicitation\n    ListRootsFn -.-> DefaultListRoots\n```\nThe\n```\n_received_request\n```\nmethod\n[src/mcp/client/session.py:388-417](.)\nroutes server requests to appropriate callbacks:\n- **Sampling Requests** : Handle `CreateMessageRequest` for LLM message generation\n- **Elicitation Requests** : Handle `ElicitRequest` for information extraction\n- **List Roots Requests** : Handle `ListRootsRequest` for file system roots\n- **Ping Requests** : Built-in handler returns `EmptyResult`\nEach callback receives a\n```\nRequestContext\n```\nwith session reference and request metadata.\nSources:\n[src/mcp/client/session.py:388-417](.)\n,\n[src/mcp/client/session.py:21-96](.)",
    "metadata": {
      "source": "python-sdk\\ClientSession_Core.md",
      "file_name": "ClientSession_Core.md",
      "subfolder": "python-sdk",
      "chunk_index": 5,
      "total_chunks": 9,
      "char_count": 1567,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:13.588829"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:ClientSession_Core:chunk:6",
    "content": "The client provides structured tool calling with automatic output schema validation:\n```\ngraph LR\n    subgraph \"Tool Call Process\"\n        CallTool[\"call_tool(name, args)\"]\n        SendRequest[\"send_request(CallToolRequest)\"]\n        ReceiveResult[\"CallToolResult\"]\n        ValidateOutput[\"_validate_tool_result()\"]\n    end\n    \n    subgraph \"Schema Management\"\n        ListTools[\"list_tools()\"]\n        CacheSchemas[\"_tool_output_schemas\"]\n        SchemaValidation[\"JSON Schema Validation\"]\n    end\n    \n    CallTool --> SendRequest\n    SendRequest --> ReceiveResult\n    ReceiveResult --> ValidateOutput\n    ValidateOutput --> ListTools\n    ListTools --> CacheSchemas\n    CacheSchemas --> SchemaValidation\n```\nThe tool calling system\n[src/mcp/client/session.py:270-319](.)\nprovides:\n- **Progress Support** : Optional progress callback for long-running tools\n- **Timeout Control** : Per-request timeout override capability\n- **Schema Validation** : Automatic validation of structured content against tool output schemas\n- **Schema Caching** : Maintains cache of tool output schemas from `list_tools` responses\nThe\n```\n_validate_tool_result\n```\nmethod ensures that tools returning structured content conform to their declared output schemas.\nSources:\n[src/mcp/client/session.py:270-319](.)\n,\n[src/mcp/client/session.py:366-382](.)",
    "metadata": {
      "source": "python-sdk\\ClientSession_Core.md",
      "file_name": "ClientSession_Core.md",
      "subfolder": "python-sdk",
      "chunk_index": 6,
      "total_chunks": 9,
      "char_count": 1329,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:13.588835"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:ClientSession_Core:chunk:7",
    "content": "The client processes various server notifications through the notification handling system:\n```\nLoggingMessageNotification\n```\n```\n_logging_callback\n```\n```\nProgressNotification\n```\n```\nCancelledNotification\n```\n```\n_received_notification\n```\n, Handler = . , Purpose = \n```\ngraph TB\n    subgraph \"Notification Processing\"\n        ReceiveLoop[\"_receive_loop()\"]\n        NotificationValidation[\"Notification Validation\"]\n        NotificationRouting[\"Notification Routing\"]\n    end\n    \n    subgraph \"Specific Handlers\"\n        LoggingHandler[\"_logging_callback()\"]\n        ProgressHandler[\"Progress Callback\"]\n        CancelHandler[\"Request Cancellation\"]\n        GenericHandler[\"_received_notification()\"]\n    end\n    \n    ReceiveLoop --> NotificationValidation\n    NotificationValidation --> NotificationRouting\n    NotificationRouting --> LoggingHandler\n    NotificationRouting --> ProgressHandler  \n    NotificationRouting --> CancelHandler\n    NotificationRouting --> GenericHandler\n```\nThe notification system\n[src/mcp/shared/session.py:377-401](.)\nhandles:\n- **Logging Notifications** : Forward to configurable logging callback\n- **Progress Notifications** : Route to request-specific progress callbacks using progress tokens\n- **Cancellation Notifications** : Cancel in-flight requests using `RequestResponder.cancel()`\nSources:\n[src/mcp/shared/session.py:377-401](.)\n,\n[src/mcp/client/session.py:426-433](.)",
    "metadata": {
      "source": "python-sdk\\ClientSession_Core.md",
      "file_name": "ClientSession_Core.md",
      "subfolder": "python-sdk",
      "chunk_index": 7,
      "total_chunks": 9,
      "char_count": 1414,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:13.588841"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:ClientSession_Core:chunk:8",
    "content": "The client dynamically advertises capabilities based on provided callback functions during initialization:\n```\ngraph LR\n    subgraph \"Capability Detection\"\n        InitMethod[\"initialize()\"]\n        CheckCallbacks[\"Check Callback Functions\"]\n        BuildCapabilities[\"Build ClientCapabilities\"]\n    end\n    \n    subgraph \"Capability Types\"\n        Sampling[\"SamplingCapability\"]\n        Elicitation[\"ElicitationCapability\"] \n        Roots[\"RootsCapability\"]\n        Experimental[\"Experimental\"]\n    end\n    \n    InitMethod --> CheckCallbacks\n    CheckCallbacks --> BuildCapabilities\n    BuildCapabilities --> Sampling\n    BuildCapabilities --> Elicitation\n    BuildCapabilities --> Roots\n    BuildCapabilities --> Experimental\n```\nCapability detection logic\n[src/mcp/client/session.py:137-161](.)\n:\n- **Sampling** : Advertised if `sampling_callback` is not the default implementation\n- **Elicitation** : Advertised if `elicitation_callback` is not the default implementation\n- **Roots** : Advertised if `list_roots_callback` is not the default implementation\n- **Experimental** : Currently always `None`\nThe\n```\nRootsCapability\n```\nincludes\n```\nlistChanged=True\n```\nto indicate support for root list change notifications.\nSources:\n[src/mcp/client/session.py:137-161](.)\n,\n[tests/client/test_session.py:356-500](.)",
    "metadata": {
      "source": "python-sdk\\ClientSession_Core.md",
      "file_name": "ClientSession_Core.md",
      "subfolder": "python-sdk",
      "chunk_index": 8,
      "total_chunks": 9,
      "char_count": 1314,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:13.588847"
    }
  }
]