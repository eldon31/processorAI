[
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:0",
    "content": "The StreamableHTTP Transport provides HTTP-based bidirectional communication for MCP using POST requests and Server-Sent Events (SSE) streaming. This transport enables stateful session management, optional resumability, and authentication support for both clients and servers.\nFor SSE-only transport functionality, see\n[Server-Sent Events (SSE) Transport](#5.2)\n. For stdio-based process communication, see\n[STDIO Transport](#5.3)\n. For WebSocket communication, see\n[WebSocket Transport](#5.4)\n.",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 0,
      "total_chunks": 40,
      "char_count": 495,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412286"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:1",
    "content": "StreamableHTTP transport implements the MCP protocol over HTTP using a hybrid approach: clients send messages via HTTP POST requests, while servers respond using either JSON responses or SSE streams. The transport supports both stateful sessions with resumability and stateless request-response patterns.\n**Key Features:**\n- HTTP POST requests for client-to-server communication\n- SSE streaming for server-to-client communication\n- Session management with unique session IDs\n- Optional resumability via `EventStore` interface\n- Authentication support through `httpx.Auth`\n- DNS rebinding protection via `TransportSecurityMiddleware`\n- Both stateful and stateless operation modes\nSources:\n[src/mcp/client/streamable_http.py:1-8](.)\n,\n[src/mcp/server/streamable_http.py:1-8](.)",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 1,
      "total_chunks": 40,
      "char_count": 775,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412302"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:2",
    "content": "```\ngraph TB\n    subgraph Client[\"Client Side\"]\n        ClientApp[\"Client Application\"]\n        ClientSession[\"ClientSession\"]\n        StreamHTTPTransport[\"StreamableHTTPTransport\"]\n        HttpxClient[\"httpx.AsyncClient\"]\n    end\n    \n    subgraph Network[\"Network Layer\"]\n        HTTPPost[\"HTTP POST /mcp\"]\n        HTTPGet[\"HTTP GET /mcp\"]\n        HTTPDelete[\"HTTP DELETE /mcp\"]\n        SSEStream[\"SSE Response Streams\"]\n    end\n    \n    subgraph Server[\"Server Side\"]\n        ASGIApp[\"ASGI Application\"]\n        SessionManager[\"StreamableHTTPSessionManager\"]\n        ServerTransport[\"StreamableHTTPServerTransport\"]\n        MCPServer[\"Server\"]\n        EventStore[\"EventStore\"]\n        Security[\"TransportSecurityMiddleware\"]\n    end\n    \n    ClientApp --> ClientSession\n    ClientSession --> StreamHTTPTransport\n    StreamHTTPTransport --> HttpxClient\n    \n    HttpxClient --> HTTPPost\n    HttpxClient --> HTTPGet\n    HttpxClient --> HTTPDelete\n    \n    HTTPPost --> ASGIApp\n    HTTPGet --> ASGIApp\n    HTTPDelete --> ASGIApp\n    \n    ASGIApp --> Security\n    Security --> SessionManager\n    SessionManager --> ServerTransport\n    ServerTransport --> MCPServer\n    ServerTransport --> EventStore\n    \n    ServerTransport --> SSEStream\n    SSEStream --> StreamHTTPTransport\n```\n**StreamableHTTP Transport Architecture**\nSources:\n[src/mcp/client/streamable_http.py:74-108](.)\n,\n[src/mcp/server/streamable_http.py:122-175](.)\n,\n[src/mcp/server/streamable_http_manager.py:29-79](.)",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 2,
      "total_chunks": 40,
      "char_count": 1480,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412309"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:3",
    "content": "The client-side implementation centers around the\n```\nStreamableHTTPTransport\n```\nclass and the\n```\nstreamablehttp_client\n```\nasync context manager.",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 3,
      "total_chunks": 40,
      "char_count": 148,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412314"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:4",
    "content": "The\n```\nStreamableHTTPTransport\n```\nclass handles the client-side HTTP communication with session management and protocol negotiation:\n`httpx.Auth`\nSession Management, Responsibility = Tracks session ID and protocol version. Request Handling, Responsibility = Manages POST requests and SSE responses. Authentication, Responsibility = \n**Key Methods:**\n- `post_writer()` - Handles outgoing requests via HTTP POST\n- `handle_get_stream()` - Manages incoming SSE streams from server\n- `terminate_session()` - Explicitly terminates session via DELETE request\n- `_handle_post_request()` - Processes individual POST requests\n- `_handle_resumption_request()` - Handles resumption with `Last-Event-ID`\n**Key Attributes:**\n- `session_id` - Current session identifier\n- `protocol_version` - Negotiated protocol version\n- `request_headers` - Base headers for all requests",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 4,
      "total_chunks": 40,
      "char_count": 859,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412320"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:5",
    "content": "```\nsequenceDiagram\n    participant Client as \"StreamableHTTPTransport\"\n    participant Server as \"StreamableHTTPServerTransport\"\n    \n    Note over Client,Server: Initialization\n    Client->>Server: POST /mcp (initialize request)\n    Note right of Server: _handle_post_request()\n    Server-->>Client: SSE Response + mcp-session-id header\n    Note left of Client: _maybe_extract_session_id_from_response()\n    \n    Note over Client,Server: Bidirectional Communication\n    Client->>Server: POST /mcp (JSON-RPC request + session ID)\n    Note right of Server: _handle_post_request()\n    Server-->>Client: SSE Response with event ID\n    \n    Client->>Server: GET /mcp (establish server notification stream)\n    Note right of Server: _handle_get_request()\n    Server-->>Client: SSE Stream (server notifications)\n    Note left of Client: handle_get_stream()\n    \n    Note over Client,Server: Resumption (optional)\n    Client->>Server: GET /mcp + Last-Event-ID header\n    Note right of Server: _replay_events()\n    Server-->>Client: Replayed events + new events\n    \n    Note over Client,Server: Session Termination\n    Client->>Server: DELETE /mcp + session ID\n    Note right of Server: _handle_delete_request()\n    Server-->>Client: 200 OK\n    Note right of Server: terminate()\n```\n**StreamableHTTP Message Flow**\nSources:\n[src/mcp/client/streamable_http.py:366-422](.)\n,\n[src/mcp/client/streamable_http.py:192-218](.)\n,\n[src/mcp/client/streamable_http.py:423-438](.)\n,\n[src/mcp/server/streamable_http.py:309-507](.)\n,\n[src/mcp/server/streamable_http.py:508-599](.)\n,\n[src/mcp/server/streamable_http.py:600-622](.)",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 5,
      "total_chunks": 40,
      "char_count": 1609,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412327"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:6",
    "content": "The primary client interface is the\n```\nstreamablehttp_client\n```\nasync context manager:\n```\nasync with streamablehttp_client(\n    url=\"http://localhost:8000/mcp\",\n    auth=oauth_provider,  # Optional authentication\n    timeout=30.0,\n    sse_read_timeout=300.0\n) as (read_stream, write_stream, get_session_id):\n    async with ClientSession(read_stream, write_stream) as session:\n        await session.initialize()\n        # Use session...\n```\nSources:\n[src/mcp/client/streamable_http.py:444-514](.)",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 6,
      "total_chunks": 40,
      "char_count": 498,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412332"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:7",
    "content": "The server-side implementation provides two main components:\n```\nStreamableHTTPServerTransport\n```\nfor individual connections and\n```\nStreamableHTTPSessionManager\n```\nfor managing multiple sessions.",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 7,
      "total_chunks": 40,
      "char_count": 198,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412338"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:8",
    "content": "The\n```\nStreamableHTTPServerTransport\n```\nclass handles individual HTTP connections with support for both SSE streaming and JSON responses:\n**Operating Modes:**\n- **SSE Mode** (default): Responses are streamed via Server-Sent Events\n- **JSON Mode** : Single JSON responses for each request (controlled by `is_json_response_enabled` )\n**HTTP Method Handling:**\n- `POST` - Processes JSON-RPC messages via `_handle_post_request()`\n- `GET` - Establishes SSE streams for server-initiated messages via `_handle_get_request()`\n- `DELETE` - Terminates sessions explicitly via `_handle_delete_request()`\n**Key Features:**\n- Session ID validation using `SESSION_ID_PATTERN`\n- Request stream management with `_request_streams` dictionary\n- Event storage integration via `EventStore` interface\n- Security validation through `TransportSecurityMiddleware`\n- Memory stream cleanup with `_clean_up_memory_streams()`",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 8,
      "total_chunks": 40,
      "char_count": 899,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412343"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:9",
    "content": "```\ngraph TB\n    subgraph Manager[\"StreamableHTTPSessionManager\"]\n        SessionLock[\"_session_creation_lock\"]\n        ServerInstances[\"_server_instances<br/>dict[str, StreamableHTTPServerTransport]\"]\n        TaskGroup[\"_task_group\"]\n        RunLock[\"_run_lock\"]\n    end\n    \n    subgraph Lifecycle[\"Session Lifecycle\"]\n        HandleRequest[\"handle_request()\"]\n        StatefulReq[\"_handle_stateful_request()\"]\n        StatelessReq[\"_handle_stateless_request()\"]\n        NewSession[\"Create new session<br/>uuid4().hex\"]\n        ExistingSession[\"Use existing session\"]\n        Cleanup[\"Session cleanup\"]\n    end\n    \n    subgraph Transport[\"Transport Instance\"]\n        HTTPTransport[\"StreamableHTTPServerTransport\"]\n        ConnectContext[\"connect() context manager\"]\n        ReadWriteStreams[\"MemoryObjectStreams\"]\n        ServerRun[\"Server.run()\"]\n    end\n    \n    HandleRequest --> StatefulReq\n    HandleRequest --> StatelessReq\n    \n    StatefulReq --> NewSession\n    StatefulReq --> ExistingSession\n    StatelessReq --> HTTPTransport\n    \n    NewSession --> SessionLock\n    SessionLock --> ServerInstances\n    ServerInstances --> HTTPTransport\n    HTTPTransport --> ConnectContext\n    ConnectContext --> ReadWriteStreams\n    ReadWriteStreams --> ServerRun\n    ServerRun --> Cleanup\n    \n    ExistingSession --> ServerInstances\n```\n**Session Management Components**\nSources:\n[src/mcp/server/streamable_http_manager.py:70-79](.)\n,\n[src/mcp/server/streamable_http_manager.py:146-194](.)\n,\n[src/mcp/server/streamable_http_manager.py:195-280](.)",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 9,
      "total_chunks": 40,
      "char_count": 1547,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412349"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:10",
    "content": "The session manager supports two operation modes:\nStateful, Session Tracking = Yes. Stateful, State Persistence = Between requests. Stateful, Use Case = Long-lived connections. Stateless, Session Tracking = No. Stateless, State Persistence = None. Stateless, Use Case = Serverless/stateless deployments\n**Stateful Mode:**\nSessions are tracked with UUIDs, allowing resumption and persistent state.\n**Stateless Mode:**\nEach request creates a fresh transport instance with no state retention.\nSources:\n[src/mcp/server/streamable_http_manager.py:54-68](.)",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 10,
      "total_chunks": 40,
      "char_count": 551,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412355"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:11",
    "content": "StreamableHTTP transport supports optional resumability through the\n```\nEventStore\n```\ninterface, allowing clients to reconnect and receive missed events.",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 11,
      "total_chunks": 40,
      "char_count": 154,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412360"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:12",
    "content": "```\nclassDiagram\n    class EventStore {\n        <<abstract>>\n        +store_event(stream_id: StreamId, message: JSONRPCMessage) EventId\n        +replay_events_after(last_event_id: EventId, send_callback: EventCallback) StreamId\n    }\n    \n    class EventMessage {\n        +message: JSONRPCMessage\n        +event_id: str | None\n    }\n    \n    class StreamableHTTPServerTransport {\n        +_event_store: EventStore | None\n        +_replay_events(last_event_id: str, request: Request, send: Send)\n        +message_router()\n        +_create_event_data(event_message: EventMessage)\n    }\n    \n    class EventCallback {\n        <<type alias>>\n        Callable[[EventMessage], Awaitable[None]]\n    }\n    \n    EventStore --> EventMessage\n    EventStore --> EventCallback\n    StreamableHTTPServerTransport --> EventStore\n    StreamableHTTPServerTransport --> EventMessage\n```\n**Event Storage Architecture**\n**Resumption Flow:**\n1. Client includes `Last-Event-ID` header in GET request via `LAST_EVENT_ID_HEADER`\n2. Server calls `EventStore.replay_events_after()` in `_replay_events()`\n3. Missed events are replayed via SSE using `_create_event_data()`\n4. New events continue from current point with automatic event ID generation\n**Stream Management:**\n- Events are stored per `StreamId` (either request ID or `GET_STREAM_KEY` )\n- Message router distributes events to appropriate streams based on request correlation\n- Event IDs are generated by the `EventStore` implementation\nSources:\n[src/mcp/server/streamable_http.py:84-120](.)\n,\n[src/mcp/server/streamable_http.py:728-798](.)\n,\n[src/mcp/server/streamable_http.py:829-880](.)",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 12,
      "total_chunks": 40,
      "char_count": 1621,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412366"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:13",
    "content": "StreamableHTTP transport includes DNS rebinding protection through the\n```\nTransportSecurityMiddleware\n```\n.",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 13,
      "total_chunks": 40,
      "char_count": 108,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412372"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:14",
    "content": "The transport validates incoming requests against security policies via\n```\nTransportSecurityMiddleware\n```\n:\nHost Header, Scope = All requests. Host Header, Purpose = Prevent DNS rebinding attacks. Origin Header, Scope = CORS requests. Origin Header, Purpose = Validate request origin. Content-Type, Scope = POST requests. Content-Type, Purpose = Ensure proper JSON content. Accept Headers, Scope = POST requests. Accept Headers, Purpose = Validate client accepts required media types\n**Security Integration:**\n- `TransportSecurityMiddleware` is instantiated in `StreamableHTTPServerTransport.__init__()`\n- Validation occurs in `handle_request()` via `_security.validate_request()`\n- Failed validation returns error responses before processing\n**Configuration Example:**\n```\nsecurity_settings = TransportSecuritySettings(\n    allowed_hosts=[\"localhost:*\", \"127.0.0.1:*\"], \n    allowed_origins=[\"http://localhost:*\", \"http://127.0.0.1:*\"]\n)\n```\nSources:\n[src/mcp/server/streamable_http.py:27-30](.)\n,\n[src/mcp/server/streamable_http.py:166](.)\n,\n[src/mcp/server/streamable_http.py:268-272](.)",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 14,
      "total_chunks": 40,
      "char_count": 1092,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412377"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:15",
    "content": "Session IDs are validated against a strict pattern to ensure security:\n- **Pattern:** Visible ASCII characters (0x21-0x7E)\n- **Generation:** UUID hex format (32 characters)\n- **Validation:** `SESSION_ID_PATTERN.fullmatch()` check",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 15,
      "total_chunks": 40,
      "char_count": 229,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412383"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:16",
    "content": "The transport negotiates protocol versions during initialization:\n1. Client sends `initialize` request\n2. Server responds with `InitializeResult` containing `protocolVersion`\n3. Subsequent requests include `mcp-protocol-version` header",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 16,
      "total_chunks": 40,
      "char_count": 235,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412388"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:17",
    "content": "```\nmcp-session-id\n```\n```\nMCP_SESSION_ID_HEADER\n```\n```\nabc123def456...\n```\n```\nmcp-protocol-version\n```\n```\nMCP_PROTOCOL_VERSION_HEADER\n```\n```\n2025-03-26\n```\n```\nlast-event-id\n```\n```\nLAST_EVENT_ID_HEADER\n```\n```\nevent-123\n```\n```\ncontent-type\n```\n```\nCONTENT_TYPE\n```\n```\napplication/json\n```\n```\naccept\n```\n```\nACCEPT\n```\n```\napplication/json, text/event-stream\n```\n, Constant = . , Purpose = . , Example = \n**Content Type Constants:**\n- `CONTENT_TYPE_JSON` = `\"application/json\"`\n- `CONTENT_TYPE_SSE` = `\"text/event-stream\"`\n- `JSON` = `\"application/json\"` (client)\n- `SSE` = `\"text/event-stream\"` (client)\n**Session ID Validation:**\n- Pattern: `SESSION_ID_PATTERN` validates visible ASCII characters (0x21-0x7E)\n- Generated using `uuid4().hex` for new sessions\n- Validated on transport initialization and request processing\nSources:\n[src/mcp/server/streamable_http.py:50-64](.)\n,\n[src/mcp/client/streamable_http.py:42-51](.)\n,\n[src/mcp/server/streamable_http.py:62-64](.)",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 17,
      "total_chunks": 40,
      "char_count": 978,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412394"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:18",
    "content": "StreamableHTTP transport integrates with ASGI applications through the session manager:\n```\nfrom starlette.applications import Starlette\nfrom starlette.routing import Mount\n\nsession_manager = StreamableHTTPSessionManager(\n    app=mcp_server,\n    event_store=event_store,\n    security_settings=security_settings\n)\n\napp = Starlette(\n    routes=[Mount(\"/mcp\", app=session_manager.handle_request)],\n    lifespan=lambda app: session_manager.run()\n)\n```\nThe session manager's\n```\nrun()\n```\nmethod provides lifecycle management for all sessions and can only be called once per instance.\nSources:\n[src/mcp/server/streamable_http_manager.py:80-120](.)\n,\n[src/mcp/server/streamable_http_manager.py:121-145](.)",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 18,
      "total_chunks": 40,
      "char_count": 699,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412399"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:19",
    "content": "This document covers the Server-Sent Events (SSE) transport implementation for MCP servers, which enables real-time bidirectional communication through a combination of SSE streaming for server-to-client messages and HTTP POST requests for client-to-server messages.\nFor information about the client-side SSE implementation, see\n[Client Transports](#3.2)\n. For HTTP-based transports with session management, see\n[StreamableHTTP Transport](#5.1)\n. For security features across all transports, see\n[Transport Security](#5.4)\n.",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 19,
      "total_chunks": 40,
      "char_count": 524,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412405"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:20",
    "content": "The SSE transport provides a hybrid communication model that combines the real-time capabilities of Server-Sent Events with the reliability of HTTP POST requests for bidirectional MCP communication.",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 20,
      "total_chunks": 40,
      "char_count": 198,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412410"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:21",
    "content": "```\ngraph TB\n    subgraph \"Client Side\"\n        SSEClient[\"sse_client()\"]\n        ReadStream[\"Read Stream\"]\n        WriteStream[\"Write Stream\"]\n        HTTPClient[\"HTTP Client\"]\n    end\n    \n    subgraph \"Server Side\"\n        SseServerTransport[\"SseServerTransport\"]\n        ConnectSSE[\"connect_sse()\"]\n        HandlePOST[\"handle_post_message()\"]\n        SessionMgr[\"Session Manager\"]\n        SecurityMW[\"TransportSecurityMiddleware\"]\n    end\n    \n    subgraph \"ASGI Integration\"\n        StarletteApp[\"Starlette Application\"]\n        SSERoute[\"Route('/sse', GET)\"]\n        MessageMount[\"Mount('/messages/', POST)\"]\n        EventSourceResponse[\"EventSourceResponse\"]\n    end\n    \n    subgraph \"Communication Streams\"\n        MemoryStreams[\"Memory Object Streams\"]\n        SSEEvents[\"SSE Event Stream\"]\n        POSTRequests[\"HTTP POST Requests\"]\n    end\n    \n    SSEClient --> SSERoute\n    SSEClient --> MessageMount\n    HTTPClient --> HandlePOST\n    \n    SSERoute --> ConnectSSE\n    MessageMount --> HandlePOST\n    \n    SseServerTransport --> ConnectSSE\n    SseServerTransport --> HandlePOST\n    SseServerTransport --> SessionMgr\n    SseServerTransport --> SecurityMW\n    \n    ConnectSSE --> EventSourceResponse\n    ConnectSSE --> MemoryStreams\n    HandlePOST --> MemoryStreams\n    \n    EventSourceResponse --> SSEEvents\n    HandlePOST --> POSTRequests\n    \n    ReadStream -.-> SSEEvents\n    WriteStream -.-> POSTRequests\n```\nSources:\n[src/mcp/server/sse.py:64-250](.)\n,\n[tests/shared/test_sse.py:83-104](.)",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 21,
      "total_chunks": 40,
      "char_count": 1506,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412416"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:22",
    "content": "```\nsequenceDiagram\n    participant C as \"Client\"\n    participant SSE as \"SSE Endpoint\"\n    participant POST as \"POST Endpoint\"\n    participant Transport as \"SseServerTransport\"\n    participant Server as \"MCP Server\"\n    \n    Note over C,Server: Connection Establishment\n    C->>SSE: GET /sse (establish SSE connection)\n    SSE->>Transport: connect_sse()\n    Transport->>Transport: Create session_id & streams\n    Transport->>C: SSE: endpoint event with POST URL\n    \n    Note over C,Server: MCP Communication\n    C->>POST: POST /messages/?session_id=xxx (client message)\n    POST->>Transport: handle_post_message()\n    Transport->>Server: Forward message via read_stream\n    Server->>Transport: Response via write_stream\n    Transport->>C: SSE: message event (server response)\n    \n    Note over C,Server: Session Cleanup\n    C->>SSE: Close SSE connection\n    Transport->>Transport: Clean up session & streams\n```\nSources:\n[src/mcp/server/sse.py:121-249](.)\n,\n[tests/shared/test_sse.py:183-195](.)",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 22,
      "total_chunks": 40,
      "char_count": 998,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412422"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:23",
    "content": "The\n```\nSseServerTransport\n```\nclass provides the core SSE transport functionality through two main ASGI applications.",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 23,
      "total_chunks": 40,
      "char_count": 118,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412428"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:24",
    "content": "```\nSseServerTransport\n```\n```\nconnect_sse()\n```\n```\nhandle_post_message()\n```\n, Purpose = . , Implementation = \nSecurity Middleware, src/mcp/server/sse.py:201-249 = Request validation",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 24,
      "total_chunks": 40,
      "char_count": 184,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412434"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:25",
    "content": "The transport requires an endpoint configuration and optional security settings:\n```\n# Basic initialization\nsse = SseServerTransport(\"/messages/\")\n\n# With security settings\nsecurity_settings = TransportSecuritySettings(\n    allowed_hosts=[\"127.0.0.1:*\", \"localhost:*\"],\n    allowed_origins=[\"http://127.0.0.1:*\"]\n)\nsse = SseServerTransport(\"/messages/\", security_settings=security_settings)\n```\nThe endpoint validation ensures only relative paths are accepted to prevent security issues\n[src/mcp/server/sse.py:105-115](.)\n.\nSources:\n[src/mcp/server/sse.py:80-120](.)\n,\n[tests/shared/test_sse.py:86-89](.)",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 25,
      "total_chunks": 40,
      "char_count": 604,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412440"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:26",
    "content": "```\ngraph LR\n    subgraph \"Starlette Routes\"\n        SSERoute[\"Route('/sse', GET)\"]\n        MessageMount[\"Mount('/messages/', POST)\"]\n    end\n    \n    subgraph \"Handler Functions\"\n        HandleSSE[\"handle_sse()\"]\n        SSETransport[\"sse.handle_post_message\"]\n    end\n    \n    subgraph \"Transport Methods\"\n        ConnectSSE[\"sse.connect_sse()\"]\n        HandlePOST[\"sse.handle_post_message()\"]\n    end\n    \n    subgraph \"MCP Server\"\n        ServerRun[\"server.run()\"]\n        Streams[\"read_stream, write_stream\"]\n    end\n    \n    SSERoute --> HandleSSE\n    MessageMount --> SSETransport\n    \n    HandleSSE --> ConnectSSE\n    SSETransport --> HandlePOST\n    \n    ConnectSSE --> Streams\n    Streams --> ServerRun\n```\nSources:\n[src/mcp/server/sse.py:6-37](.)\n,\n[tests/shared/test_sse.py:97-104](.)",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 26,
      "total_chunks": 40,
      "char_count": 795,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412445"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:27",
    "content": "The SSE transport implements session-based communication using UUID session identifiers and memory streams for message routing.",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 27,
      "total_chunks": 40,
      "char_count": 127,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412451"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:28",
    "content": "1. **Session Creation** : Generated during `connect_sse()` call [src/mcp/server/sse.py:144-146](.)\n2. **Stream Setup** : Memory object streams created for bidirectional communication [src/mcp/server/sse.py:135-142](.)\n3. **Endpoint Communication** : Client receives POST endpoint via initial SSE event [src/mcp/server/sse.py:161-168](.)\n4. **Message Routing** : POST requests routed to correct session via session_id [src/mcp/server/sse.py:216-228](.)\n5. **Cleanup** : Streams closed when SSE connection terminates [src/mcp/server/sse.py:191-193](.)",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 28,
      "total_chunks": 40,
      "char_count": 549,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412456"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:29",
    "content": "```\ngraph TB\n    subgraph \"Session Management\"\n        SessionID[\"UUID Session ID\"]\n        StreamWriters[\"_read_stream_writers[session_id]\"]\n        MemoryStreams[\"Memory Object Streams\"]\n    end\n    \n    subgraph \"Connection Flow\"\n        ConnectSSE[\"connect_sse()\"]\n        CreateSession[\"Create session_id = uuid4()\"]\n        StoreWriter[\"Store read_stream_writer\"]\n        SendEndpoint[\"Send endpoint URL to client\"]\n    end\n    \n    subgraph \"Message Flow\"\n        POSTRequest[\"POST /messages/?session_id=xxx\"]\n        ParseSessionID[\"Parse session_id from query\"]\n        FindWriter[\"Lookup writer in _read_stream_writers\"]\n        ForwardMessage[\"Forward to MCP server\"]\n    end\n    \n    ConnectSSE --> CreateSession\n    CreateSession --> SessionID\n    CreateSession --> StoreWriter\n    StoreWriter --> StreamWriters\n    StoreWriter --> SendEndpoint\n    \n    POSTRequest --> ParseSessionID\n    ParseSessionID --> FindWriter\n    FindWriter --> StreamWriters\n    FindWriter --> ForwardMessage\n    \n    MemoryStreams --> StreamWriters\n```\nSources:\n[src/mcp/server/sse.py:77](.)\n,\n[src/mcp/server/sse.py:144-146](.)\n,\n[src/mcp/server/sse.py:216-228](.)",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 29,
      "total_chunks": 40,
      "char_count": 1156,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412462"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:30",
    "content": "The SSE transport includes built-in security measures to prevent common web vulnerabilities.",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 30,
      "total_chunks": 40,
      "char_count": 92,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412467"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:31",
    "content": "The transport uses\n```\nTransportSecurityMiddleware\n```\nfor DNS rebinding protection and origin validation:\n- **Host Header Validation** : Ensures requests target allowed hosts [src/mcp/server/sse.py:129](.)\n- **Origin Header Checking** : Validates request origins for POST requests [src/mcp/server/sse.py:206](.)\n- **Relative Path Enforcement** : Prevents absolute URLs in endpoint configuration [src/mcp/server/sse.py:106-110](.)",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 31,
      "total_chunks": 40,
      "char_count": 430,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412473"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:32",
    "content": "The transport provides comprehensive error responses with specific HTTP status codes and messages:\nMissing session_id, Status Code = 400. Missing session_id, Response Message = \"session_id is required\". Missing session_id, Scenario = POST without session parametersrc/mcp/server/sse.py:213. Invalid session_id, Status Code = 400. Invalid session_id, Response Message = \"Invalid session ID\". Invalid session_id, Scenario = Malformed UUID in requestsrc/mcp/server/sse.py:221. Session not found, Status Code = 404. Session not found, Response Message = \"Could not find session\". Session not found, Scenario = Request for non-existent sessionsrc/mcp/server/sse.py:227. Parse error, Status Code = 400. Parse error, Response Message = \"Could not parse message\". Parse error, Scenario = Invalid JSON in message bodysrc/mcp/server/sse.py:238. Validation failure, Status Code = Variable. Validation failure, Response Message = Security middleware response. Validation failure, Scenario = DNS rebinding protectionsrc/mcp/server/sse.py:129-132",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 32,
      "total_chunks": 40,
      "char_count": 1032,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412479"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:33",
    "content": "The SSE client implements robust error handling for various failure scenarios:\n- **Origin Mismatch** : Raises `ValueError` when endpoint origin doesn't match connection origin [src/mcp/client/sse.py:85-89](.)\n- **Message Parsing** : Catches exceptions during JSON parsing and forwards to error stream [src/mcp/client/sse.py:99-102](.)\n- **Connection Failures** : Automatically propagates HTTP connection errors through the read stream [src/mcp/client/sse.py:108-110](.)\n- **Timeout Handling** : Configurable `sse_read_timeout` for SSE event reading [src/mcp/client/sse.py:28](.)\nSources:\n[src/mcp/server/sse.py:210-241](.)\n,\n[src/mcp/client/sse.py:85-110](.)",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 33,
      "total_chunks": 40,
      "char_count": 658,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412484"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:34",
    "content": "The SSE transport integrates with the client-side\n```\nsse_client\n```\nfunction to provide seamless MCP communication through a sophisticated endpoint discovery and validation process.",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 34,
      "total_chunks": 40,
      "char_count": 182,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412490"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:35",
    "content": "```\ngraph TB\n    subgraph \"SSE Client Flow\"\n        SSEConnect[\"sse_client() Context Manager\"]\n        HTTPClient[\"HTTP Client (httpx)\"]\n        SSEReader[\"sse_reader Task\"]\n        POSTWriter[\"post_writer Task\"]\n    end\n    \n    subgraph \"Endpoint Discovery\"\n        InitialSSE[\"GET /sse (establish SSE)\"]\n        EndpointEvent[\"SSE: endpoint event\"]\n        OriginValidation[\"Validate endpoint origin\"]\n        EndpointURL[\"Extract POST endpoint URL\"]\n    end\n    \n    subgraph \"Message Handling\"\n        MessageEvent[\"SSE: message event\"]\n        JSONParsing[\"Parse JSONRPCMessage\"]\n        SessionMessage[\"Create SessionMessage\"]\n        ReadStream[\"Forward to read_stream\"]\n    end\n    \n    subgraph \"Client Sending\"\n        WriteStream[\"Receive from write_stream\"]\n        POSTRequest[\"POST to endpoint URL\"]\n        ResponseValidation[\"Validate response\"]\n    end\n    \n    SSEConnect --> HTTPClient\n    SSEConnect --> SSEReader\n    SSEConnect --> POSTWriter\n    \n    SSEReader --> InitialSSE\n    InitialSSE --> EndpointEvent\n    EndpointEvent --> OriginValidation\n    OriginValidation --> EndpointURL\n    \n    SSEReader --> MessageEvent\n    MessageEvent --> JSONParsing\n    JSONParsing --> SessionMessage\n    SessionMessage --> ReadStream\n    \n    POSTWriter --> WriteStream\n    WriteStream --> POSTRequest\n    POSTRequest --> ResponseValidation\n```\nSources:\n[src/mcp/client/sse.py:24-144](.)\n,\n[src/mcp/client/sse.py:68-112](.)",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 35,
      "total_chunks": 40,
      "char_count": 1435,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412496"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:36",
    "content": "The SSE client implements a secure endpoint discovery process to prevent cross-origin attacks:\n1. **Initial Connection** : Client establishes SSE connection to server endpoint [src/mcp/client/sse.py:60-66](.)\n2. **Endpoint Event** : Server sends `endpoint` event with POST URL [src/mcp/client/sse.py:75-76](.)\n3. **Origin Validation** : Client validates endpoint origin matches connection origin [src/mcp/client/sse.py:79-89](.)\n4. **URL Construction** : Client constructs POST endpoint using `urljoin` for proper path resolution [src/mcp/client/sse.py:76](.)",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 36,
      "total_chunks": 40,
      "char_count": 559,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412501"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:37",
    "content": "```\n# Basic client connection\nasync with sse_client(server_url + \"/sse\") as streams:\n    async with ClientSession(*streams) as session:\n        result = await session.initialize()\n        # Use MCP session...\n\n# With custom headers and timeout\nasync with sse_client(\n    server_url + \"/sse\", \n    headers={\"Authorization\": \"Bearer token\"},\n    sse_read_timeout=5.0\n) as streams:\n    async with ClientSession(*streams) as session:\n        # Authenticated session usage...\n```",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 37,
      "total_chunks": 40,
      "char_count": 474,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412507"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:38",
    "content": "The\n```\nsse_client\n```\nfunction creates two concurrent tasks for bidirectional communication:\n```\nsse_reader\n```\n```\npost_writer\n```\n, Purpose = . , Implementation = \nThe reader task processes different SSE event types:\n- `endpoint` : Establishes POST endpoint URL with security validation\n- `message` : Forwards server messages to the client session\n- Unknown events: Logged as warnings for debugging\nSources:\n[src/mcp/client/sse.py:74-107](.)",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 38,
      "total_chunks": 40,
      "char_count": 444,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412513"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:StreamableHTTP_Transport:chunk:39",
    "content": "The transport preserves request context from the initial SSE connection and makes it available to MCP handlers:",
    "metadata": {
      "source": "python-sdk\\StreamableHTTP_Transport.md",
      "file_name": "StreamableHTTP_Transport.md",
      "subfolder": "python-sdk",
      "chunk_index": 39,
      "total_chunks": 40,
      "char_count": 111,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:34.412518"
    }
  }
]