[
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:Examples__Tutorials:chunk:0",
    "content": "This document provides practical examples and tutorials for building MCP servers and clients using the Python SDK. It demonstrates both low-level server implementations and high-level patterns, showing how to create functional MCP servers that expose tools, resources, and prompts to clients.\nFor detailed FastMCP framework usage with decorators, see\n[FastMCP Server Framework](#2)\n. For client implementation patterns, see\n[Client Framework](#3)\n. For low-level protocol details, see\n[Protocol & Message System](#4)\n.",
    "metadata": {
      "source": "python-sdk\\Examples__Tutorials.md",
      "file_name": "Examples__Tutorials.md",
      "subfolder": "python-sdk",
      "chunk_index": 0,
      "total_chunks": 10,
      "char_count": 518,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:15.789377"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:Examples__Tutorials:chunk:1",
    "content": "The MCP Python SDK includes several reference implementations that demonstrate core functionality:\n```\nlist_resources()\n```\n,\n```\nread_resource()\n```\n```\nlist_tools()\n```\n,\n```\ncall_tool()\n```\n```\nlist_prompts()\n```\n,\n```\nget_prompt()\n```\nResource Server, Purpose = Expose data and content. Resource Server, Key Components = \nAll examples support multiple transport protocols (stdio, SSE) and follow consistent patterns using the low-level\n```\nServer\n```\nclass from\n```\nmcp.server.lowlevel\n```\n.",
    "metadata": {
      "source": "python-sdk\\Examples__Tutorials.md",
      "file_name": "Examples__Tutorials.md",
      "subfolder": "python-sdk",
      "chunk_index": 1,
      "total_chunks": 10,
      "char_count": 495,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:15.789392"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:Examples__Tutorials:chunk:2",
    "content": "The foundation of all MCP servers follows this pattern:\n```\ngraph TB\n    subgraph \"Server Creation & Setup\"\n        ServerInit[\"Server('server-name')\"]\n        HandlerReg[\"Handler Registration<br/>@app.list_*, @app.call_*, @app.get_*\"]\n        TransportSetup[\"Transport Selection<br/>stdio_server() or SSE\"]\n    end\n    \n    subgraph \"Handler Implementation\"\n        ListHandlers[\"List Handlers<br/>list_resources(), list_tools(), list_prompts()\"]\n        ActionHandlers[\"Action Handlers<br/>read_resource(), call_tool(), get_prompt()\"]\n        ResponseTypes[\"Response Types<br/>types.Resource, types.Tool, types.Prompt\"]\n    end\n    \n    subgraph \"Runtime Execution\"\n        StreamSetup[\"Stream Setup<br/>streams[0], streams[1]\"]\n        AppRun[\"app.run()<br/>Message Processing\"]\n        InitOptions[\"create_initialization_options()\"]\n    end\n    \n    ServerInit --> HandlerReg\n    HandlerReg --> TransportSetup\n    HandlerReg --> ListHandlers\n    HandlerReg --> ActionHandlers\n    ListHandlers --> ResponseTypes\n    ActionHandlers --> ResponseTypes\n    TransportSetup --> StreamSetup\n    StreamSetup --> AppRun\n    StreamSetup --> InitOptions\n```\n**Sources:**\n[examples/servers/simple-resource/mcp_simple_resource/server.py:34-93](.)\n,\n[examples/servers/simple-tool/mcp_simple_tool/server.py:30-93](.)\n,\n[examples/servers/simple-prompt/mcp_simple_prompt/server.py:42-112](.)",
    "metadata": {
      "source": "python-sdk\\Examples__Tutorials.md",
      "file_name": "Examples__Tutorials.md",
      "subfolder": "python-sdk",
      "chunk_index": 2,
      "total_chunks": 10,
      "char_count": 1377,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:15.789400"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:Examples__Tutorials:chunk:3",
    "content": "The resource server demonstrates how to expose readable data sources through the MCP protocol:\n```\ngraph LR\n    subgraph \"Resource Server Components\"\n        SAMPLE_RESOURCES[\"SAMPLE_RESOURCES<br/>Static Data Dictionary\"]\n        list_resources_handler[\"@app.list_resources()<br/>Returns Resource Metadata\"]\n        read_resource_handler[\"@app.read_resource()<br/>Returns Resource Content\"]\n    end\n    \n    subgraph \"MCP Types Integration\"\n        Resource_Type[\"types.Resource<br/>uri, name, title, description\"]\n        FileUrl_Type[\"FileUrl<br/>file:/// URI scheme\"]\n        ReadResourceContents[\"ReadResourceContents<br/>content, mime_type\"]\n    end\n    \n    subgraph \"Request Flow\"\n        ListRequest[\"ListResourcesRequest\"]\n        ReadRequest[\"ReadResourceRequest(uri)\"]\n        ListResponse[\"List[types.Resource]\"]\n        ReadResponse[\"List[ReadResourceContents]\"]\n    end\n    \n    SAMPLE_RESOURCES --> list_resources_handler\n    SAMPLE_RESOURCES --> read_resource_handler\n    list_resources_handler --> Resource_Type\n    Resource_Type --> FileUrl_Type\n    read_resource_handler --> ReadResourceContents\n    \n    ListRequest --> list_resources_handler\n    ReadRequest --> read_resource_handler\n    list_resources_handler --> ListResponse\n    read_resource_handler --> ReadResponse\n```\n**Key Implementation Details:**\n- **Resource Registry** : [examples/servers/simple-resource/mcp_simple_resource/server.py:9-22](.) defines `SAMPLE_RESOURCES` dictionary containing static content\n- **List Handler** : [examples/servers/simple-resource/mcp_simple_resource/server.py:36-47](.) creates `types.Resource` objects with `FileUrl` URIs\n- **Read Handler** : [examples/servers/simple-resource/mcp_simple_resource/server.py:49-58](.) parses URIs and returns `ReadResourceContents`\n**Sources:**\n[examples/servers/simple-resource/mcp_simple_resource/server.py:9-58](.)",
    "metadata": {
      "source": "python-sdk\\Examples__Tutorials.md",
      "file_name": "Examples__Tutorials.md",
      "subfolder": "python-sdk",
      "chunk_index": 3,
      "total_chunks": 10,
      "char_count": 1866,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:15.789406"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:Examples__Tutorials:chunk:4",
    "content": "The tool server shows how to expose executable functions that clients can invoke:\n```\ngraph TB\n    subgraph \"Tool Server Architecture\"\n        fetch_website_func[\"fetch_website()<br/>Core Function Logic\"]\n        list_tools_handler[\"@app.list_tools()<br/>Tool Metadata Registration\"]\n        call_tool_handler[\"@app.call_tool()<br/>Tool Execution Handler\"]\n    end\n    \n    subgraph \"Tool Schema Definition\"\n        Tool_Type[\"types.Tool<br/>name, title, description\"]\n        inputSchema[\"inputSchema<br/>JSON Schema for Arguments\"]\n        ContentBlock_Response[\"List[types.ContentBlock]<br/>TextContent Response\"]\n    end\n    \n    subgraph \"HTTP Integration\"\n        create_mcp_http_client[\"create_mcp_http_client()<br/>Shared HTTP Client\"]\n        httpx_response[\"response.text<br/>Web Content Extraction\"]\n    end\n    \n    fetch_website_func --> create_mcp_http_client\n    create_mcp_http_client --> httpx_response\n    httpx_response --> ContentBlock_Response\n    \n    list_tools_handler --> Tool_Type\n    Tool_Type --> inputSchema\n    call_tool_handler --> fetch_website_func\n    call_tool_handler --> ContentBlock_Response\n```\n**Key Implementation Details:**\n- **Tool Function** : [examples/servers/simple-tool/mcp_simple_tool/server.py:11-18](.) implements `fetch_website()` with `create_mcp_http_client`\n- **Schema Definition** : [examples/servers/simple-tool/mcp_simple_tool/server.py:47-56](.) defines JSON schema for `url` parameter\n- **Tool Execution** : [examples/servers/simple-tool/mcp_simple_tool/server.py:32-38](.) validates arguments and calls core function\n**Sources:**\n[examples/servers/simple-tool/mcp_simple_tool/server.py:11-58](.)",
    "metadata": {
      "source": "python-sdk\\Examples__Tutorials.md",
      "file_name": "Examples__Tutorials.md",
      "subfolder": "python-sdk",
      "chunk_index": 4,
      "total_chunks": 10,
      "char_count": 1656,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:15.789411"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:Examples__Tutorials:chunk:5",
    "content": "The prompt server demonstrates how to create parameterized prompt templates:\n**Key Implementation Details:**\n- **Message Creation** : [examples/servers/simple-prompt/mcp_simple_prompt/server.py:8-30](.) implements `create_messages()` function with optional context and topic\n- **Prompt Registration** : [examples/servers/simple-prompt/mcp_simple_prompt/server.py:44-64](.) defines `types.Prompt` with `types.PromptArgument` specifications\n- **Template Logic** : [examples/servers/simple-prompt/mcp_simple_prompt/server.py:66-77](.) processes arguments and returns `types.GetPromptResult`\n**Sources:**\n[examples/servers/simple-prompt/mcp_simple_prompt/server.py:8-77](.)",
    "metadata": {
      "source": "python-sdk\\Examples__Tutorials.md",
      "file_name": "Examples__Tutorials.md",
      "subfolder": "python-sdk",
      "chunk_index": 5,
      "total_chunks": 10,
      "char_count": 669,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:15.789417"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:Examples__Tutorials:chunk:6",
    "content": "All example servers support dual transport modes using a consistent CLI pattern:",
    "metadata": {
      "source": "python-sdk\\Examples__Tutorials.md",
      "file_name": "Examples__Tutorials.md",
      "subfolder": "python-sdk",
      "chunk_index": 6,
      "total_chunks": 10,
      "char_count": 80,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:15.789422"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:Examples__Tutorials:chunk:7",
    "content": "```\ngraph TD\n    subgraph \"CLI Transport Options\"\n        click_command[\"@click.command()\"]\n        port_option[\"--port (default: 8000)\"]\n        transport_option[\"--transport (stdio|sse)\"]\n    end\n    \n    subgraph \"Transport Implementations\"\n        stdio_branch[\"stdio Transport\"]\n        sse_branch[\"SSE Transport\"]\n    end\n    \n    subgraph \"stdio Implementation\"\n        stdio_server_import[\"from mcp.server.stdio import stdio_server\"]\n        stdio_streams[\"stdio_server() context manager\"]\n        anyio_run[\"anyio.run(arun)\"]\n    end\n    \n    subgraph \"SSE Implementation\"\n        SseServerTransport_import[\"from mcp.server.sse import SseServerTransport\"]\n        starlette_app[\"Starlette ASGI Application\"]\n        uvicorn_run[\"uvicorn.run()\"]\n    end\n    \n    click_command --> port_option\n    click_command --> transport_option\n    transport_option --> stdio_branch\n    transport_option --> sse_branch\n    \n    stdio_branch --> stdio_server_import\n    stdio_server_import --> stdio_streams\n    stdio_streams --> anyio_run\n    \n    sse_branch --> SseServerTransport_import\n    SseServerTransport_import --> starlette_app\n    starlette_app --> uvicorn_run\n```\n**Implementation Details:**\n- **CLI Setup** : [examples/servers/simple-resource/mcp_simple_resource/server.py:25-32](.) defines consistent command-line interface\n- **stdio Transport** : [examples/servers/simple-resource/mcp_simple_resource/server.py:84-91](.) uses `stdio_server()` context manager with `anyio.run()`\n- **SSE Transport** : [examples/servers/simple-resource/mcp_simple_resource/server.py:60-83](.) integrates `SseServerTransport` with Starlette ASGI application\n**Sources:**\n[examples/servers/simple-resource/mcp_simple_resource/server.py:25-93](.)\n,\n[examples/servers/simple-tool/mcp_simple_tool/server.py:21-93](.)\n,\n[examples/servers/simple-prompt/mcp_simple_prompt/server.py:33-112](.)",
    "metadata": {
      "source": "python-sdk\\Examples__Tutorials.md",
      "file_name": "Examples__Tutorials.md",
      "subfolder": "python-sdk",
      "chunk_index": 7,
      "total_chunks": 10,
      "char_count": 1874,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:15.789428"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:Examples__Tutorials:chunk:8",
    "content": "All examples implement consistent error handling patterns:\n- Resource servers validate URIs and check resource existence [examples/servers/simple-resource/mcp_simple_resource/server.py:50-56](.)\n- Tool servers validate tool names and required arguments [examples/servers/simple-tool/mcp_simple_tool/server.py:34-37](.)\n- Prompt servers validate prompt names before processing [examples/servers/simple-prompt/mcp_simple_prompt/server.py:68-69](.)",
    "metadata": {
      "source": "python-sdk\\Examples__Tutorials.md",
      "file_name": "Examples__Tutorials.md",
      "subfolder": "python-sdk",
      "chunk_index": 8,
      "total_chunks": 10,
      "char_count": 445,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:15.789434"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:Examples__Tutorials:chunk:9",
    "content": "Examples demonstrate proper use of MCP type system:\n- Import `mcp.types` for protocol types [examples/servers/simple-resource/mcp_simple_resource/server.py:3](.)\n- Use `types.Resource` , `types.Tool` , `types.Prompt` for metadata [examples/servers/simple-resource/mcp_simple_resource/server.py:39-45](.)\n- Return appropriate content types like `ReadResourceContents` and `TextContent` [examples/servers/simple-resource/mcp_simple_resource/server.py:58](.)\nFor more advanced server implementations using the FastMCP framework, see\n[Server Examples](#9.1)\n. For client usage examples, see\n[Client Examples](#9.2)\n.",
    "metadata": {
      "source": "python-sdk\\Examples__Tutorials.md",
      "file_name": "Examples__Tutorials.md",
      "subfolder": "python-sdk",
      "chunk_index": 9,
      "total_chunks": 10,
      "char_count": 612,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:15.789440"
    }
  }
]