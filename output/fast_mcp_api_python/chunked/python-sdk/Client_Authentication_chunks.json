[
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:Client_Authentication:chunk:0",
    "content": "This page covers the OAuth 2.0 client authentication implementation in the MCP Python SDK. It provides comprehensive OAuth 2.0 support including PKCE flows, automatic discovery, dynamic client registration, and token management for MCP clients.\nFor server-side authentication, see\n[OAuth 2.0 Server](#7.2)\n. For general ClientSession usage, see\n[ClientSession](#4.1)\n.",
    "metadata": {
      "source": "python-sdk\\Client_Authentication.md",
      "file_name": "Client_Authentication.md",
      "subfolder": "python-sdk",
      "chunk_index": 0,
      "total_chunks": 6,
      "char_count": 368,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:08.655332"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:Client_Authentication:chunk:1",
    "content": "The client authentication system implements OAuth 2.0 Authorization Code flow with PKCE (Proof Key for Code Exchange) for secure authentication with MCP servers. It supports both modern RFC 9728 protected resource architecture and legacy authorization server patterns for backwards compatibility.\n**Key Components:**\n- `OAuthClientProvider` - Main authentication provider implementing `httpx.Auth`\n- `OAuthContext` - Stateful context managing OAuth flow data\n- `PKCEParameters` - PKCE parameter generation and validation\n- `TokenStorage` - Protocol for persistent token storage\nSources:\n[src/mcp/client/auth.py:1-552](.)\n,\n[tests/client/test_auth.py:1-900](.)",
    "metadata": {
      "source": "python-sdk\\Client_Authentication.md",
      "file_name": "Client_Authentication.md",
      "subfolder": "python-sdk",
      "chunk_index": 1,
      "total_chunks": 6,
      "char_count": 659,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:08.655355"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:Client_Authentication:chunk:2",
    "content": "```\ngraph TB\n    subgraph \"Client Authentication Components\"\n        OCP[\"OAuthClientProvider<br/>(httpx.Auth)\"]\n        CTX[\"OAuthContext\"]\n        PKCE[\"PKCEParameters\"]\n        TS[\"TokenStorage<br/>(Protocol)\"]\n    end\n    \n    subgraph \"Discovery & Registration\"\n        PRM[\"Protected Resource<br/>Discovery (RFC 9728)\"]\n        OAuthMeta[\"OAuth Metadata<br/>Discovery\"]\n        DCR[\"Dynamic Client<br/>Registration\"]\n    end\n    \n    subgraph \"Token Management\"\n        AuthFlow[\"Authorization Flow<br/>(PKCE)\"]\n        TokenEx[\"Token Exchange\"]\n        TokenRef[\"Token Refresh\"]\n        TokenVal[\"Token Validation\"]\n    end\n    \n    subgraph \"Transport Integration\"\n        HTTPX[\"httpx.AsyncClient\"]\n        AuthFlow_HTTPX[\"async_auth_flow\"]\n    end\n    \n    OCP --> CTX\n    OCP --> PKCE\n    OCP --> TS\n    \n    OCP --> PRM\n    OCP --> OAuthMeta\n    OCP --> DCR\n    \n    OCP --> AuthFlow\n    OCP --> TokenEx\n    OCP --> TokenRef\n    OCP --> TokenVal\n    \n    OCP --> AuthFlow_HTTPX\n    AuthFlow_HTTPX --> HTTPX\n    \n    CTX -.-> \"Lock for<br/>thread safety\"\n    CTX -.-> \"Protocol version<br/>handling\"\n```\nSources:\n[src/mcp/client/auth.py:179-552](.)\n,\n[src/mcp/client/auth.py:84-177](.)",
    "metadata": {
      "source": "python-sdk\\Client_Authentication.md",
      "file_name": "Client_Authentication.md",
      "subfolder": "python-sdk",
      "chunk_index": 2,
      "total_chunks": 6,
      "char_count": 1196,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:08.655365"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:Client_Authentication:chunk:3",
    "content": "The\n```\nOAuthClientProvider\n```\nclass is the main entry point for OAuth authentication, implementing the\n```\nhttpx.Auth\n```\ninterface for seamless integration with HTTP clients.\n```\n__init__()\n```\n```\n_discover_protected_resource()\n```\n,\n```\n_get_discovery_urls()\n```\n```\n_register_client()\n```\n```\n_perform_authorization()\n```\n```\n_exchange_token()\n```\n,\n```\n_refresh_token()\n```\n```\nasync_auth_flow()\n```\nInitialization, Purpose = Setup OAuth context and handlers. Initialization, Key Methods = \n**Key Configuration:**\n```\nOAuthClientProvider(\n    server_url=\"https://api.example.com/v1/mcp\",\n    client_metadata=client_metadata,\n    storage=token_storage,\n    redirect_handler=redirect_handler,\n    callback_handler=callback_handler,\n    timeout=300.0\n)\n```\nSources:\n[src/mcp/client/auth.py:179-206](.)\n,\n[src/mcp/client/auth.py:485-552](.)",
    "metadata": {
      "source": "python-sdk\\Client_Authentication.md",
      "file_name": "Client_Authentication.md",
      "subfolder": "python-sdk",
      "chunk_index": 3,
      "total_chunks": 6,
      "char_count": 843,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:08.655375"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:Client_Authentication:chunk:4",
    "content": "The\n```\nOAuthContext\n```\ndataclass maintains all state during the OAuth flow, including discovered metadata, client information, and current tokens.\n**State Management:**\n- **Discovery metadata** : `protected_resource_metadata` , `oauth_metadata`\n- **Client registration** : `client_info`\n- **Token state** : `current_tokens` , `token_expiry_time`\n- **Thread safety** : `lock` (anyio.Lock)\n**Key Methods:**\n- `is_token_valid()` - Check token validity and expiration\n- `can_refresh_token()` - Determine if refresh is possible\n- `get_resource_url()` - Calculate RFC 8707 resource parameter\n- `should_include_resource_param()` - Protocol version-aware parameter inclusion\nSources:\n[src/mcp/client/auth.py:84-177](.)",
    "metadata": {
      "source": "python-sdk\\Client_Authentication.md",
      "file_name": "Client_Authentication.md",
      "subfolder": "python-sdk",
      "chunk_index": 4,
      "total_chunks": 6,
      "char_count": 712,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:08.655384"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:Client_Authentication:chunk:5",
    "content": "Implements PKCE (Proof Key for Code Exchange) parameter generation following RFC 7636 for enhanced security.\n**Generation Process:**\n- **Code verifier** : 128-character random string using `[A-Za-z0-9-._~]`\n- **Code challenge** : SHA256 hash of verifier, base64url-encoded (no padding)\n- **Challenge method** : Always \"S256\"\n```\npkce = PKCEParameters.generate()\n```",
    "metadata": {
      "source": "python-sdk\\Client_Authentication.md",
      "file_name": "Client_Authentication.md",
      "subfolder": "python-sdk",
      "chunk_index": 5,
      "total_chunks": 6,
      "char_count": 365,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:08.655394"
    }
  }
]