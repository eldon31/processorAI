[
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:Messages_posted_to_apiv1messagessession_idxxx:chunk:0",
    "content": "```\nThe transport automatically handles path prefix resolution using ASGI scope's `root_path` [src/mcp/server/sse.py:152-158]().\n\nSources: [src/mcp/server/sse.py:6-37](), [tests/shared/test_sse.py:83-104](), [tests/shared/test_sse.py:289-300]()\n\n# STDIO Transport\n\n\n\n\nThe STDIO Transport enables MCP clients to communicate with servers by spawning processes and using standard input/output streams for message exchange. This transport is particularly useful for local development, CLI tools, and scenarios where servers are distributed as standalone executables. For HTTP-based transports, see [StreamableHTTP Transport](#5.1) and [SSE Transport](#5.2).\n\n## Configuration\n\nThe STDIO transport is configured using the `StdioServerParameters` class, which defines how the server process should be spawned and managed.\n\n### StdioServerParameters\n\nThe configuration model provides comprehensive control over process execution:\n\n```mermaid\ngraph TB\n    subgraph \"StdioServerParameters Configuration\"\n        Config[StdioServerParameters]\n        Command[\"command: str<br/>Executable to run\"]\n        Args[\"args: list[str]<br/>Command line arguments\"]\n        Env[\"env: dict[str, str] | None<br/>Environment variables\"]\n        Cwd[\"cwd: str | Path | None<br/>Working directory\"]\n        Encoding[\"encoding: str = 'utf-8'<br/>Text encoding\"]\n        ErrorHandler[\"encoding_error_handler<br/>strict|ignore|replace\"]\n    end\n    \n    Config --> Command\n    Config --> Args\n    Config --> Env\n    Config --> Cwd\n    Config --> Encoding\n    Config --> ErrorHandler\n```\n**Sources:**\n[src/mcp/client/stdio/](.)\n[**init**](.)\n[.py:72-103](.)\nThe\n```\nenv\n```\nparameter controls environment variable inheritance. When\n```\nNone\n```\n, the system uses\n```\nget_default_environment()\n```\nwhich provides a secure subset of environment variables filtered for safety.",
    "metadata": {
      "source": "python-sdk\\Messages_posted_to_apiv1messagessession_idxxx.md",
      "file_name": "Messages_posted_to_apiv1messagessession_idxxx.md",
      "subfolder": "python-sdk",
      "chunk_index": 0,
      "total_chunks": 14,
      "char_count": 1844,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:22.091306"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:Messages_posted_to_apiv1messagessession_idxxx:chunk:1",
    "content": "The transport implements security measures for environment variable inheritance:\n```\ngraph LR\n    subgraph \"Environment Variable Filtering\"\n        AllEnv[\"All Environment Variables\"]\n        Filter[\"get_default_environment()\"]\n        SafeEnv[\"Filtered Safe Variables\"]\n        FunctionCheck[\"Skip variables starting with '()'\"]\n    end\n    \n    subgraph \"Platform-Specific Variables\"\n        Windows[\"Windows:<br/>APPDATA, PATH, TEMP, etc.\"]\n        Unix[\"Unix/Linux:<br/>HOME, PATH, SHELL, etc.\"]\n    end\n    \n    AllEnv --> Filter\n    Filter --> FunctionCheck\n    FunctionCheck --> SafeEnv\n    SafeEnv --> Windows\n    SafeEnv --> Unix\n```\n**Sources:**\n[src/mcp/client/stdio/](.)\n[**init**](.)\n[.py:51-69](.)\n,\n[src/mcp/client/stdio/](.)\n[**init**](.)\n[.py:27-45](.)",
    "metadata": {
      "source": "python-sdk\\Messages_posted_to_apiv1messagessession_idxxx.md",
      "file_name": "Messages_posted_to_apiv1messagessession_idxxx.md",
      "subfolder": "python-sdk",
      "chunk_index": 1,
      "total_chunks": 14,
      "char_count": 769,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:22.091322"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:Messages_posted_to_apiv1messagessession_idxxx:chunk:2",
    "content": "The\n```\nstdio_client\n```\nfunction provides the primary interface for establishing STDIO connections. It returns read and write streams for JSON-RPC message exchange:\n```\ngraph TB\n    subgraph \"stdio_client Connection Flow\"\n        Entry[\"stdio_client(server, errlog)\"]\n        CreateStreams[\"Create memory object streams\"]\n        SpawnProcess[\"_create_platform_compatible_process()\"]\n        StartTasks[\"Start stdout_reader and stdin_writer tasks\"]\n        YieldStreams[\"Yield (read_stream, write_stream)\"]\n        Cleanup[\"Shutdown sequence:<br/>1. Close stdin<br/>2. Wait for graceful exit<br/>3. Force termination if needed\"]\n    end\n    \n    Entry --> CreateStreams\n    CreateStreams --> SpawnProcess\n    SpawnProcess --> StartTasks\n    StartTasks --> YieldStreams\n    YieldStreams --> Cleanup\n```\n**Sources:**\n[src/mcp/client/stdio/](.)\n[**init**](.)\n[.py:105-216](.)",
    "metadata": {
      "source": "python-sdk\\Messages_posted_to_apiv1messagessession_idxxx.md",
      "file_name": "Messages_posted_to_apiv1messagessession_idxxx.md",
      "subfolder": "python-sdk",
      "chunk_index": 2,
      "total_chunks": 14,
      "char_count": 873,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:22.091329"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:Messages_posted_to_apiv1messagessession_idxxx:chunk:3",
    "content": "The transport handles JSON-RPC message serialization automatically:\n```\ngraph LR\n    subgraph \"Message Flow\"\n        SendMsg[\"SessionMessage\"]\n        Serialize[\"JSON serialization\"]\n        StdinWrite[\"Write to process stdin\"]\n        \n        StdoutRead[\"Read from process stdout\"]\n        ParseJSON[\"Parse JSON lines\"]\n        SessionMsg[\"Create SessionMessage\"]\n    end\n    \n    subgraph \"Error Handling\"\n        ParseError[\"JSON Parse Error\"]\n        ErrorStream[\"Send exception to read_stream\"]\n    end\n    \n    SendMsg --> Serialize\n    Serialize --> StdinWrite\n    \n    StdoutRead --> ParseJSON\n    ParseJSON --> SessionMsg\n    ParseJSON --> ParseError\n    ParseError --> ErrorStream\n```\n**Sources:**\n[src/mcp/client/stdio/](.)\n[**init**](.)\n[.py:139-179](.)",
    "metadata": {
      "source": "python-sdk\\Messages_posted_to_apiv1messagessession_idxxx.md",
      "file_name": "Messages_posted_to_apiv1messagessession_idxxx.md",
      "subfolder": "python-sdk",
      "chunk_index": 3,
      "total_chunks": 14,
      "char_count": 766,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:22.091335"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:Messages_posted_to_apiv1messagessession_idxxx:chunk:4",
    "content": "The transport provides platform-specific process creation to ensure reliable child process management:\n```\ngraph TB\n    subgraph \"Platform-Specific Process Creation\"\n        Create[\"_create_platform_compatible_process()\"]\n        PlatformCheck{\"sys.platform == 'win32'\"}\n        \n        subgraph \"Windows Path\"\n            WinExec[\"get_windows_executable_command()\"]\n            WinProcess[\"create_windows_process()<br/>Uses Job Objects\"]\n        end\n        \n        subgraph \"Unix Path\"\n            UnixProcess[\"anyio.open_process()<br/>start_new_session=True\"]\n        end\n    end\n    \n    Create --> PlatformCheck\n    PlatformCheck -->|Windows| WinExec\n    WinExec --> WinProcess\n    PlatformCheck -->|Unix/Linux| UnixProcess\n```\n**Sources:**\n[src/mcp/client/stdio/](.)\n[**init**](.)\n[.py:234-258](.)\n,\n[src/mcp/client/stdio/](.)\n[**init**](.)\n[.py:218-232](.)",
    "metadata": {
      "source": "python-sdk\\Messages_posted_to_apiv1messagessession_idxxx.md",
      "file_name": "Messages_posted_to_apiv1messagessession_idxxx.md",
      "subfolder": "python-sdk",
      "chunk_index": 4,
      "total_chunks": 14,
      "char_count": 865,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:22.091340"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:Messages_posted_to_apiv1messagessession_idxxx:chunk:5",
    "content": "The transport implements comprehensive child process cleanup using platform-specific mechanisms:\n```\ngraph TB\n    subgraph \"Process Tree Termination\"\n        Terminate[\"_terminate_process_tree()\"]\n        PlatformCheck{\"Platform Check\"}\n        \n        subgraph \"Windows Termination\"\n            WinJobObjects[\"Job Objects<br/>Automatic child cleanup\"]\n            WinTerminate[\"terminate_windows_process_tree()\"]\n        end\n        \n        subgraph \"Unix Termination\"\n            ProcessGroup[\"Process Group (PGID)\"]\n            KillPG[\"os.killpg() for atomic termination\"]\n            UnixTerminate[\"terminate_posix_process_tree()\"]\n        end\n    end\n    \n    Terminate --> PlatformCheck\n    PlatformCheck -->|Windows| WinJobObjects\n    WinJobObjects --> WinTerminate\n    PlatformCheck -->|Unix/Linux| ProcessGroup\n    ProcessGroup --> KillPG\n    KillPG --> UnixTerminate\n```\n**Sources:**\n[src/mcp/client/stdio/](.)\n[**init**](.)\n[.py:261-277](.)",
    "metadata": {
      "source": "python-sdk\\Messages_posted_to_apiv1messagessession_idxxx.md",
      "file_name": "Messages_posted_to_apiv1messagessession_idxxx.md",
      "subfolder": "python-sdk",
      "chunk_index": 5,
      "total_chunks": 14,
      "char_count": 953,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:22.091345"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:Messages_posted_to_apiv1messagessession_idxxx:chunk:6",
    "content": "The transport implements the MCP specification's stdio shutdown sequence for graceful server termination:\n```\nsequenceDiagram\n    participant Client as stdio_client\n    participant Process as Server Process\n    participant Stdin as Process stdin\n    participant Stdout as Process stdout\n    \n    Note over Client,Process: Normal Operation\n    Client->>Process: JSON-RPC messages via stdin\n    Process->>Client: JSON-RPC responses via stdout\n    \n    Note over Client,Process: Shutdown Sequence (MCP Spec)\n    Client->>Stdin: Close stdin stream\n    Note over Process: Server detects stdin closure\n    Process->>Process: Run cleanup handlers\n    Process->>Client: Exit gracefully\n    \n    alt If process doesn't exit within timeout\n        Client->>Process: Send SIGTERM\n        Note over Process: 2 second grace period\n        alt If still running\n            Client->>Process: Send SIGKILL (force)\n        end\n    end\n```\n**Sources:**\n[src/mcp/client/stdio/](.)\n[**init**](.)\n[.py:190-215](.)",
    "metadata": {
      "source": "python-sdk\\Messages_posted_to_apiv1messagessession_idxxx.md",
      "file_name": "Messages_posted_to_apiv1messagessession_idxxx.md",
      "subfolder": "python-sdk",
      "chunk_index": 6,
      "total_chunks": 14,
      "char_count": 992,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:22.091351"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:Messages_posted_to_apiv1messagessession_idxxx:chunk:7",
    "content": "The transport uses configurable timeouts for process termination:\n- **`PROCESS_TERMINATION_TIMEOUT`** : 2.0 seconds for graceful exit after stdin closure\n- Escalation to SIGTERM if graceful exit fails\n- Final SIGKILL if SIGTERM is ignored\n**Sources:**\n[src/mcp/client/stdio/](.)\n[**init**](.)\n[.py:47-48](.)",
    "metadata": {
      "source": "python-sdk\\Messages_posted_to_apiv1messagessession_idxxx.md",
      "file_name": "Messages_posted_to_apiv1messagessession_idxxx.md",
      "subfolder": "python-sdk",
      "chunk_index": 7,
      "total_chunks": 14,
      "char_count": 307,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:22.091357"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:Messages_posted_to_apiv1messagessession_idxxx:chunk:8",
    "content": "Windows requires special handling for executable resolution and process management:\n```\ngraph TB\n    subgraph \"Windows Specifics\"\n        ExecResolve[\"get_windows_executable_command()<br/>Handle .cmd/.bat extensions\"]\n        JobObjects[\"Job Objects for child cleanup\"]\n        FallbackProcess[\"FallbackProcess compatibility\"]\n        ResourceWarnings[\"Expected ResourceWarnings<br/>due to immediate termination\"]\n    end\n    \n    subgraph \"Process Tree Management\"\n        JobObject[\"Win32 Job Object\"]\n        ChildProcs[\"Automatic child process tracking\"]\n        AtomicCleanup[\"Atomic tree termination\"]\n    end\n    \n    ExecResolve --> JobObjects\n    JobObjects --> JobObject\n    JobObject --> ChildProcs\n    ChildProcs --> AtomicCleanup\n```\n**Sources:**\n[src/mcp/client/stdio/](.)\n[**init**](.)\n[.py:228-232](.)\n,\n[src/mcp/client/stdio/](.)\n[**init**](.)\n[.py:16-22](.)",
    "metadata": {
      "source": "python-sdk\\Messages_posted_to_apiv1messagessession_idxxx.md",
      "file_name": "Messages_posted_to_apiv1messagessession_idxxx.md",
      "subfolder": "python-sdk",
      "chunk_index": 8,
      "total_chunks": 14,
      "char_count": 875,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:22.091362"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:Messages_posted_to_apiv1messagessession_idxxx:chunk:9",
    "content": "Unix systems use process groups for reliable child process management:\n- **Session Creation** : `start_new_session=True` creates new process group\n- **Atomic Termination** : `os.killpg()` terminates entire process group\n- **Signal Escalation** : SIGTERM → SIGKILL escalation for unresponsive processes\n**Sources:**\n[src/mcp/client/stdio/](.)\n[**init**](.)\n[.py:250-256](.)",
    "metadata": {
      "source": "python-sdk\\Messages_posted_to_apiv1messagessession_idxxx.md",
      "file_name": "Messages_posted_to_apiv1messagessession_idxxx.md",
      "subfolder": "python-sdk",
      "chunk_index": 9,
      "total_chunks": 14,
      "char_count": 372,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:22.091368"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:Messages_posted_to_apiv1messagessession_idxxx:chunk:10",
    "content": "The transport handles various failure scenarios:\n```\ngraph TB\n    subgraph \"Error Scenarios\"\n        NonExistent[\"Non-existent executable\"]\n        ProcessError[\"Process spawn failure\"]\n        InvalidJSON[\"Invalid JSON from server\"]\n        ProcessCrash[\"Server process crash\"]\n        StdinIgnored[\"Server ignores stdin closure\"]\n    end\n    \n    subgraph \"Error Responses\"\n        OSError[\"Raises OSError\"]\n        StreamCleanup[\"Clean up memory streams\"]\n        JSONException[\"Send exception to read_stream\"]\n        ConnectionClosed[\"McpError with CONNECTION_CLOSED\"]\n        ForceTermination[\"Escalate to SIGTERM/SIGKILL\"]\n    end\n    \n    NonExistent --> OSError\n    ProcessError --> StreamCleanup\n    InvalidJSON --> JSONException\n    ProcessCrash --> ConnectionClosed\n    StdinIgnored --> ForceTermination\n```\n**Sources:**\n[src/mcp/client/stdio/](.)\n[**init**](.)\n[.py:131-137](.)\n,\n[src/mcp/client/stdio/](.)\n[**init**](.)\n[.py:154-161](.)",
    "metadata": {
      "source": "python-sdk\\Messages_posted_to_apiv1messagessession_idxxx.md",
      "file_name": "Messages_posted_to_apiv1messagessession_idxxx.md",
      "subfolder": "python-sdk",
      "chunk_index": 10,
      "total_chunks": 14,
      "char_count": 950,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:22.091374"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:Messages_posted_to_apiv1messagessession_idxxx:chunk:11",
    "content": "The transport includes comprehensive tests for child process scenarios:\n- **Basic Parent-Child** : Single child process termination\n- **Nested Trees** : Multi-level process hierarchies (parent → child → grandchild)\n- **Race Conditions** : Parent exits during cleanup sequence\n- **Signal Handling** : Processes that ignore specific signals\n**Sources:**\n[tests/client/test_stdio.py:226-521](.)",
    "metadata": {
      "source": "python-sdk\\Messages_posted_to_apiv1messagessession_idxxx.md",
      "file_name": "Messages_posted_to_apiv1messagessession_idxxx.md",
      "subfolder": "python-sdk",
      "chunk_index": 11,
      "total_chunks": 14,
      "char_count": 391,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:22.091379"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:Messages_posted_to_apiv1messagessession_idxxx:chunk:12",
    "content": "```\nfrom mcp.client.stdio import StdioServerParameters, stdio_client\nfrom mcp.client.session import ClientSession\n\nserver_params = StdioServerParameters(\n    command=\"python\",\n    args=[\"-m\", \"my_mcp_server\"],\n    env={\"DEBUG\": \"1\"}\n)\n\nasync with stdio_client(server_params) as (read, write):\n    async with ClientSession(read, write) as session:\n        await session.initialize()\n        # Use session for MCP operations\n```",
    "metadata": {
      "source": "python-sdk\\Messages_posted_to_apiv1messagessession_idxxx.md",
      "file_name": "Messages_posted_to_apiv1messagessession_idxxx.md",
      "subfolder": "python-sdk",
      "chunk_index": 12,
      "total_chunks": 14,
      "char_count": 426,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:22.091384"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:Messages_posted_to_apiv1messagessession_idxxx:chunk:13",
    "content": "```\nserver_params = StdioServerParameters(\n    command=\"./my_server\",\n    env={\n        **get_default_environment(),\n        \"API_KEY\": \"secret\",\n        \"LOG_LEVEL\": \"debug\"\n    }\n)\n```\n**Sources:**\n[tests/client/test_stdio.py:37-81](.)\n,\n[src/mcp/client/stdio/](.)\n[**init**](.)\n[.py:127-128](.)",
    "metadata": {
      "source": "python-sdk\\Messages_posted_to_apiv1messagessession_idxxx.md",
      "file_name": "Messages_posted_to_apiv1messagessession_idxxx.md",
      "subfolder": "python-sdk",
      "chunk_index": 13,
      "total_chunks": 14,
      "char_count": 297,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:22.091389"
    }
  }
]