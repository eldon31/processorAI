[
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:ServerSession_Implementation:chunk:0",
    "content": "The ServerSession class provides the core session management functionality for MCP servers, handling individual client connections and managing bidirectional communication between servers and clients. It serves as the low-level foundation that higher-level server frameworks like FastMCP build upon for managing protocol-compliant client interactions.\nFor information about the high-level FastMCP framework that uses ServerSession internally, see\n[FastMCP Server Framework](#2)\n. For details about the underlying BaseSession architecture, see\n[Session Management](#4.2)\n.",
    "metadata": {
      "source": "python-sdk\\ServerSession_Implementation.md",
      "file_name": "ServerSession_Implementation.md",
      "subfolder": "python-sdk",
      "chunk_index": 0,
      "total_chunks": 16,
      "char_count": 571,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:28.092120"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:ServerSession_Implementation:chunk:1",
    "content": "ServerSession extends the BaseSession class with server-specific functionality, implementing the server side of the MCP protocol communication pattern.\n```\nclassDiagram\n    class BaseSession {\n        +send_request()\n        +send_notification()\n        +_receive_loop()\n        +_received_request()\n        +_received_notification()\n    }\n    \n    class ServerSession {\n        -_initialization_state: InitializationState\n        -_client_params: InitializeRequestParams\n        -_init_options: InitializationOptions\n        +check_client_capability()\n        +send_log_message()\n        +send_resource_updated()\n        +create_message()\n        +list_roots()\n        +elicit()\n        +send_ping()\n        +send_progress_notification()\n        +incoming_messages: MemoryObjectReceiveStream\n    }\n    \n    class InitializationState {\n        <<enumeration>>\n        NotInitialized\n        Initializing\n        Initialized\n    }\n    \n    class InitializationOptions {\n        +server_name: str\n        +server_version: str\n        +capabilities: ServerCapabilities\n        +instructions: str\n        +website_url: str\n        +icons: list[Icon]\n    }\n    \n    BaseSession <|-- ServerSession\n    ServerSession --> InitializationState\n    ServerSession --> InitializationOptions\n```\nSources:\n[src/mcp/server/session.py:71-79](.)\n,\n[src/mcp/server/session.py:58-62](.)\n,\n[src/mcp/server/models.py:14-21](.)",
    "metadata": {
      "source": "python-sdk\\ServerSession_Implementation.md",
      "file_name": "ServerSession_Implementation.md",
      "subfolder": "python-sdk",
      "chunk_index": 1,
      "total_chunks": 16,
      "char_count": 1404,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:28.092137"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:ServerSession_Implementation:chunk:2",
    "content": "ServerSession manages a strict initialization protocol that ensures proper MCP handshake before allowing most operations.",
    "metadata": {
      "source": "python-sdk\\ServerSession_Implementation.md",
      "file_name": "ServerSession_Implementation.md",
      "subfolder": "python-sdk",
      "chunk_index": 2,
      "total_chunks": 16,
      "char_count": 121,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:28.092143"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:ServerSession_Implementation:chunk:3",
    "content": "The session progresses through three distinct states during its lifecycle:\n```\nNotInitialized\n```\n```\nInitializing\n```\n```\nInitialized\n```\n, Description = . , Allowed Operations = \n```\nstateDiagram-v2\n    [*] --> NotInitialized\n    NotInitialized --> Initializing : InitializeRequest\n    Initializing --> Initialized : InitializedNotification\n    Initialized --> [*] : Session ends\n    \n    NotInitialized --> NotInitialized : PingRequest (allowed)\n    Initializing --> Initializing : PingRequest (allowed)\n    Initialized --> Initialized : All requests/notifications\n```\nSources:\n[src/mcp/server/session.py:58-62](.)\n,\n[src/mcp/server/session.py:142-171](.)\n,\n[src/mcp/server/session.py:173-181](.)",
    "metadata": {
      "source": "python-sdk\\ServerSession_Implementation.md",
      "file_name": "ServerSession_Implementation.md",
      "subfolder": "python-sdk",
      "chunk_index": 3,
      "total_chunks": 16,
      "char_count": 699,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:28.092149"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:ServerSession_Implementation:chunk:4",
    "content": "The initialization process follows the MCP specification:\n1. **Client sends InitializeRequest** : Contains protocol version, capabilities, and client info\n2. **Server responds with InitializeResult** : Confirms protocol version and advertises server capabilities\n3. **Client sends InitializedNotification** : Signals readiness to begin normal operations\n```\nsequenceDiagram\n    participant Client\n    participant ServerSession\n    \n    Client->>ServerSession: InitializeRequest(protocolVersion, capabilities)\n    Note over ServerSession: State: NotInitialized → Initializing\n    ServerSession->>Client: InitializeResult(protocolVersion, serverCapabilities)\n    Client->>ServerSession: InitializedNotification\n    Note over ServerSession: State: Initializing → Initialized\n    Note over ServerSession: Ready for normal operations\n```\nSources:\n[src/mcp/server/session.py:144-165](.)\n,\n[src/mcp/server/session.py:177-178](.)",
    "metadata": {
      "source": "python-sdk\\ServerSession_Implementation.md",
      "file_name": "ServerSession_Implementation.md",
      "subfolder": "python-sdk",
      "chunk_index": 4,
      "total_chunks": 16,
      "char_count": 921,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:28.092155"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:ServerSession_Implementation:chunk:5",
    "content": "ServerSession provides capability checking to ensure servers only use features supported by the connected client.",
    "metadata": {
      "source": "python-sdk\\ServerSession_Implementation.md",
      "file_name": "ServerSession_Implementation.md",
      "subfolder": "python-sdk",
      "chunk_index": 5,
      "total_chunks": 16,
      "char_count": 113,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:28.092161"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:ServerSession_Implementation:chunk:6",
    "content": "The\n```\ncheck_client_capability()\n```\nmethod validates whether a client supports specific MCP capabilities:\n```\nflowchart TD\n    Start[\"check_client_capability(capability)\"]\n    CheckParams{\"client_params exists?\"}\n    CheckRoots{\"capability.roots specified?\"}\n    CheckSampling{\"capability.sampling specified?\"}\n    CheckElicitation{\"capability.elicitation specified?\"}\n    CheckExperimental{\"capability.experimental specified?\"}\n    ValidateRoots[\"Validate roots.listChanged\"]\n    ValidateExperimental[\"Validate each experimental key-value pair\"]\n    ReturnTrue[\"Return True\"]\n    ReturnFalse[\"Return False\"]\n    \n    Start --> CheckParams\n    CheckParams -->|No| ReturnFalse\n    CheckParams -->|Yes| CheckRoots\n    CheckRoots -->|Yes| ValidateRoots\n    CheckRoots -->|No| CheckSampling\n    ValidateRoots -->|Valid| CheckSampling\n    ValidateRoots -->|Invalid| ReturnFalse\n    CheckSampling -->|Yes| CheckElicitation\n    CheckSampling -->|No| CheckElicitation\n    CheckElicitation -->|Yes| CheckExperimental\n    CheckElicitation -->|No| CheckExperimental\n    CheckExperimental -->|Yes| ValidateExperimental\n    CheckExperimental -->|No| ReturnTrue\n    ValidateExperimental -->|Valid| ReturnTrue\n    ValidateExperimental -->|Invalid| ReturnFalse\n```\nSources:\n[src/mcp/server/session.py:105-136](.)",
    "metadata": {
      "source": "python-sdk\\ServerSession_Implementation.md",
      "file_name": "ServerSession_Implementation.md",
      "subfolder": "python-sdk",
      "chunk_index": 6,
      "total_chunks": 16,
      "char_count": 1298,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:28.092168"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:ServerSession_Implementation:chunk:7",
    "content": "ServerSession handles both incoming messages from clients and outgoing messages to clients through dedicated processing pipelines.",
    "metadata": {
      "source": "python-sdk\\ServerSession_Implementation.md",
      "file_name": "ServerSession_Implementation.md",
      "subfolder": "python-sdk",
      "chunk_index": 7,
      "total_chunks": 16,
      "char_count": 130,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:28.092174"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:ServerSession_Implementation:chunk:8",
    "content": "```\nflowchart TD\n    ReceiveLoop[\"_receive_loop()\"]\n    HandleIncoming[\"_handle_incoming()\"]\n    MessageStream[\"_incoming_message_stream_writer\"]\n    ProcessMessage[\"Process message in incoming_messages stream\"]\n    \n    ClientMessage[\"Client Message\"]\n    ReceivedRequest[\"_received_request()\"]\n    ReceivedNotification[\"_received_notification()\"]\n    \n    ClientMessage --> ReceiveLoop\n    ReceiveLoop --> ReceivedRequest\n    ReceiveLoop --> ReceivedNotification\n    ReceivedRequest --> HandleIncoming\n    ReceivedNotification --> HandleIncoming\n    HandleIncoming --> MessageStream\n    MessageStream --> ProcessMessage\n```\nSources:\n[src/mcp/server/session.py:138-140](.)\n,\n[src/mcp/server/session.py:326-327](.)\n,\n[src/mcp/server/session.py:329-333](.)",
    "metadata": {
      "source": "python-sdk\\ServerSession_Implementation.md",
      "file_name": "ServerSession_Implementation.md",
      "subfolder": "python-sdk",
      "chunk_index": 8,
      "total_chunks": 16,
      "char_count": 755,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:28.092179"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:ServerSession_Implementation:chunk:9",
    "content": "All incoming requests except ping are validated against the initialization state:\n```\nflowchart TD\n    IncomingRequest[\"Incoming Request\"]\n    CheckType{\"Request Type\"}\n    CheckInitState{\"Initialization Complete?\"}\n    ProcessRequest[\"Process Request\"]\n    RaiseError[\"Raise RuntimeError\"]\n    \n    IncomingRequest --> CheckType\n    CheckType -->|InitializeRequest| ProcessRequest\n    CheckType -->|PingRequest| ProcessRequest\n    CheckType -->|Other| CheckInitState\n    CheckInitState -->|Yes| ProcessRequest\n    CheckInitState -->|No| RaiseError\n```\nSources:\n[src/mcp/server/session.py:169-171](.)",
    "metadata": {
      "source": "python-sdk\\ServerSession_Implementation.md",
      "file_name": "ServerSession_Implementation.md",
      "subfolder": "python-sdk",
      "chunk_index": 9,
      "total_chunks": 16,
      "char_count": 600,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:28.092185"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:ServerSession_Implementation:chunk:10",
    "content": "ServerSession provides a comprehensive set of methods for servers to communicate with clients, covering all major MCP protocol operations.",
    "metadata": {
      "source": "python-sdk\\ServerSession_Implementation.md",
      "file_name": "ServerSession_Implementation.md",
      "subfolder": "python-sdk",
      "chunk_index": 10,
      "total_chunks": 16,
      "char_count": 138,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:28.092191"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:ServerSession_Implementation:chunk:11",
    "content": "```\nsend_log_message()\n```\n```\nLoggingMessageNotification\n```\n```\nsend_resource_updated()\n```\n```\nResourceUpdatedNotification\n```\n```\nsend_progress_notification()\n```\n```\nProgressNotification\n```\n```\nsend_resource_list_changed()\n```\n```\nResourceListChangedNotification\n```\n```\nsend_tool_list_changed()\n```\n```\nToolListChangedNotification\n```\n```\nsend_prompt_list_changed()\n```\n```\nPromptListChangedNotification\n```\n, Purpose = . , MCP Notification Type = \nSources:\n[src/mcp/server/session.py:183-202](.)\n,\n[src/mcp/server/session.py:204-212](.)\n,\n[src/mcp/server/session.py:291-312](.)\n,\n[src/mcp/server/session.py:314-324](.)",
    "metadata": {
      "source": "python-sdk\\ServerSession_Implementation.md",
      "file_name": "ServerSession_Implementation.md",
      "subfolder": "python-sdk",
      "chunk_index": 11,
      "total_chunks": 16,
      "char_count": 626,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:28.092197"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:ServerSession_Implementation:chunk:12",
    "content": "ServerSession can initiate requests to clients for advanced MCP operations:\n```\nflowchart LR\n    ServerSession[\"ServerSession\"]\n    CreateMessage[\"create_message()\"]\n    ListRoots[\"list_roots()\"]\n    Elicit[\"elicit()\"]\n    SendPing[\"send_ping()\"]\n    \n    LLMSampling[\"LLM Sampling Request\"]\n    RootsAccess[\"Client Roots Access\"]\n    UserInput[\"User Input Elicitation\"]\n    ConnectivityTest[\"Connectivity Test\"]\n    \n    ServerSession --> CreateMessage\n    ServerSession --> ListRoots\n    ServerSession --> Elicit\n    ServerSession --> SendPing\n    \n    CreateMessage --> LLMSampling\n    ListRoots --> RootsAccess\n    Elicit --> UserInput\n    SendPing --> ConnectivityTest\n```\nSources:\n[src/mcp/server/session.py:214-247](.)\n,\n[src/mcp/server/session.py:249-254](.)\n,\n[src/mcp/server/session.py:256-282](.)\n,\n[src/mcp/server/session.py:284-289](.)",
    "metadata": {
      "source": "python-sdk\\ServerSession_Implementation.md",
      "file_name": "ServerSession_Implementation.md",
      "subfolder": "python-sdk",
      "chunk_index": 12,
      "total_chunks": 16,
      "char_count": 848,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:28.092203"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:ServerSession_Implementation:chunk:13",
    "content": "ServerSession implements the server side of the complete MCP protocol specification, handling message routing and protocol compliance.",
    "metadata": {
      "source": "python-sdk\\ServerSession_Implementation.md",
      "file_name": "ServerSession_Implementation.md",
      "subfolder": "python-sdk",
      "chunk_index": 13,
      "total_chunks": 16,
      "char_count": 134,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:28.092208"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:ServerSession_Implementation:chunk:14",
    "content": "```\ngraph TB\n    subgraph \"Outgoing (Server → Client)\"\n        ServerRequest[\"ServerRequest\"]\n        ServerNotification[\"ServerNotification\"]\n        ServerResult[\"ServerResult\"]\n    end\n    \n    subgraph \"Incoming (Client → Server)\"\n        ClientRequest[\"ClientRequest\"] \n        ClientNotification[\"ClientNotification\"]\n        ClientResult[\"ClientResult\"]\n    end\n    \n    subgraph \"ServerSession Type Parameters\"\n        TypeParams[\"BaseSession[ServerRequest, ServerNotification, ServerResult, ClientRequest, ClientNotification]\"]\n    end\n    \n    ServerSession[\"ServerSession\"] --> TypeParams\n    TypeParams --> ServerRequest\n    TypeParams --> ServerNotification  \n    TypeParams --> ServerResult\n    TypeParams --> ClientRequest\n    TypeParams --> ClientNotification\n```\nSources:\n[src/mcp/server/session.py:71-79](.)",
    "metadata": {
      "source": "python-sdk\\ServerSession_Implementation.md",
      "file_name": "ServerSession_Implementation.md",
      "subfolder": "python-sdk",
      "chunk_index": 14,
      "total_chunks": 16,
      "char_count": 825,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:28.092214"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:ServerSession_Implementation:chunk:15",
    "content": "ServerSession supports stateless operation for scenarios where session persistence is not required:",
    "metadata": {
      "source": "python-sdk\\ServerSession_Implementation.md",
      "file_name": "ServerSession_Implementation.md",
      "subfolder": "python-sdk",
      "chunk_index": 15,
      "total_chunks": 16,
      "char_count": 99,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:28.092219"
    }
  }
]