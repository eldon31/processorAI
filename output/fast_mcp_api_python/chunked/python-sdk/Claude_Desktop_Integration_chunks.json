[
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:Claude_Desktop_Integration:chunk:0",
    "content": "This document covers the integration of MCP servers with the Claude Desktop application. The integration allows MCP servers built with the Python SDK to be automatically discovered and used by Claude Desktop through configuration file management and standardized execution commands.\nFor information about building MCP servers, see\n[FastMCP Server Framework](#2)\n. For CLI development tools, see\n[MCP CLI Commands](#8.1)\n.",
    "metadata": {
      "source": "python-sdk\\Claude_Desktop_Integration.md",
      "file_name": "Claude_Desktop_Integration.md",
      "subfolder": "python-sdk",
      "chunk_index": 0,
      "total_chunks": 7,
      "char_count": 421,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:07.852566"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:Claude_Desktop_Integration:chunk:1",
    "content": "The Claude Desktop integration operates through a configuration-based approach where MCP servers are registered in Claude Desktop's configuration file and executed via standardized\n```\nuv run\n```\ncommands.\n```\ngraph TB\n    subgraph \"Claude Desktop Application\"\n        ClaudeApp[\"Claude Desktop\"]\n        ConfigReader[\"Configuration Reader\"]\n        ProcessManager[\"Process Manager\"]\n    end\n    \n    subgraph \"Configuration System\"\n        ConfigFile[\"claude_desktop_config.json\"]\n        ConfigDir[\"Platform Config Directory\"]\n    end\n    \n    subgraph \"MCP CLI System\"\n        MCPInstall[\"mcp install command\"]\n        ClaudeModule[\"mcp.cli.claude\"]\n        UpdateFunction[\"update_claude_config()\"]\n    end\n    \n    subgraph \"Execution Environment\"\n        UVCommand[\"uv run command\"]\n        MCPServer[\"MCP Server Process\"]\n        StdioTransport[\"stdio transport\"]\n    end\n    \n    subgraph \"User Workflow\"\n        Developer[\"Developer\"]\n        ServerFile[\"server.py\"]\n    end\n    \n    Developer --> MCPInstall\n    ServerFile --> MCPInstall\n    MCPInstall --> ClaudeModule\n    ClaudeModule --> UpdateFunction\n    UpdateFunction --> ConfigFile\n    ConfigFile --> ConfigDir\n    \n    ClaudeApp --> ConfigReader\n    ConfigReader --> ConfigFile\n    ClaudeApp --> ProcessManager\n    ProcessManager --> UVCommand\n    UVCommand --> MCPServer\n    MCPServer --> StdioTransport\n    StdioTransport --> ClaudeApp\n```\n**Claude Desktop Integration Architecture**\nSources:\n[src/mcp/cli/claude.py:44-148](.)\n,\n[src/mcp/cli/cli.py:362-488](.)",
    "metadata": {
      "source": "python-sdk\\Claude_Desktop_Integration.md",
      "file_name": "Claude_Desktop_Integration.md",
      "subfolder": "python-sdk",
      "chunk_index": 1,
      "total_chunks": 7,
      "char_count": 1530,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:07.852583"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:Claude_Desktop_Integration:chunk:2",
    "content": "The installation process uses the\n```\nmcp install\n```\ncommand to register MCP servers with Claude Desktop. The process involves server discovery, dependency resolution, and configuration file updates.\n```\nsequenceDiagram\n    participant User\n    participant CLI[\"mcp install\"]\n    participant Parser[\"_parse_file_path()\"]\n    participant Importer[\"_import_server()\"]\n    participant Claude[\"update_claude_config()\"]\n    participant ConfigFile[\"claude_desktop_config.json\"]\n    \n    User->>CLI: \"mcp install server.py --name myserver\"\n    CLI->>Parser: \"Parse file_spec\"\n    Parser->>CLI: \"Return file_path, server_object\"\n    CLI->>Importer: \"Import server to get dependencies\"\n    Importer->>CLI: \"Return server instance with dependencies\"\n    CLI->>Claude: \"Update config with server details\"\n    Claude->>ConfigFile: \"Write server configuration\"\n    ConfigFile->>Claude: \"Configuration updated\"\n    Claude->>CLI: \"Success\"\n    CLI->>User: \"Server installed successfully\"\n```\n**MCP Server Installation Flow**\nThe installation process handles several key aspects:\n```\n_parse_file_path()\n```\n```\n_import_server()\n```\n```\nupdate_claude_config()\n```\nFile parsing, Function = . File parsing, Purpose = \nSources:\n[src/mcp/cli/cli.py:420-488](.)\n,\n[src/mcp/cli/cli.py:88-117](.)\n,\n[src/mcp/cli/cli.py:119-208](.)",
    "metadata": {
      "source": "python-sdk\\Claude_Desktop_Integration.md",
      "file_name": "Claude_Desktop_Integration.md",
      "subfolder": "python-sdk",
      "chunk_index": 2,
      "total_chunks": 7,
      "char_count": 1307,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:07.852590"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:Claude_Desktop_Integration:chunk:3",
    "content": "Claude Desktop uses a JSON configuration file to store MCP server definitions. The configuration file follows a specific structure that defines execution commands, environment variables, and server metadata.\n```\ngraph TB\n    subgraph \"claude_desktop_config.json Structure\"\n        Root[\"Root Object\"]\n        MCPServers[\"mcpServers\"]\n        ServerName[\"Server Name Key\"]\n        ServerConfig[\"Server Configuration\"]\n        \n        subgraph \"Server Configuration\"\n            Command[\"command (uv path)\"]\n            Args[\"args (array)\"]\n            Env[\"env (optional)\"]\n        end\n        \n        subgraph \"Command Arguments\"\n            RunCmd[\"run\"]\n            WithMCP[\"--with mcp[cli]\"]\n            WithPkgs[\"--with additional-packages\"]\n            WithEditable[\"--with-editable path\"]\n            MCPRun[\"mcp run file_spec\"]\n        end\n    end\n    \n    Root --> MCPServers\n    MCPServers --> ServerName\n    ServerName --> ServerConfig\n    ServerConfig --> Command\n    ServerConfig --> Args\n    ServerConfig --> Env\n    \n    Args --> RunCmd\n    Args --> WithMCP\n    Args --> WithPkgs\n    Args --> WithEditable\n    Args --> MCPRun\n```\n**Configuration File Structure**\nThe generated configuration follows this pattern:\n```\n{\n  \"mcpServers\": {\n    \"server-name\": {\n      \"command\": \"/path/to/uv\",\n      \"args\": [\n        \"run\",\n        \"--with\", \"mcp[cli]\",\n        \"--with\", \"additional-package\",\n        \"--with-editable\", \"/path/to/editable/package\",\n        \"mcp\", \"run\", \"/absolute/path/to/server.py:object\"\n      ],\n      \"env\": {\n        \"VAR_NAME\": \"value\"\n      }\n    }\n  }\n}\n```\nSources:\n[src/mcp/cli/claude.py:87-135](.)\n,\n[src/mcp/cli/claude.py:101-125](.)",
    "metadata": {
      "source": "python-sdk\\Claude_Desktop_Integration.md",
      "file_name": "Claude_Desktop_Integration.md",
      "subfolder": "python-sdk",
      "chunk_index": 3,
      "total_chunks": 7,
      "char_count": 1677,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:07.852595"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:Claude_Desktop_Integration:chunk:4",
    "content": "The system automatically detects Claude Desktop's configuration directory based on the operating system platform using standardized application data locations.\n```\ngraph LR\n    subgraph \"Platform Detection\"\n        GetPath[\"get_claude_config_path()\"]\n        Platform[\"sys.platform\"]\n    end\n    \n    subgraph \"Windows\"\n        WinPath[\"~/AppData/Roaming/Claude\"]\n    end\n    \n    subgraph \"macOS\"\n        MacPath[\"~/Library/Application Support/Claude\"]\n    end\n    \n    subgraph \"Linux\"\n        LinuxPath[\"$XDG_CONFIG_HOME/Claude or ~/.config/Claude\"]\n    end\n    \n    Platform --> GetPath\n    GetPath --> WinPath\n    GetPath --> MacPath\n    GetPath --> LinuxPath\n    \n    WinPath --> ConfigFile[\"claude_desktop_config.json\"]\n    MacPath --> ConfigFile\n    LinuxPath --> ConfigFile\n```\n**Platform-Specific Configuration Paths**\n```\n%USERPROFILE%\\AppData\\Roaming\\Claude\n```\n```\n~/Library/Application Support/Claude\n```\n```\n$XDG_CONFIG_HOME/Claude\n```\nor\n```\n~/.config/Claude\n```\n```\nXDG_CONFIG_HOME\n```\nWindows, Configuration Path = . Windows, Environment Variable = \nSources:\n[src/mcp/cli/claude.py:17-30](.)",
    "metadata": {
      "source": "python-sdk\\Claude_Desktop_Integration.md",
      "file_name": "Claude_Desktop_Integration.md",
      "subfolder": "python-sdk",
      "chunk_index": 4,
      "total_chunks": 7,
      "char_count": 1109,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:07.852601"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:Claude_Desktop_Integration:chunk:5",
    "content": "The configuration system supports environment variables and automatic dependency management for MCP servers. Environment variables are preserved across updates and can be loaded from files or command line arguments.\n```\ngraph TB\n    subgraph \"Environment Variable Sources\"\n        EnvFile[\".env file\"]\n        CLIVars[\"--env-var KEY=VALUE\"]\n        ExistingVars[\"Existing config variables\"]\n    end\n    \n    subgraph \"Dependency Sources\"\n        ServerDeps[\"server.dependencies\"]\n        WithPackages[\"--with packages\"]\n        EditableInstall[\"--with-editable\"]\n        MCPCLIBase[\"mcp[cli] (base)\"]\n    end\n    \n    subgraph \"Configuration Merge\"\n        EnvMerge[\"Environment Variable Merge\"]\n        DepMerge[\"Dependency Deduplication\"]\n        ConfigUpdate[\"Configuration Update\"]\n    end\n    \n    EnvFile --> EnvMerge\n    CLIVars --> EnvMerge\n    ExistingVars --> EnvMerge\n    \n    ServerDeps --> DepMerge\n    WithPackages --> DepMerge\n    EditableInstall --> DepMerge\n    MCPCLIBase --> DepMerge\n    \n    EnvMerge --> ConfigUpdate\n    DepMerge --> ConfigUpdate\n```\n**Environment and Dependency Management**\nThe system handles environment variables with the following precedence:\n1. New command-line variables override existing ones\n2. Existing variables are preserved if not explicitly updated\n3. Variables from `.env` files are loaded using the `python-dotenv` library\nDependency management includes:\n- Automatic inclusion of `mcp[cli]` package\n- Server-specific dependencies from `server.dependencies` attribute\n- Additional packages specified via `--with` flags\n- Editable package installations via `--with-editable`\nSources:\n[src/mcp/cli/claude.py:92-99](.)\n,\n[src/mcp/cli/cli.py:452-456](.)\n,\n[src/mcp/cli/cli.py:104-115](.)\n,\n[src/mcp/cli/cli.py:458-476](.)",
    "metadata": {
      "source": "python-sdk\\Claude_Desktop_Integration.md",
      "file_name": "Claude_Desktop_Integration.md",
      "subfolder": "python-sdk",
      "chunk_index": 5,
      "total_chunks": 7,
      "char_count": 1770,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:07.852607"
    }
  },
  {
    "chunk_id": "fast_mcp_api_python:python-sdk:Claude_Desktop_Integration:chunk:6",
    "content": "The integration generates standardized\n```\nuv run\n```\ncommands that Claude Desktop executes to launch MCP servers. The command structure ensures proper dependency isolation and package management.\n```\ngraph LR\n    subgraph \"Command Components\"\n        UVPath[\"uv executable path\"]\n        RunSubcmd[\"run subcommand\"]\n        WithMCP[\"--with mcp[cli]\"]\n        WithPackages[\"--with additional-packages\"]\n        WithEditable[\"--with-editable path\"]\n        MCPCommand[\"mcp run file_spec\"]\n    end\n    \n    subgraph \"Path Resolution\"\n        GetUVPath[\"get_uv_path()\"]\n        WhichUV[\"shutil.which('uv')\"]\n        AbsolutePath[\"Absolute uv path\"]\n    end\n    \n    subgraph \"File Specification\"\n        FileSpec[\"file_spec input\"]\n        AbsoluteFile[\"Absolute file path\"]\n        ServerObject[\"Optional :object suffix\"]\n    end\n    \n    GetUVPath --> WhichUV\n    WhichUV --> AbsolutePath\n    \n    FileSpec --> AbsoluteFile\n    FileSpec --> ServerObject\n    \n    AbsolutePath --> UVPath\n    UVPath --> RunSubcmd\n    RunSubcmd --> WithMCP\n    WithMCP --> WithPackages\n    WithPackages --> WithEditable\n    WithEditable --> MCPCommand\n    MCPCommand --> AbsoluteFile\n    MCPCommand --> ServerObject\n```\n**UV Command Generation Process**\nThe system generates commands following this pattern:\n```\n/path/to/uv run --with mcp[cli] --with package1 --with package2 --with-editable /path/to/project mcp run /absolute/path/to/server.py:object\n```\nKey aspects of command generation:\n- Uses absolute path to `uv` executable for reliability\n- Converts relative file paths to absolute paths\n- Preserves server object specifications (e.g., `server.py:app` )\n- Deduplicates packages while preserving order\n- Handles Windows drive letter syntax correctly\nSources:\n[src/mcp/cli/claude.py:33-41](.)\n,\n[src/mcp/cli/claude.py:101-125](.)\n,\n[src/mcp/cli/claude.py:116-122](.)",
    "metadata": {
      "source": "python-sdk\\Claude_Desktop_Integration.md",
      "file_name": "Claude_Desktop_Integration.md",
      "subfolder": "python-sdk",
      "chunk_index": 6,
      "total_chunks": 7,
      "char_count": 1852,
      "collection": "fast_mcp_api_python",
      "processing_method": "hybrid_chunker",
      "timestamp": "2025-10-15T07:13:07.852613"
    }
  }
]