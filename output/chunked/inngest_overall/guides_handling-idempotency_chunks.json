{
  "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_handling-idempotency.md",
  "title": "#### On this page",
  "num_chunks": 13,
  "total_chars": 10321,
  "chunks": [
    {
      "index": 0,
      "text": "On this page\n- [Handling idempotency](\\docs\\guides\\handling-idempotency#handling-idempotency)\n- [What is idempotency?](\\docs\\guides\\handling-idempotency#what-is-idempotency)\n- [How to handle idempotency with Inngest](\\docs\\guides\\handling-idempotency#how-to-handle-idempotency-with-inngest)\n- [At the event level (the producer)](\\docs\\guides\\handling-idempotency#at-the-event-level-the-producer)\n- [At the function level (the consumer)](\\docs\\guides\\handling-idempotency#at-the-function-level-the-consumer)\n- [Example](\\docs\\guides\\handling-idempotency#example)\n- [Writing CEL expressions](\\docs\\guides\\handling-idempotency#writing-cel-expressions)\n- [Idempotency keys and fan-out](\\docs\\guides\\handling-idempotency#idempotency-keys-and-fan-out)\nFeatures\n[Inngest Functions](\\docs\\features\\inngest-functions)\n[Errors & Retries](\\docs\\guides\\error-handling)",
      "char_count": 856,
      "token_count": 266,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_handling-idempotency.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_handling-idempotency.md",
        "file_name": "guides_handling-idempotency.md",
        "file_size": 10612,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "42f10a89ca1f88d38453e6a22dfb8601670c3c5b939778ccebc7a2ba882886c0",
        "author": null,
        "created_at": "2025-10-12T23:59:30.897978",
        "modified_at": "2025-10-12T23:59:30.898680",
        "page_count": null,
        "word_count": 1364,
        "extracted_at": "2025-10-13T20:03:44.440096",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 13,
        "token_count": 266,
        "has_context": true
      }
    },
    {
      "index": 1,
      "text": "Handling idempotency\nEnsuring that your code is idempotent is foundational to building reliable systems. Within Inngest, there are multiple ways to ensure that your functions are idempotent.",
      "char_count": 190,
      "token_count": 41,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_handling-idempotency.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_handling-idempotency.md",
        "file_name": "guides_handling-idempotency.md",
        "file_size": 10612,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "42f10a89ca1f88d38453e6a22dfb8601670c3c5b939778ccebc7a2ba882886c0",
        "author": null,
        "created_at": "2025-10-12T23:59:30.897978",
        "modified_at": "2025-10-12T23:59:30.898680",
        "page_count": null,
        "word_count": 1364,
        "extracted_at": "2025-10-13T20:03:44.440096",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 13,
        "token_count": 41,
        "has_context": true
      }
    },
    {
      "index": 2,
      "text": "Handling idempotency\nWhat is idempotency?\nIdempotency, by definition, describes an operation that can occur multiple times without changing the result beyond the initial execution. In the world of software, this means that a functions can be executed multiple times, but it will always have the same effect as being called once. An example of this is an \"upsert.\"",
      "char_count": 363,
      "token_count": 78,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_handling-idempotency.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_handling-idempotency.md",
        "file_name": "guides_handling-idempotency.md",
        "file_size": 10612,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "42f10a89ca1f88d38453e6a22dfb8601670c3c5b939778ccebc7a2ba882886c0",
        "author": null,
        "created_at": "2025-10-12T23:59:30.897978",
        "modified_at": "2025-10-12T23:59:30.898680",
        "page_count": null,
        "word_count": 1364,
        "extracted_at": "2025-10-13T20:03:44.440096",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 13,
        "token_count": 78,
        "has_context": true
      }
    },
    {
      "index": 3,
      "text": "Handling idempotency\nHow to handle idempotency with Inngest\nIt should always be the aim to write code that is idempotent itself within your system or your Inngest functions, but there are also some features within Inngest that can help you ensure idempotency.\nAs Inngest functions are triggered by events, there are two main ways to ensure idempotency:\n- [at the event level (](\\docs\\guides\\handling-idempotency#at-the-event-level-the-producer) [*the producer*](\\docs\\guides\\handling-idempotency#at-the-event-level-the-producer) [)](\\docs\\guides\\handling-idempotency#at-the-event-level-the-producer) and/or\n- [at the function level (](\\docs\\guides\\handling-idempotency#at-the-function-level-the-consumer) [*the consumer*](\\docs\\guides\\handling-idempotency#at-the-function-level-the-consumer) [)](\\docs\\guides\\handling-idempotency#at-the-function-level-the-consumer)",
      "char_count": 865,
      "token_count": 238,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_handling-idempotency.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_handling-idempotency.md",
        "file_name": "guides_handling-idempotency.md",
        "file_size": 10612,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "42f10a89ca1f88d38453e6a22dfb8601670c3c5b939778ccebc7a2ba882886c0",
        "author": null,
        "created_at": "2025-10-12T23:59:30.897978",
        "modified_at": "2025-10-12T23:59:30.898680",
        "page_count": null,
        "word_count": 1364,
        "extracted_at": "2025-10-13T20:03:44.440096",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 13,
        "token_count": 238,
        "has_context": true
      }
    },
    {
      "index": 4,
      "text": "Handling idempotency\nAt the event level (the producer)\nEach event that is received by Inngest will trigger any functions with that matching trigger. If an event is sent twice, Inngest will trigger the function twice. This is the default behavior as Inngest does not know if the event is the same event or a new event.\n**Example:**\nUsing an e-commerce store as an example, a user can add the same t-shirt to their cart twice because they want to buy two (\n*2 unique events*\n). That same user may check out and pay for all items in their cart but click the \"pay\" button twice (\n*2 duplicate events*\n).\nTo prevent an event from being handled twice, you can set a unique event\n```\nid\n```\nwhen\n[sending the event](\\docs\\reference\\events\\send#inngest-send-event-payload-event-payload-promise)\n. This\n```\nid\n```\nacts as an idempotency key\n**over a 24 hour period**\nand Inngest will check to see if that event has already been received before triggering another function.\nTypeScript Go Python\nCopy Copied\n```\nconst cartId = 'CGo5Q5ekAxilN92d27asEoDO' ;\nawait inngest .send ({\nid : `checkout-completed- ${ cartId } ` , // <-- This is the idempotency key\nname : 'cart/checkout.completed' ,\ndata : {\nemail : 'taylor@example.com' ,\ncartId : cartId\n}\n})\n```\ncheckout-completed-CGo5Q5ekAxilN92d27asEoDO, Timestamp = 08:00:00.000. checkout-completed-CGo5Q5ekAxilN92d27asEoDO, Function = ✅ Functions are triggered. checkout-completed-CGo5Q5ekAxilN92d27asEoDO, Timestamp = 08:00:00.248. checkout-completed-CGo5Q5ekAxilN92d27asEoDO, Function = ❌ Nothing is triggered\nAs you can see in the above example, setting the\n```\nid\n```\nallows you to prevent duplicate execution on the producer side, where the event originates.\nSome other key points to note:\n- Event IDs will only be used to prevent duplicate execution for a 24 hour period. After 24 hours, the event will be treated as a new event and will trigger any functions with that trigger.\n- Inngest will store the second event and it will be visible in your event history, but it will *not* trigger any functions.\n- Events that fan-out to multiple functions will trigger each function as they normally would.\n**Tip**\n- If you are using Inngest's\n[webhook transforms](\\docs\\platform\\webhooks#defining-a-transform-function)\n, you can set the\n```\nid\n```\nin the transform to ensure that the event is idempotent.\nEvent idempotency is ignored by some features:\n- Debouncing\n- Event batching\n- Function pausing. While a function is paused, event idempotency is ignored. So if a replay is created after unpausing, it may have \"skipped\" runs that ignored event idempotency.",
      "char_count": 2597,
      "token_count": 722,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_handling-idempotency.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_handling-idempotency.md",
        "file_name": "guides_handling-idempotency.md",
        "file_size": 10612,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "42f10a89ca1f88d38453e6a22dfb8601670c3c5b939778ccebc7a2ba882886c0",
        "author": null,
        "created_at": "2025-10-12T23:59:30.897978",
        "modified_at": "2025-10-12T23:59:30.898680",
        "page_count": null,
        "word_count": 1364,
        "extracted_at": "2025-10-13T20:03:44.440096",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 13,
        "token_count": 722,
        "has_context": true
      }
    },
    {
      "index": 5,
      "text": "Handling idempotency\nAt the function level (the consumer)\nYou might prefer to ensure idempotency at the function level or you may not be able to control the event that is being sent (from a webhook). The\n[function's](\\docs\\reference\\functions\\create#inngest-create-function-configuration-trigger-handler-inngest-function)\n[```\nidempotency\n```](\\docs\\reference\\functions\\create#inngest-create-function-configuration-trigger-handler-inngest-function)\n[config option](\\docs\\reference\\functions\\create#inngest-create-function-configuration-trigger-handler-inngest-function)\nallows you to do this.\nEach function's\n```\nidempotency\n```\nkey is defined as a\n[CEL expression](\\docs\\guides\\writing-expressions)\nthat is evaluated with the event payload's data. The expression is used to generate a unique string key which idempotently prevents duplicate execution of the function.\nEach unique expression will only trigger one function execution\n**per 24 hour period**\n. After 24 hours, a new event that generates the same unique expression will trigger another function execution.",
      "char_count": 1068,
      "token_count": 246,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_handling-idempotency.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_handling-idempotency.md",
        "file_name": "guides_handling-idempotency.md",
        "file_size": 10612,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "42f10a89ca1f88d38453e6a22dfb8601670c3c5b939778ccebc7a2ba882886c0",
        "author": null,
        "created_at": "2025-10-12T23:59:30.897978",
        "modified_at": "2025-10-12T23:59:30.898680",
        "page_count": null,
        "word_count": 1364,
        "extracted_at": "2025-10-13T20:03:44.440096",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 13,
        "token_count": 246,
        "has_context": true
      }
    },
    {
      "index": 6,
      "text": "Handling idempotency\nAt the function level (the consumer)\nExample\nWe'll use the same example of an e-commerce store to demonstrate how this works. We have an event here with no\n```\nid\n```\nset (\n[see above](\\docs\\guides\\handling-idempotency#at-the-event-level-the-producer)\n), but we want to ensure that the\n```\nsend-checkout-email\n```\nfunction is only triggered once for each\n```\ncartId\n```\nto prevent duplicate emails being sent.",
      "char_count": 430,
      "token_count": 113,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_handling-idempotency.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_handling-idempotency.md",
        "file_name": "guides_handling-idempotency.md",
        "file_size": 10612,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "42f10a89ca1f88d38453e6a22dfb8601670c3c5b939778ccebc7a2ba882886c0",
        "author": null,
        "created_at": "2025-10-12T23:59:30.897978",
        "modified_at": "2025-10-12T23:59:30.898680",
        "page_count": null,
        "word_count": 1364,
        "extracted_at": "2025-10-13T20:03:44.440096",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 13,
        "token_count": 113,
        "has_context": true
      }
    },
    {
      "index": 7,
      "text": "Handling idempotency\nAt the function level (the consumer)\nEvent payload\nCopy Copied\n```\n{\n\"name\" : \"cart/checkout.completed\" ,\n\"data\" : {\n\"email\" : \"blake@example.com\" ,\n\"cartId\" : \"s6CIMNqIaxt503I1gVEICfwp\"\n} ,\n\"ts\" : 1703275661157\n}\n```",
      "char_count": 238,
      "token_count": 98,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_handling-idempotency.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_handling-idempotency.md",
        "file_name": "guides_handling-idempotency.md",
        "file_size": 10612,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "42f10a89ca1f88d38453e6a22dfb8601670c3c5b939778ccebc7a2ba882886c0",
        "author": null,
        "created_at": "2025-10-12T23:59:30.897978",
        "modified_at": "2025-10-12T23:59:30.898680",
        "page_count": null,
        "word_count": 1364,
        "extracted_at": "2025-10-13T20:03:44.440096",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 13,
        "token_count": 98,
        "has_context": true
      }
    },
    {
      "index": 8,
      "text": "Handling idempotency\nAt the function level (the consumer)\nFunction definition with idempotency key\nCopy Copied\n```\nexport const sendEmail = inngest .createFunction (\n{\nid : 'send-checkout-email' ,\n// This is the idempotency key\nidempotency : 'event.data.cartId' ,\n// Evaluates to: \"s6CIMNqIaxt503I1gVEICfwp\"\n// for the given event payload\n} ,\n{ trigger : 'cart/checkout.completed' } ,\nasync ({ event , step }) => { /* ... */ }\n})\n```",
      "char_count": 433,
      "token_count": 133,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_handling-idempotency.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_handling-idempotency.md",
        "file_name": "guides_handling-idempotency.md",
        "file_size": 10612,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "42f10a89ca1f88d38453e6a22dfb8601670c3c5b939778ccebc7a2ba882886c0",
        "author": null,
        "created_at": "2025-10-12T23:59:30.897978",
        "modified_at": "2025-10-12T23:59:30.898680",
        "page_count": null,
        "word_count": 1364,
        "extracted_at": "2025-10-13T20:03:44.440096",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 13,
        "token_count": 133,
        "has_context": true
      }
    },
    {
      "index": 9,
      "text": "Handling idempotency\nAt the function level (the consumer)\nWriting CEL expressions\nWhile CEL can do many things, we'll focus on how to use it to generate a unique string key for idempotency. The key things to know are:\n- You can access any of the event payload's data using the `event` variable and dot-notation for nested properties.\n- You can use the `+` operator to concatenate strings together.\nCombining two or more properties together is a good way to ensure the level of uniqueness that you need. Here are couple of examples:\n- **User signup:** You only want to send a welcome email once per user, so you'd set `idempotency` to `event.data.userId` in case there your API sends duplicate events.\n- **Organization team invite:** A user may be part of multiple organizations in your app. You only want to send a team invite email once per user/organization combination, so you'd set `idempotency` to `event.data.userId + \"-\" + event.data.organizationId` .\nFor more information on writing CEL expressions, read\n[our guide](\\docs\\guides\\writing-expressions)\n.\n💡 If you want to control when a function is executed over a period of time you might prefer:\n- [`rateLimit`](\\docs\\reference\\functions\\rate-limit) - Limit the number of function executions per period of time\n- [`debounce`](\\docs\\reference\\functions\\debounce) - Delay function execution for duplicate events over a period of time",
      "char_count": 1389,
      "token_count": 317,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_handling-idempotency.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_handling-idempotency.md",
        "file_name": "guides_handling-idempotency.md",
        "file_size": 10612,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "42f10a89ca1f88d38453e6a22dfb8601670c3c5b939778ccebc7a2ba882886c0",
        "author": null,
        "created_at": "2025-10-12T23:59:30.897978",
        "modified_at": "2025-10-12T23:59:30.898680",
        "page_count": null,
        "word_count": 1364,
        "extracted_at": "2025-10-13T20:03:44.440096",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 13,
        "token_count": 317,
        "has_context": true
      }
    },
    {
      "index": 10,
      "text": "Handling idempotency\nAt the function level (the consumer)\nIdempotency keys and fan-out\nOne reason why you might want to use\n```\nidempotency\n```\nat the function level is if you have an\n```\nevent\n```\nthat fans-out to multiple functions. Let's take the following fan-out example:\nTrack requests, Event trigger = ai/generation.requested. Track requests, How often = Every time. Run generation, Event trigger = ai/generation.requested. Run generation, How often = Once per request\nIn this case, you would want to set\n```\nidempotency\n```\non the \"Run generation\" function to ensure that it runs once, for example, for every unique prompt that is sent. You may want to do this as you don't want to re-run the same exact prompt and waste compute resources/credits. However, you still might want to track the number of requests that each user submitted, so you would not want to set\n```\nidempotency\n```\non the \"Track requests\" function. You can see the code for both functions below.\n**View the function code**\nBoth functions use the same event trigger,\n```\nai/generation.requested\n```\nwhich contains a\n```\npromptHash\n```\nand a\n```\nuserId\n```\nin the event payload.",
      "char_count": 1154,
      "token_count": 286,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_handling-idempotency.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_handling-idempotency.md",
        "file_name": "guides_handling-idempotency.md",
        "file_size": 10612,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "42f10a89ca1f88d38453e6a22dfb8601670c3c5b939778ccebc7a2ba882886c0",
        "author": null,
        "created_at": "2025-10-12T23:59:30.897978",
        "modified_at": "2025-10-12T23:59:30.898680",
        "page_count": null,
        "word_count": 1364,
        "extracted_at": "2025-10-13T20:03:44.440096",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 13,
        "token_count": 286,
        "has_context": true
      }
    },
    {
      "index": 11,
      "text": "Handling idempotency\nAt the function level (the consumer)\nTrack requests function\nCopy Copied\n```\nconst trackRequests = inngest .createFunction (\n{ id : 'track-requests' } ,\n{ event : 'ai/generation.requested' } ,\nasync ({ event , step }) => {\n// Track the request\n}\n)\n```",
      "char_count": 272,
      "token_count": 73,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_handling-idempotency.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_handling-idempotency.md",
        "file_name": "guides_handling-idempotency.md",
        "file_size": 10612,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "42f10a89ca1f88d38453e6a22dfb8601670c3c5b939778ccebc7a2ba882886c0",
        "author": null,
        "created_at": "2025-10-12T23:59:30.897978",
        "modified_at": "2025-10-12T23:59:30.898680",
        "page_count": null,
        "word_count": 1364,
        "extracted_at": "2025-10-13T20:03:44.440096",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 13,
        "token_count": 73,
        "has_context": true
      }
    },
    {
      "index": 12,
      "text": "Handling idempotency\nAt the function level (the consumer)\nRun generation function\nCopy Copied\n```\nconst runGeneration = inngest .createFunction (\n{\nid : 'run-generation' ,\n// Given the event payload sends a hash of the prompt,\n// this will only run once per unique prompt per user\n// every 24 hours:\nidempotency : `event.data.promptHash + \"-\" + event.data.userId`\n} ,\n{ event : 'ai/generation.requested' } ,\nasync ({ event , step }) => {\n// Track the request\n}\n)\n```",
      "char_count": 466,
      "token_count": 121,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_handling-idempotency.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_handling-idempotency.md",
        "file_name": "guides_handling-idempotency.md",
        "file_size": 10612,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "42f10a89ca1f88d38453e6a22dfb8601670c3c5b939778ccebc7a2ba882886c0",
        "author": null,
        "created_at": "2025-10-12T23:59:30.897978",
        "modified_at": "2025-10-12T23:59:30.898680",
        "page_count": null,
        "word_count": 1364,
        "extracted_at": "2025-10-13T20:03:44.440096",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 13,
        "token_count": 121,
        "has_context": true
      }
    }
  ]
}