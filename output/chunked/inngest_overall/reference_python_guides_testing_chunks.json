{
  "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_python_guides_testing.md",
  "title": "#### On this page",
  "num_chunks": 5,
  "total_chars": 4680,
  "chunks": [
    {
      "index": 0,
      "text": "On this page\n- [Testing](\\docs\\reference\\python\\guides\\testing#testing)\n- [Unit testing](\\docs\\reference\\python\\guides\\testing#unit-testing)\n- [Limitations](\\docs\\reference\\python\\guides\\testing#limitations)\n- [Stubbing](\\docs\\reference\\python\\guides\\testing#stubbing)\n- [Integration testing](\\docs\\reference\\python\\guides\\testing#integration-testing)\nReferences\n[Python SDK](\\docs\\reference\\python)\n[Guides](\\docs\\reference\\python\\guides\\testing)",
      "char_count": 447,
      "token_count": 130,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_python_guides_testing.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_python_guides_testing.md",
        "file_name": "reference_python_guides_testing.md",
        "file_size": 4954,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "1b439a331549bb15589c95055fa79cc581442287014c856310798dfac37366ed",
        "author": null,
        "created_at": "2025-10-13T00:00:59.097959",
        "modified_at": "2025-10-13T00:00:59.098697",
        "page_count": null,
        "word_count": 707,
        "extracted_at": "2025-10-13T20:04:41.013995",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 5,
        "token_count": 130,
        "has_context": true
      }
    },
    {
      "index": 1,
      "text": "Testing\nUnit testing\nIf you'd like to unit test without an Inngest server, the\n```\nmocked\n```\n(requires\n```\nv0.4.14+\n```\n)  library can simulate much of the Inngest server's behavior.\nThe\n```\nmocked\n```\nlibrary is experimental. It may have interface and behavioral changes that don't follow semantic versioning.\nLet's say you've defined this function somewhere in your app:\nCopy Copied\n```\nimport inngest\n\ndef create_message ( name : object ) -> str :\nreturn f \"Hello, { name } !\"\n\nclient = inngest . Inngest (app_id = \"my-app\" )\n\n@client . create_function (\nfn_id = \"greet\" ,\ntrigger = inngest. TriggerEvent (event = \"user.login\" ),\n)\nasync def greet ( ctx : inngest . Context) -> str :\nmessage = await ctx . step . run (\n\"create-message\" ,\ncreate_message,\nctx.event.data[ \"name\" ],\n)\n\nreturn message\n```\nYou can unit test it like this:\nCopy Copied\n```\nimport unittest\nimport inngest\nfrom inngest . experimental import mocked\nfrom . functions import greet\n\n# Mocked Inngest client. The app_id can be any string (it's currently unused)\nclient_mock = mocked . Inngest (app_id = \"test\" )\n\n# A normal Python test class\nclass TestGreet ( unittest . TestCase ):\ndef test_greet ( self ) -> None :\n# Trigger the function with an in-memory, simulated Inngest server\nres = mocked . trigger (\ngreet,\ninngest. Event (name = \"user.login\" , data = { \"name\" : \"Alice\" }),\nclient_mock,\n)\n\n# Assert that it ran as expected\nassert res . status is mocked . Status . COMPLETED\nassert res . output == \"Hello, Alice!\"\n```",
      "char_count": 1500,
      "token_count": 409,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_python_guides_testing.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_python_guides_testing.md",
        "file_name": "reference_python_guides_testing.md",
        "file_size": 4954,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "1b439a331549bb15589c95055fa79cc581442287014c856310798dfac37366ed",
        "author": null,
        "created_at": "2025-10-13T00:00:59.097959",
        "modified_at": "2025-10-13T00:00:59.098697",
        "page_count": null,
        "word_count": 707,
        "extracted_at": "2025-10-13T20:04:41.013995",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 5,
        "token_count": 409,
        "has_context": true
      }
    },
    {
      "index": 2,
      "text": "Testing\nUnit testing\nLimitations\nThe\n```\nmocked\n```\nlibrary has some notable limitations:\n- `ctx.step.invoke` and `ctx.step.wait_for_event` must be stubbed using the `step_stubs` parameter of `mocked.trigger` .\n- `step.send_event` does not send events. It returns a stubbed value.\n- `step.sleep` and `step.sleep_until` always sleep for 0 seconds.",
      "char_count": 346,
      "token_count": 92,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_python_guides_testing.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_python_guides_testing.md",
        "file_name": "reference_python_guides_testing.md",
        "file_size": 4954,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "1b439a331549bb15589c95055fa79cc581442287014c856310798dfac37366ed",
        "author": null,
        "created_at": "2025-10-13T00:00:59.097959",
        "modified_at": "2025-10-13T00:00:59.098697",
        "page_count": null,
        "word_count": 707,
        "extracted_at": "2025-10-13T20:04:41.013995",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 5,
        "token_count": 92,
        "has_context": true
      }
    },
    {
      "index": 3,
      "text": "Testing\nUnit testing\nStubbing\nStubbing is required for\n```\nctx.step.invoke\n```\nand\n```\nctx.step.wait_for_event\n```\n. Here's an example of how to stub these functions:\nCopy Copied\n```\n# Real production function\n@client . create_function (\nfn_id = \"signup\" ,\ntrigger = inngest. TriggerEvent (event = \"user.signup\" ),\n)\ndef signup ( ctx : inngest . ContextSync) -> bool :\nemail_id = ctx . step . invoke (\n\"send-email\" ,\nfunction = send_email,\n)\n\nevent = ctx . step . wait_for_event (\n\"wait-for-reply\" ,\nevent = \"email.reply\" ,\nif_exp = f \"async.data.email_id == ' { email_id } '\" ,\ntimeout = datetime. timedelta (days = 1 ),\n)\nuser_replied = event is not None\nreturn user_replied\n\n# Mocked Inngest client\nclient_mock = mocked . Inngest (app_id = \"test\" )\n\nclass TestSignup ( unittest . TestCase ):\ndef test_signup ( self ) -> None :\nres = mocked . trigger (\nfn,\ninngest. Event (name = \"test\" ),\nclient_mock,\n\n# Stub the invoke and wait_for_event steps. The keys are the step\n# IDs\nstep_stubs = {\n\"send-email\" : \"email-id-abc123\" ,\n\"wait-for-reply\" : inngest. Event (\ndata = { \"text\" : \"Sounds good!\" }, name = \"email.reply\"\n),\n},\n)\nassert res . status is mocked . Status . COMPLETED\nassert res . output is True\n```\nTo simulate a\n```\nctx.step.wait_for_event\n```\ntimeout, stub the step with\n```\nmocked.Timeout\n```\n.",
      "char_count": 1310,
      "token_count": 375,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_python_guides_testing.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_python_guides_testing.md",
        "file_name": "reference_python_guides_testing.md",
        "file_size": 4954,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "1b439a331549bb15589c95055fa79cc581442287014c856310798dfac37366ed",
        "author": null,
        "created_at": "2025-10-13T00:00:59.097959",
        "modified_at": "2025-10-13T00:00:59.098697",
        "page_count": null,
        "word_count": 707,
        "extracted_at": "2025-10-13T20:04:41.013995",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 5,
        "token_count": 375,
        "has_context": true
      }
    },
    {
      "index": 4,
      "text": "Testing\nIntegration testing\nIf you'd like to start and stop a real Dev Server with your integration tests, the\n```\ndev_server\n```\n(requires\n```\nv0.4.15+\n```\n) library can help. It requires\n```\nnpm\n```\nto be installed on your machine.\nThe\n```\ndev_server\n```\nlibrary is experimental. It may have interface and behavioral changes that don't follow semantic versioning.\nYou can use the library in your\n```\nconftest.py\n```\n:\nCopy Copied\n```\nimport pytest\nfrom inngest . experimental import dev_server\n\ndef pytest_configure ( config : pytest . Config) -> None :\ndev_server . server . start ()\n\ndef pytest_unconfigure ( config : pytest . Config) -> None :\ndev_server . server . stop ()\n```\nThis Dev Server will not automatically discover your app. You'll need to manually sync by sending a\n```\nPUT\n```\nrequest to your app's Inngest endpoint (\n```\n/api/inngest\n```\nby default).\nSince Pytest automatically discovers and runs\n```\nconftest.py\n```\nfiles, simply running your\n```\npytest\n```\ncommand will start the Dev Server before running tests and stop the Dev Server after running tests.",
      "char_count": 1077,
      "token_count": 270,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_python_guides_testing.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_python_guides_testing.md",
        "file_name": "reference_python_guides_testing.md",
        "file_size": 4954,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "1b439a331549bb15589c95055fa79cc581442287014c856310798dfac37366ed",
        "author": null,
        "created_at": "2025-10-13T00:00:59.097959",
        "modified_at": "2025-10-13T00:00:59.098697",
        "page_count": null,
        "word_count": 707,
        "extracted_at": "2025-10-13T20:04:41.013995",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 5,
        "token_count": 270,
        "has_context": true
      }
    }
  ]
}