{
  "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_working-with-loops.md",
  "title": "#### On this page",
  "num_chunks": 9,
  "total_chars": 6807,
  "chunks": [
    {
      "index": 0,
      "text": "On this page\n- [Working with Loops in Inngest](\\docs\\guides\\working-with-loops#working-with-loops-in-inngest)\n- [Simple function example](\\docs\\guides\\working-with-loops#simple-function-example)\n- [Loop example](\\docs\\guides\\working-with-loops#loop-example)\n- [Best practices: implementing loops in Inngest](\\docs\\guides\\working-with-loops#best-practices-implementing-loops-in-inngest)\n- [1. Treat each loop iterations as a single step](\\docs\\guides\\working-with-loops#1-treat-each-loop-iterations-as-a-single-step)\n- [2. Place non-deterministic logic inside steps](\\docs\\guides\\working-with-loops#2-place-non-deterministic-logic-inside-steps)\n- [3. Use sleep effectively](\\docs\\guides\\working-with-loops#3-use-sleep-effectively)\n- [Next steps](\\docs\\guides\\working-with-loops#next-steps)\nFeatures\n[Inngest Functions](\\docs\\features\\inngest-functions)\n[Steps & Workflows](\\docs\\features\\inngest-functions\\steps-workflows)",
      "char_count": 921,
      "token_count": 269,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_working-with-loops.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_working-with-loops.md",
        "file_name": "guides_working-with-loops.md",
        "file_size": 7102,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "52b49cde009056fd01b06538541a3616645a4b72b96ba3573b859fee0caeffe3",
        "author": null,
        "created_at": "2025-10-12T23:59:54.640876",
        "modified_at": "2025-10-12T23:59:54.640876",
        "page_count": null,
        "word_count": 980,
        "extracted_at": "2025-10-13T20:04:00.415552",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 9,
        "token_count": 269,
        "has_context": true
      }
    },
    {
      "index": 1,
      "text": "Working with Loops in Inngest\nIn Inngest each step in your function is executed as a separate HTTP request.  This means that for every step in your function, the function is re-entered, starting from the beginning, up to the point where the next step is executed. This\n[execution model](\\docs\\learn\\how-functions-are-executed)\nhelps in managing retries, timeouts, and ensures robustness in distributed systems.\nThis page covers how to implement loops in your Inngest functions and avoid common pitfalls.",
      "char_count": 503,
      "token_count": 112,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_working-with-loops.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_working-with-loops.md",
        "file_name": "guides_working-with-loops.md",
        "file_size": 7102,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "52b49cde009056fd01b06538541a3616645a4b72b96ba3573b859fee0caeffe3",
        "author": null,
        "created_at": "2025-10-12T23:59:54.640876",
        "modified_at": "2025-10-12T23:59:54.640876",
        "page_count": null,
        "word_count": 980,
        "extracted_at": "2025-10-13T20:04:00.415552",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 9,
        "token_count": 112,
        "has_context": true
      }
    },
    {
      "index": 2,
      "text": "Working with Loops in Inngest\nSimple function example\nTypeScript Go Python\nLet's start with a simple example to illustrate the concept:\nCopy Copied\n```\ninngest .createFunction (\n{ id : \"simple-function\" } ,\n{ event : \"test/simple.function\" } ,\nasync ({ step }) => {\nconsole .log ( \"hello\" );\n\nawait step .run ( \"a\" , async () => { console .log ( \"a\" ) });\nawait step .run ( \"b\" , async () => { console .log ( \"b\" ) });\nawait step .run ( \"c\" , async () => { console .log ( \"c\" ) });\n}\n);\n```\nIn the above example, you will see \"hello\" printed four times, once for the initial function entry and once for each step execution (\n```\na\n```\n,\n```\nb\n```\n, and\n```\nc\n```\n).\n✅ How Inngest executes the code ❌ Common incorrect misconception\nCopy Copied\n```\n# This is how Inngest executes the code above:\n\n< run start >\n\"hello\"\n\n\"hello\"\n\"a\"\n\n\"hello\"\n\"b\"\n\n\"hello\"\n\"c\"\n< run complete >\n```\nAny non-deterministic logic (like database calls or API calls) must be placed inside a\n```\nstep.run\n```\ncall to ensure it is executed correctly within each step.\nWith this in mind, here is how the previous example can be fixed:\nCopy Copied\n```\ninngest .createFunction (\n{ id : \"simple-function\" } ,\n{ event : \"test/simple.function\" } ,\nasync ({ step }) => {\nawait step .run ( \"hello\" , () => { console .log ( \"hello\" ) });\n\nawait step .run ( \"a\" , async () => { console .log ( \"a\" ) });\nawait step .run ( \"b\" , async () => { console .log ( \"b\" ) });\nawait step .run ( \"c\" , async () => { console .log ( \"c\" ) });\n}\n);\n\n// hello\n// a\n// b\n// c\n```\nNow, \"hello\" is printed only once, as expected.",
      "char_count": 1571,
      "token_count": 465,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_working-with-loops.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_working-with-loops.md",
        "file_name": "guides_working-with-loops.md",
        "file_size": 7102,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "52b49cde009056fd01b06538541a3616645a4b72b96ba3573b859fee0caeffe3",
        "author": null,
        "created_at": "2025-10-12T23:59:54.640876",
        "modified_at": "2025-10-12T23:59:54.640876",
        "page_count": null,
        "word_count": 980,
        "extracted_at": "2025-10-13T20:04:00.415552",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 9,
        "token_count": 465,
        "has_context": true
      }
    },
    {
      "index": 3,
      "text": "Working with Loops in Inngest\nLoop example\nTypeScript Go Python\nHere's\n[an example](\\blog\\import-ecommerce-api-data-in-seconds)\nof an Inngest function that imports all products from a Shopify store into a local system. This function iterates over all pages combining all products into a single array.\nCopy Copied\n```\nexport default inngest .createFunction (\n{ id : \"shopify-product-import\" } ,\n{ event : \"shopify/import.requested\" } ,\nasync ({ event , step }) => {\nconst allProducts = []\nlet cursor = null\nlet hasMore = true\n\n// Use the event's \"data\" to pass key info like IDs\n// Note: in this example is deterministic across multiple requests\n// If the returned results must stay in the same order, wrap the db call in step.run()\nconst session = await database .getShopifySession ( event . data .storeId)\n\nwhile (hasMore) {\nconst page = await step .run ( `fetch-products- ${ pageNumber } ` , async () => {\nreturn await shopify . rest . Product .all ({\nsession ,\nsince_id : cursor ,\n})\n})\n// Combine all of the data into a single list\nallProducts .push ( ... page .products)\nif ( page . products . length === 50 ) {\ncursor = page .products[ 49 ].id\n} else {\nhasMore = false\n}\n}\n\n// Now we have the entire list of products within allProducts!\n}\n)\n```\nIn the example above, each iteration of the loop is managed using\n```\nstep.run()\n```\n, ensuring that\n**all non-deterministic logic (like fetching products from Shopify) is encapsulated within a step**\n. This approach guarantees that if the request fails, it will be retried automatically, in the correct order. This structure aligns with Inngest's execution model, where each step is a separate HTTP request, ensuring robust and consistent loop behavior.\nNote that in the example above\n```\ngetShopifySession\n```\nis deterministic across multiple requests (and it's added to all API calls for authorization). If the returned results must stay in the same order, wrap the database call in\n```\nstep.run()\n```\n.\nRead more about this use case in the\n[blog post](\\blog\\import-ecommerce-api-data-in-seconds)\n.",
      "char_count": 2052,
      "token_count": 498,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_working-with-loops.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_working-with-loops.md",
        "file_name": "guides_working-with-loops.md",
        "file_size": 7102,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "52b49cde009056fd01b06538541a3616645a4b72b96ba3573b859fee0caeffe3",
        "author": null,
        "created_at": "2025-10-12T23:59:54.640876",
        "modified_at": "2025-10-12T23:59:54.640876",
        "page_count": null,
        "word_count": 980,
        "extracted_at": "2025-10-13T20:04:00.415552",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 9,
        "token_count": 498,
        "has_context": true
      }
    },
    {
      "index": 4,
      "text": "Working with Loops in Inngest\nBest practices: implementing loops in Inngest\nTo ensure your loops run correctly within\n[Inngest's execution model](\\docs\\learn\\how-functions-are-executed)\n:",
      "char_count": 187,
      "token_count": 48,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_working-with-loops.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_working-with-loops.md",
        "file_name": "guides_working-with-loops.md",
        "file_size": 7102,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "52b49cde009056fd01b06538541a3616645a4b72b96ba3573b859fee0caeffe3",
        "author": null,
        "created_at": "2025-10-12T23:59:54.640876",
        "modified_at": "2025-10-12T23:59:54.640876",
        "page_count": null,
        "word_count": 980,
        "extracted_at": "2025-10-13T20:04:00.415552",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 9,
        "token_count": 48,
        "has_context": true
      }
    },
    {
      "index": 5,
      "text": "Working with Loops in Inngest\nBest practices: implementing loops in Inngest\n1. Treat each loop iterations as a single step\nIn a typical programming environment, loops maintain their state across iterations. In Inngest, each step re-executes the function from the beginning to ensure that only the failed steps will be re-tried. To handle this, treat each loop iteration as a separate step. This way, the loop progresses correctly, and each iteration builds on the previous one.",
      "char_count": 477,
      "token_count": 101,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_working-with-loops.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_working-with-loops.md",
        "file_name": "guides_working-with-loops.md",
        "file_size": 7102,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "52b49cde009056fd01b06538541a3616645a4b72b96ba3573b859fee0caeffe3",
        "author": null,
        "created_at": "2025-10-12T23:59:54.640876",
        "modified_at": "2025-10-12T23:59:54.640876",
        "page_count": null,
        "word_count": 980,
        "extracted_at": "2025-10-13T20:04:00.415552",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 9,
        "token_count": 101,
        "has_context": true
      }
    },
    {
      "index": 6,
      "text": "Working with Loops in Inngest\nBest practices: implementing loops in Inngest\n2. Place non-deterministic logic inside steps\nPlace non-deterministic logic (like API calls, database queries, or random number generation) inside\n```\nstep.run\n```\ncalls. This ensures that such operations are executed correctly and consistently within each step, preventing repeated execution with each function re-entry.",
      "char_count": 397,
      "token_count": 83,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_working-with-loops.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_working-with-loops.md",
        "file_name": "guides_working-with-loops.md",
        "file_size": 7102,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "52b49cde009056fd01b06538541a3616645a4b72b96ba3573b859fee0caeffe3",
        "author": null,
        "created_at": "2025-10-12T23:59:54.640876",
        "modified_at": "2025-10-12T23:59:54.640876",
        "page_count": null,
        "word_count": 980,
        "extracted_at": "2025-10-13T20:04:00.415552",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 9,
        "token_count": 83,
        "has_context": true
      }
    },
    {
      "index": 7,
      "text": "Working with Loops in Inngest\nBest practices: implementing loops in Inngest\n3. Use sleep effectively\nWhen using\n```\nstep.sleep\n```\ninside a loop, ensure it is combined with structuring the loop to handle each iteration as a separate step. This prevents the function from appearing to restart and allows for controlled timing between iterations.",
      "char_count": 344,
      "token_count": 73,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_working-with-loops.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_working-with-loops.md",
        "file_name": "guides_working-with-loops.md",
        "file_size": 7102,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "52b49cde009056fd01b06538541a3616645a4b72b96ba3573b859fee0caeffe3",
        "author": null,
        "created_at": "2025-10-12T23:59:54.640876",
        "modified_at": "2025-10-12T23:59:54.640876",
        "page_count": null,
        "word_count": 980,
        "extracted_at": "2025-10-13T20:04:00.415552",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 9,
        "token_count": 73,
        "has_context": true
      }
    },
    {
      "index": 8,
      "text": "Working with Loops in Inngest\nNext steps\n- Docs explanation: [Inngest execution model](\\docs\\learn\\how-functions-are-executed) .\n- Docs guide: [multi-step functions](\\docs\\guides\\multi-step-functions) .\n- Blog post: [\"How to import 1000s of items from any E-commerce API in seconds with serverless functions\"](\\blog\\import-ecommerce-api-data-in-seconds) .",
      "char_count": 355,
      "token_count": 98,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_working-with-loops.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_working-with-loops.md",
        "file_name": "guides_working-with-loops.md",
        "file_size": 7102,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "52b49cde009056fd01b06538541a3616645a4b72b96ba3573b859fee0caeffe3",
        "author": null,
        "created_at": "2025-10-12T23:59:54.640876",
        "modified_at": "2025-10-12T23:59:54.640876",
        "page_count": null,
        "word_count": 980,
        "extracted_at": "2025-10-13T20:04:00.415552",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 9,
        "token_count": 98,
        "has_context": true
      }
    }
  ]
}