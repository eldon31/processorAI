{
  "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_steps-workflows_fetch.md",
  "title": "#### On this page",
  "num_chunks": 11,
  "total_chars": 7720,
  "chunks": [
    {
      "index": 0,
      "text": "On this page\n- [Fetch: performing API requests or fetching data](\\docs\\features\\inngest-functions\\steps-workflows\\fetch#fetch-performing-api-requests-or-fetching-data)\n- [Using step.fetch()](\\docs\\features\\inngest-functions\\steps-workflows\\fetch#using-step-fetch)\n- [step.fetch() observability](\\docs\\features\\inngest-functions\\steps-workflows\\fetch#step-fetch-observability)\n- [Using the fetch() utility](\\docs\\features\\inngest-functions\\steps-workflows\\fetch#using-the-fetch-utility)\n- [Within steps](\\docs\\features\\inngest-functions\\steps-workflows\\fetch#within-steps)\n- [Fallbacks](\\docs\\features\\inngest-functions\\steps-workflows\\fetch#fallbacks)\n- [How it works](\\docs\\features\\inngest-functions\\steps-workflows\\fetch#how-it-works)\nFeatures\n[Inngest Functions](\\docs\\features\\inngest-functions)\n[Steps & Workflows](\\docs\\features\\inngest-functions\\steps-workflows)",
      "char_count": 870,
      "token_count": 243,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_steps-workflows_fetch.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_steps-workflows_fetch.md",
        "file_name": "features_inngest-functions_steps-workflows_fetch.md",
        "file_size": 7678,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "877186c5d2512f458b49746ccd30fe85e41a75781564debd59a1b2ce915c0603",
        "author": null,
        "created_at": "2025-10-12T23:58:53.574111",
        "modified_at": "2025-10-12T23:58:53.574111",
        "page_count": null,
        "word_count": 1037,
        "extracted_at": "2025-10-13T20:03:24.012132",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 11,
        "token_count": 243,
        "has_context": true
      }
    },
    {
      "index": 1,
      "text": "Fetch: performing API requests or fetching data TypeScript only\nThe Inngest TypeScript SDK provides a\n```\nstep.fetch()\n```\nAPI and a\n```\nfetch()\n```\nutility, enabling you to make requests to third-party APIs or fetch data in a durable way by offloading them to the Inngest Platform:\n- `step.fetch()` is a shorthand for making HTTP requests from within an Inngest function, and it also makes it easier to start parallel HTTP requests.\n- The `fetch()` utility can be passed to packages that accept a custom `fetch` implementation, such as `axios` .\nUsing Fetch offloads the HTTP request to the Inngest Platform",
      "char_count": 608,
      "token_count": 137,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_steps-workflows_fetch.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_steps-workflows_fetch.md",
        "file_name": "features_inngest-functions_steps-workflows_fetch.md",
        "file_size": 7678,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "877186c5d2512f458b49746ccd30fe85e41a75781564debd59a1b2ce915c0603",
        "author": null,
        "created_at": "2025-10-12T23:58:53.574111",
        "modified_at": "2025-10-12T23:58:53.574111",
        "page_count": null,
        "word_count": 1037,
        "extracted_at": "2025-10-13T20:03:24.012132",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 11,
        "token_count": 137,
        "has_context": true
      }
    },
    {
      "index": 2,
      "text": "Fetch: performing API requests or fetching data TypeScript only\nUsing step.fetch()\nYou can use\n```\nstep.fetch()\n```\nto make HTTP requests within an Inngest function.\n```\nstep.fetch()\n```\noffloads the HTTP request to the Inngest Platform, so your service does not need to be active and waiting for the response.",
      "char_count": 310,
      "token_count": 71,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_steps-workflows_fetch.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_steps-workflows_fetch.md",
        "file_name": "features_inngest-functions_steps-workflows_fetch.md",
        "file_size": 7678,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "877186c5d2512f458b49746ccd30fe85e41a75781564debd59a1b2ce915c0603",
        "author": null,
        "created_at": "2025-10-12T23:58:53.574111",
        "modified_at": "2025-10-12T23:58:53.574111",
        "page_count": null,
        "word_count": 1037,
        "extracted_at": "2025-10-13T20:03:24.012132",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 11,
        "token_count": 71,
        "has_context": true
      }
    },
    {
      "index": 3,
      "text": "Fetch: performing API requests or fetching data TypeScript only\nUsing step.fetch()\nsrc/inngest/functions.ts\nCopy Copied\n```\nimport { inngest } from \"./client\" ;\n\nexport const retrieveTextFile = inngest .createFunction (\n{ id : \"retrieveTextFile\" } ,\n{ event : \"textFile/retrieve\" } ,\nasync ({ step }) => {\n// The fetching of the text file is offloaded to the Inngest Platform\nconst response = await step .fetch (\n\"https://example-files.online-convert.com/document/txt/example.txt\"\n);\n\n// The Inngest function run is resumed when the HTTP request is complete\nawait step .run ( \"extract-text\" , async () => {\nconst text = await response .text ();\nconst exampleOccurences = text .match ( /example/ g );\nreturn exampleOccurences ?. length ;\n});\n}\n);\n```",
      "char_count": 749,
      "token_count": 184,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_steps-workflows_fetch.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_steps-workflows_fetch.md",
        "file_name": "features_inngest-functions_steps-workflows_fetch.md",
        "file_size": 7678,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "877186c5d2512f458b49746ccd30fe85e41a75781564debd59a1b2ce915c0603",
        "author": null,
        "created_at": "2025-10-12T23:58:53.574111",
        "modified_at": "2025-10-12T23:58:53.574111",
        "page_count": null,
        "word_count": 1037,
        "extracted_at": "2025-10-13T20:03:24.012132",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 11,
        "token_count": 184,
        "has_context": true
      }
    },
    {
      "index": 4,
      "text": "Fetch: performing API requests or fetching data TypeScript only\nstep.fetch() example\n[See the complete step.fetch() example including the source code and other use cases.](\\docs\\examples\\fetch)\n```\nstep.fetch()\n```\nis useful:\n- In serverless environments, to offload long-running HTTP requests that might trigger timeouts.\n- As a shorthand for making HTTP requests within an Inngest function, making it easier to start parallel HTTP requests using `Promise.all()` .\n- As a best practice to ensure that all HTTP requests are durable and can be inspected in the Inngest Platform or Dev Server.",
      "char_count": 591,
      "token_count": 125,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_steps-workflows_fetch.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_steps-workflows_fetch.md",
        "file_name": "features_inngest-functions_steps-workflows_fetch.md",
        "file_size": 7678,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "877186c5d2512f458b49746ccd30fe85e41a75781564debd59a1b2ce915c0603",
        "author": null,
        "created_at": "2025-10-12T23:58:53.574111",
        "modified_at": "2025-10-12T23:58:53.574111",
        "page_count": null,
        "word_count": 1037,
        "extracted_at": "2025-10-13T20:03:24.012132",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 11,
        "token_count": 125,
        "has_context": true
      }
    },
    {
      "index": 5,
      "text": "Fetch: performing API requests or fetching data TypeScript only\nstep.fetch() example\nstep.fetch() observability\nAll\n```\nstep.fetch()\n```\ncalls are visible in your\n[Inngest Traces](\\docs\\platform\\monitor\\observability-metrics)\n, allowing you to monitor and debug your HTTP requests:\nInngest Traces showing a step.fetch() call",
      "char_count": 324,
      "token_count": 78,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_steps-workflows_fetch.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_steps-workflows_fetch.md",
        "file_name": "features_inngest-functions_steps-workflows_fetch.md",
        "file_size": 7678,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "877186c5d2512f458b49746ccd30fe85e41a75781564debd59a1b2ce915c0603",
        "author": null,
        "created_at": "2025-10-12T23:58:53.574111",
        "modified_at": "2025-10-12T23:58:53.574111",
        "page_count": null,
        "word_count": 1037,
        "extracted_at": "2025-10-13T20:03:24.012132",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 11,
        "token_count": 78,
        "has_context": true
      }
    },
    {
      "index": 6,
      "text": "Fetch: performing API requests or fetching data TypeScript only\nUsing the fetch() utility\nA Fetch API-compatible function is exported, allowing you to make any HTTP requests durable if they're called within an Inngest function.\nFor example, a\n```\nMyProductApi\n```\nclass that relies on axios can take a\n```\nfetch\n```\nparameter:",
      "char_count": 326,
      "token_count": 74,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_steps-workflows_fetch.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_steps-workflows_fetch.md",
        "file_name": "features_inngest-functions_steps-workflows_fetch.md",
        "file_size": 7678,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "877186c5d2512f458b49746ccd30fe85e41a75781564debd59a1b2ce915c0603",
        "author": null,
        "created_at": "2025-10-12T23:58:53.574111",
        "modified_at": "2025-10-12T23:58:53.574111",
        "page_count": null,
        "word_count": 1037,
        "extracted_at": "2025-10-13T20:03:24.012132",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 11,
        "token_count": 74,
        "has_context": true
      }
    },
    {
      "index": 7,
      "text": "Fetch: performing API requests or fetching data TypeScript only\nUsing the fetch() utility\nTypeScript\nCopy Copied\n```\nimport { fetch } from \"inngest\" ;\n\nconst api = new MyProductApi ({ fetch });\n\n// A call outside an Inngest function will fall back to the global fetch\nawait api .getProduct ( 1 );\n\n// A call from inside an Inngest function will be made durable and offloaded to the Inngest Platform\ninngest .createFunction (\n{ id : \"my-fn\" } ,\n{ event : \"product/activated\" } ,\nasync () => {\nawait api .getProduct ( 1 );\n} ,\n);\n```\n⚠️\n```\nfetch()\n```\nand\n```\nstep.run()\n```\nInngest's\n```\nfetch()\n```\ncalls should not be performed inside of\n```\nstep.run()\n```\nblocks.\nDoing so will result in\n```\nfetch()\n```\nto fallback to the global\n```\nfetch\n```\nimplementation.\nWhy? The\n```\nfetch()\n```\nutility transforms the\n```\nfetch\n```\ncalls into\n```\nstep.run()\n```\ncalls,\n[which cannot be nested](\\docs\\sdk\\eslint#inngest-no-nested-steps)\n.",
      "char_count": 930,
      "token_count": 269,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_steps-workflows_fetch.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_steps-workflows_fetch.md",
        "file_name": "features_inngest-functions_steps-workflows_fetch.md",
        "file_size": 7678,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "877186c5d2512f458b49746ccd30fe85e41a75781564debd59a1b2ce915c0603",
        "author": null,
        "created_at": "2025-10-12T23:58:53.574111",
        "modified_at": "2025-10-12T23:58:53.574111",
        "page_count": null,
        "word_count": 1037,
        "extracted_at": "2025-10-13T20:03:24.012132",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 11,
        "token_count": 269,
        "has_context": true
      }
    },
    {
      "index": 8,
      "text": "Fetch: performing API requests or fetching data TypeScript only\nUsing the fetch() utility\nWithin steps\nBy default, using Inngest's\n```\nfetch\n```\nretains all the functionality of requests made outside of an endpoint, but ensures that those made from inside are durable.\nCopy Copied\n```\nimport { fetch as inngestFetch } from 'inngest' ;\nimport { generateText } from 'ai' ;\nimport { createAnthropic } from '@ai-sdk/anthropic' ;\n\n// The AI SDK's createAnthropic objects can be passed a custom fetch implementation\nconst anthropic = createAnthropic ({\nfetch : inngestFetch ,\n});\n\n// NOTE - Using this fetch outside of an Inngest function will fall back to the global fetch\nconst response = await generateText ({\nmodel : anthropic ( 'claude-3-5-sonnet-20240620' ) ,\nprompt : 'Hello, world!' ,\n});\n\n// A call from inside an Inngest function will be made durable\ninngest .createFunction (\n{ id : \"generate-summary\" } ,\n{ event : \"post.created\" } ,\nasync ({ event }) => {\n// This will use step.fetch automatically!\nconst response = await generateText ({\nmodel : anthropic ( 'claude-3-5-sonnet-20240620' ) ,\nprompt : `Summarize the following post: ${ event . data .content } ` ,\n});\n} ,\n);\n```\nHowever, the same\n```\nfetch\n```\nis also exported as\n```\nstep.fetch\n```\n, allowing you to create your APIs isolated within the function instead:\nCopy Copied\n```\ninngest .createFunction (\n{ id : \"generate-summary\" } ,\n{ event : \"post.created\" } ,\nasync ({ step }) => {\nconst anthropic = createAnthropic ({\nfetch : step .fetch ,\n});\n\nconst response = await generateText ({\nmodel : anthropic ( 'claude-3-5-sonnet-20240620' ) ,\nprompt : `Summarize the following post: ${ event . data .content } ` ,\n});\n} ,\n);\n```",
      "char_count": 1692,
      "token_count": 461,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_steps-workflows_fetch.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_steps-workflows_fetch.md",
        "file_name": "features_inngest-functions_steps-workflows_fetch.md",
        "file_size": 7678,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "877186c5d2512f458b49746ccd30fe85e41a75781564debd59a1b2ce915c0603",
        "author": null,
        "created_at": "2025-10-12T23:58:53.574111",
        "modified_at": "2025-10-12T23:58:53.574111",
        "page_count": null,
        "word_count": 1037,
        "extracted_at": "2025-10-13T20:03:24.012132",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 11,
        "token_count": 461,
        "has_context": true
      }
    },
    {
      "index": 9,
      "text": "Fetch: performing API requests or fetching data TypeScript only\nUsing the fetch() utility\nFallbacks\nBy default, it will gracefully fall back to the global\n```\nfetch\n```\nif called outside of an Inngest function, though you can also set a custom fallback using the\n```\nconfig\n```\nmethod:\nCopy Copied\n```\nimport { fetch } from \"inngest\" ;\n\nconst api = new MyProductApi ({\nfetch : fetch .config ({ fallback : myCustomFetch }) ,\n});\n```\nYou can also disable the fallback entirely:\nCopy Copied\n```\nimport { fetch } from \"inngest\" ;\n\nconst api = new MyProductApi ({\nfetch : fetch .config ({ fallback : undefined }) ,\n});\n```",
      "char_count": 617,
      "token_count": 154,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_steps-workflows_fetch.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_steps-workflows_fetch.md",
        "file_name": "features_inngest-functions_steps-workflows_fetch.md",
        "file_size": 7678,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "877186c5d2512f458b49746ccd30fe85e41a75781564debd59a1b2ce915c0603",
        "author": null,
        "created_at": "2025-10-12T23:58:53.574111",
        "modified_at": "2025-10-12T23:58:53.574111",
        "page_count": null,
        "word_count": 1037,
        "extracted_at": "2025-10-13T20:03:24.012132",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 11,
        "token_count": 154,
        "has_context": true
      }
    },
    {
      "index": 10,
      "text": "Fetch: performing API requests or fetching data TypeScript only\nUsing the fetch() utility\nHow it works\nInngest's\n```\nfetch\n```\nfunction uses some of the basic building blocks of Inngest to allow seamless creation of optionally durable code. When it's called, it will:\n- Check the context in which it's running\n- If not in an Inngest function, optionally use the fallback; otherwise,\n- Report the request to Inngest\n- Inngest makes the request\n- Inngest continues the function with the `Response` received from your request\nCritically, this means that your service does not have to be active for the duration of the call; we'll continue your function when we have a result, while also keeping it durable!",
      "char_count": 703,
      "token_count": 160,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_steps-workflows_fetch.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_steps-workflows_fetch.md",
        "file_name": "features_inngest-functions_steps-workflows_fetch.md",
        "file_size": 7678,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "877186c5d2512f458b49746ccd30fe85e41a75781564debd59a1b2ce915c0603",
        "author": null,
        "created_at": "2025-10-12T23:58:53.574111",
        "modified_at": "2025-10-12T23:58:53.574111",
        "page_count": null,
        "word_count": 1037,
        "extracted_at": "2025-10-13T20:03:24.012132",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 11,
        "token_count": 160,
        "has_context": true
      }
    }
  ]
}