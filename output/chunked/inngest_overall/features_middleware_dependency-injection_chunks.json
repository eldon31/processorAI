{
  "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_middleware_dependency-injection.md",
  "title": "#### On this page",
  "num_chunks": 4,
  "total_chars": 3275,
  "chunks": [
    {
      "index": 0,
      "text": "On this page\n- [Using Middleware for Dependency Injection](\\docs\\features\\middleware\\dependency-injection#using-middleware-for-dependency-injection)\n- [Advanced mutation](\\docs\\features\\middleware\\dependency-injection#advanced-mutation)\n- [Ordering middleware and types](\\docs\\features\\middleware\\dependency-injection#ordering-middleware-and-types)\n- [Advanced mutation](\\docs\\features\\middleware\\dependency-injection#advanced-mutation-2)\n- [Ordering middleware and types](\\docs\\features\\middleware\\dependency-injection#ordering-middleware-and-types-2)\nFeatures\n[Middleware](\\docs\\features\\middleware)",
      "char_count": 601,
      "token_count": 138,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_middleware_dependency-injection.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_middleware_dependency-injection.md",
        "file_name": "features_middleware_dependency-injection.md",
        "file_size": 3437,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "b99b7262f8203ddcc3b9d8d1cf5f6f18a61d290d8b9c4aa9888253bba6b34ec5",
        "author": null,
        "created_at": "2025-10-12T23:59:00.471402",
        "modified_at": "2025-10-12T23:59:00.471905",
        "page_count": null,
        "word_count": 435,
        "extracted_at": "2025-10-13T20:03:26.780597",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 4,
        "token_count": 138,
        "has_context": true
      }
    },
    {
      "index": 1,
      "text": "Using Middleware for Dependency Injection\nInngest Functions running in the same application often need to share common clients instances such as database clients or third-party\nlibraries.\nThe following is an example of adding a OpenAI client to all Inngest functions, allowing them immediate access without needing to create the client themselves.\nTypeScript (v 3.34.0+) TypeScript (v 2.0.0+) Python (v 0.3.0+)\nWe can use the\n```\ndependencyInjectionMiddleware\n```\nto add arguments to a\nfunction's input.\nCheck out the\n[TypeScript example](\\docs\\features\\middleware\\dependency-injection?guide=typescript)\nfor a customized middleware.\nCopy Copied\n```\nimport { dependencyInjectionMiddleware } from \"inngest\" ;\nimport OpenAI from 'openai' ;\n\nconst openai = new OpenAI ();\n\nconst inngest = new Inngest ({\nid : 'my-app' ,\nmiddleware : [\ndependencyInjectionMiddleware ({ openai }) ,\n] ,\n});\n```\nOur Inngest Functions can now access the OpenAI client through the context:\nCopy Copied\n```\ninngest .createFunction (\n{ name : \"user-create\" } ,\n{ event : \"app/user.create\" } ,\nasync ({ openai }) => {\nconst chatCompletion = await openai . chat . completions .create ({\nmessages : [{ role : \"user\" , content : \"Say this is a test\" }] ,\nmodel : \"gpt-3.5-turbo\" ,\n});\n\n// ...\n} ,\n);\n```\nðŸ’¡ Types are inferred from middleware outputs, so your Inngest functions will see an appropriately-typed\n```\nopenai\n```\nproperty in their input.\nExplore other examples in the\n[TypeScript SDK Middleware examples page](\\docs\\reference\\middleware\\examples)\n.",
      "char_count": 1526,
      "token_count": 385,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_middleware_dependency-injection.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_middleware_dependency-injection.md",
        "file_name": "features_middleware_dependency-injection.md",
        "file_size": 3437,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "b99b7262f8203ddcc3b9d8d1cf5f6f18a61d290d8b9c4aa9888253bba6b34ec5",
        "author": null,
        "created_at": "2025-10-12T23:59:00.471402",
        "modified_at": "2025-10-12T23:59:00.471905",
        "page_count": null,
        "word_count": 435,
        "extracted_at": "2025-10-13T20:03:26.780597",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 4,
        "token_count": 385,
        "has_context": true
      }
    },
    {
      "index": 2,
      "text": "Using Middleware for Dependency Injection\nAdvanced mutation\nWhen the middleware runs, the types and data within the passed\n```\nctx\n```\nare merged on top of the default provided by the library. This means that you can use a few tricks to overwrite data and types safely and more accurately.\nFor example, here we use a\n```\nconst\n```\nassertion to infer the literal value of our\n```\nfoo\n```\nexample above.\nCopy Copied\n```\n// In middleware\ndependencyInjectionMiddleware ({\nfoo : \"bar\" ,\n} as const )\n\n// In a function\nasync ({ event , foo }) => {\n//             ^? (parameter) foo: \"bar\"\n}\n```",
      "char_count": 588,
      "token_count": 143,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_middleware_dependency-injection.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_middleware_dependency-injection.md",
        "file_name": "features_middleware_dependency-injection.md",
        "file_size": 3437,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "b99b7262f8203ddcc3b9d8d1cf5f6f18a61d290d8b9c4aa9888253bba6b34ec5",
        "author": null,
        "created_at": "2025-10-12T23:59:00.471402",
        "modified_at": "2025-10-12T23:59:00.471905",
        "page_count": null,
        "word_count": 435,
        "extracted_at": "2025-10-13T20:03:26.780597",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 4,
        "token_count": 143,
        "has_context": true
      }
    },
    {
      "index": 3,
      "text": "Using Middleware for Dependency Injection\nOrdering middleware and types\nMiddleware runs in the order specified when registering it (see\n[Middleware - Lifecycle - Registering and order](\\docs\\reference\\middleware\\lifecycle#registering-and-order)\n), which affects typing too.\nWhen inferring a mutated input or output, the SDK will apply changes from each middleware in sequence, just as it will at runtime. This means that for two middlewares that add a\n```\nfoo\n```\nvalue to input arguments, the last one to run will be what it seen both in types and at runtime.",
      "char_count": 560,
      "token_count": 121,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_middleware_dependency-injection.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_middleware_dependency-injection.md",
        "file_name": "features_middleware_dependency-injection.md",
        "file_size": 3437,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "b99b7262f8203ddcc3b9d8d1cf5f6f18a61d290d8b9c4aa9888253bba6b34ec5",
        "author": null,
        "created_at": "2025-10-12T23:59:00.471402",
        "modified_at": "2025-10-12T23:59:00.471905",
        "page_count": null,
        "word_count": 435,
        "extracted_at": "2025-10-13T20:03:26.780597",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 4,
        "token_count": 121,
        "has_context": true
      }
    }
  ]
}