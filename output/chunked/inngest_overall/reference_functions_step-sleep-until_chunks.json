{
  "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-sleep-until.md",
  "title": "Sleep until step.sleepUntil()",
  "num_chunks": 2,
  "total_chars": 1506,
  "chunks": [
    {
      "index": 0,
      "text": "On this page\n- [Sleep until step.sleepUntil()](\\docs\\reference\\functions\\step-sleep-until#sleep-until-step-sleep-until)\n- [step.sleepUntil(id, datetime): Promise](\\docs\\reference\\functions\\step-sleep-until#step-sleep-until-id-datetime-promise)\nReferences\n[TypeScript SDK](\\docs\\reference\\typescript)\n[Steps](\\docs\\reference\\functions\\step-run)",
      "char_count": 343,
      "token_count": 98,
      "metadata": {
        "title": "Sleep until step.sleepUntil()",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-sleep-until.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-sleep-until.md",
        "file_name": "reference_functions_step-sleep-until.md",
        "file_size": 1804,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "650ee0fe6fa90473fb440f4292a58534bbc4269ca912d352c401c64ba62ddd5e",
        "author": null,
        "created_at": "2025-10-13T00:00:43.520156",
        "modified_at": "2025-10-13T00:00:43.520237",
        "page_count": null,
        "word_count": 221,
        "extracted_at": "2025-10-13T20:04:33.771496",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 2,
        "token_count": 98,
        "has_context": true
      }
    },
    {
      "index": 1,
      "text": "Sleep until step.sleepUntil()\nstep.sleepUntil(id, datetime): Promise\n- Name `id` Type string Required required Description The ID of the step. This will be what appears in your function's logs and is used to memoize step state across function versions.\n- Name `datetime`\nv3 v2\nCopy Copied\n```\n// Sleep until the new year\nawait step .sleepUntil ( \"happy-new-year\" , \"2024-01-01\" );\n\n// Sleep until September ends\nawait step .sleepUntil ( \"wake-me-up\" , \"2023-09-30T11:59:59\" );\n\n// Sleep until the end of the this week\nconst date = dayjs () .endOf ( \"week\" ) .toDate ();\nawait step .sleepUntil ( \"wait-for-end-of-the-week\" , date);\n\n// Sleep until tea time in London\nconst teaTime = Temporal . ZonedDateTime .from ( \"2025-05-01T16:00:00+01:00[Europe/London]\" );\nawait step .sleepUntil ( \"british-tea-time\" , teaTime);\n\n// Sleep until the end of the day\nconst now = Temporal . Now .instant ();\nconst endOfDay = now .round ({ smallestUnit : \"day\" , roundingMode : \"ceil\" });\nawait step .sleepUntil ( \"done-for-today\" , endOfDay);\n```\n```\nstep.sleepUntil()\n```\nmust be called using\n```\nawait\n```\nor some other Promise handler to ensure your function sleeps correctly.",
      "char_count": 1163,
      "token_count": 344,
      "metadata": {
        "title": "Sleep until step.sleepUntil()",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-sleep-until.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-sleep-until.md",
        "file_name": "reference_functions_step-sleep-until.md",
        "file_size": 1804,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "650ee0fe6fa90473fb440f4292a58534bbc4269ca912d352c401c64ba62ddd5e",
        "author": null,
        "created_at": "2025-10-13T00:00:43.520156",
        "modified_at": "2025-10-13T00:00:43.520237",
        "page_count": null,
        "word_count": 221,
        "extracted_at": "2025-10-13T20:04:33.771496",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 2,
        "token_count": 344,
        "has_context": true
      }
    }
  ]
}