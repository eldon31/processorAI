{
  "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_multi-step-functions.md",
  "title": "Multi-Step Functions",
  "num_chunks": 13,
  "total_chars": 11608,
  "chunks": [
    {
      "index": 0,
      "text": "Multi-Step Functions\nUse Inngest's multi-step functions to safely coordinate events, delay execution for hours (or up to a year), retry\n[individual steps](\\docs\\learn\\inngest-steps)\n, and conditionally run code based on the result of previous steps and incoming events.\nCritically, multi-step functions are written in code, not config, meaning you create readable, obvious functionality that's easy to maintain.",
      "char_count": 411,
      "token_count": 90,
      "metadata": {
        "title": "Multi-Step Functions",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_multi-step-functions.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_multi-step-functions.md",
        "file_name": "guides_multi-step-functions.md",
        "file_size": 12331,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "7830fb9602d4fa4d2137abb7da76d55cc03d8fb484c1b1424aeedc3e650a7f0b",
        "author": null,
        "created_at": "2025-10-12T23:59:37.422431",
        "modified_at": "2025-10-12T23:59:37.422431",
        "page_count": null,
        "word_count": 1750,
        "extracted_at": "2025-10-13T20:03:49.425861",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 13,
        "token_count": 90,
        "has_context": true
      }
    },
    {
      "index": 1,
      "text": "Multi-Step Functions\nBenefits of multi-step functions\nCreating functions that utilize multiple steps enable you to:\n- Running retriable blocks of code to maximum reliability.\n- Pausing execution and waiting for an event matching rules before continuing.\n- Pausing for an amount of time or until a specified time.\nThis approach makes building reliable and distributed code simple. By wrapping asynchronous actions such as API calls in retriable blocks, we can ensure reliability when coordinating across many services.",
      "char_count": 517,
      "token_count": 93,
      "metadata": {
        "title": "Multi-Step Functions",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_multi-step-functions.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_multi-step-functions.md",
        "file_name": "guides_multi-step-functions.md",
        "file_size": 12331,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "7830fb9602d4fa4d2137abb7da76d55cc03d8fb484c1b1424aeedc3e650a7f0b",
        "author": null,
        "created_at": "2025-10-12T23:59:37.422431",
        "modified_at": "2025-10-12T23:59:37.422431",
        "page_count": null,
        "word_count": 1750,
        "extracted_at": "2025-10-13T20:03:49.425861",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 13,
        "token_count": 93,
        "has_context": true
      }
    },
    {
      "index": 2,
      "text": "Multi-Step Functions\nHow to write a multi-step function\nTypeScript Go Python\nConsider this simple\n[Inngest function](\\docs\\learn\\inngest-functions)\nwhich sends a welcome email when a user signs up:\nCopy Copied\n```\nimport { Inngest } from \"inngest\" ;\n\nconst inngest = new Inngest ({ id : \"my-app\" });\n\nexport default inngest .createFunction (\n{ id : \"activation-email\" } ,\n{ event : \"app/user.created\" } ,\nasync ({ event }) => {\nawait sendEmail ({ email : event . user .email , template : \"welcome\" });\n}\n);\n```\nThis function comes with all of the benefits of Inngest: the code is reliable and retriable. If an error happens, you will recover the data. This works for a single-task functions.\nHowever, there is a new requirement: if a user hasn't created a post on our platform within 24 hours of signing up, we should send the user another email. Instead of adding more logic to the handler, we can convert this function into a multi-step one.",
      "char_count": 943,
      "token_count": 237,
      "metadata": {
        "title": "Multi-Step Functions",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_multi-step-functions.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_multi-step-functions.md",
        "file_name": "guides_multi-step-functions.md",
        "file_size": 12331,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "7830fb9602d4fa4d2137abb7da76d55cc03d8fb484c1b1424aeedc3e650a7f0b",
        "author": null,
        "created_at": "2025-10-12T23:59:37.422431",
        "modified_at": "2025-10-12T23:59:37.422431",
        "page_count": null,
        "word_count": 1750,
        "extracted_at": "2025-10-13T20:03:49.425861",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 13,
        "token_count": 237,
        "has_context": true
      }
    },
    {
      "index": 3,
      "text": "Multi-Step Functions\nHow to write a multi-step function\n1. Convert to a step function\nFirst, let's convert this function into a multi-step function:\n- Add a `step` argument to the handler in the Inngest function.\n- Wrap `sendEmail()` call in a [`step.run()`](\\docs\\reference\\functions\\step-run) method.\nCopy Copied\n```\nexport default inngest .createFunction (\n{ id : \"activation-email\" } ,\n{ event : \"app/user.created\" } ,\nasync ({ event , step }) => {\nawait step .run ( \"send-welcome-email\" , async () => {\nreturn await sendEmail ({ email : event . user .email , template : \"welcome\" });\n});\n}\n);\n```\nThe main difference is that we've wrapped our\n```\nsendEmail()\n```\ncall in a\n```\nstep.run()\n```\ncall. This is how we tell Inngest that this is an individual step in our function. This step can be retried independently, just like a single-step function would.",
      "char_count": 859,
      "token_count": 223,
      "metadata": {
        "title": "Multi-Step Functions",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_multi-step-functions.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_multi-step-functions.md",
        "file_name": "guides_multi-step-functions.md",
        "file_size": 12331,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "7830fb9602d4fa4d2137abb7da76d55cc03d8fb484c1b1424aeedc3e650a7f0b",
        "author": null,
        "created_at": "2025-10-12T23:59:37.422431",
        "modified_at": "2025-10-12T23:59:37.422431",
        "page_count": null,
        "word_count": 1750,
        "extracted_at": "2025-10-13T20:03:49.425861",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 13,
        "token_count": 223,
        "has_context": true
      }
    },
    {
      "index": 4,
      "text": "Multi-Step Functions\nHow to write a multi-step function\n2. Add another step: wait for event\nOnce the welcome email is sent, we want to wait at most 24 hours for our user to create a post. If they haven't created one by then, we want to send them a reminder email.\nElsewhere in our app, an\n```\napp/post.created\n```\nevent is sent whenever a user creates a new post. We could use it to trigger the second email.\nTo do this, we can use the\n[```\nstep.waitForEvent()\n```](\\docs\\reference\\functions\\step-wait-for-event)\nmethod. This tool will wait for a matching event to be fired, and then return the event data. If the event is not fired within the timeout, it will return\n```\nnull\n```\n, which we can use to decide whether to send the reminder email.\nCopy Copied\n```\nexport default inngest .createFunction (\n{ id : \"activation-email\" } ,\n{ event : \"app/user.created\" } ,\nasync ({ event , step }) => {\nawait step .run ( \"send-welcome-email\" , async () => {\nreturn await sendEmail ({ email : event . user .email , template : \"welcome\" });\n});\n\n// Wait for an \"app/post.created\" event\nconst postCreated = await step .waitForEvent ( \"wait-for-post-creation\" , {\nevent : \"app/post.created\" ,\nmatch : \"data.user.id\" , // the field \"data.user.id\" must match\ntimeout : \"24h\" , // wait at most 24 hours\n});\n}\n);\n```\nNow we have a\n```\npostCreated\n```\nvariable, which will be\n```\nnull\n```\nif the user hasn't created a post within 24 hours, or the event data if they have.",
      "char_count": 1455,
      "token_count": 392,
      "metadata": {
        "title": "Multi-Step Functions",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_multi-step-functions.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_multi-step-functions.md",
        "file_name": "guides_multi-step-functions.md",
        "file_size": 12331,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "7830fb9602d4fa4d2137abb7da76d55cc03d8fb484c1b1424aeedc3e650a7f0b",
        "author": null,
        "created_at": "2025-10-12T23:59:37.422431",
        "modified_at": "2025-10-12T23:59:37.422431",
        "page_count": null,
        "word_count": 1750,
        "extracted_at": "2025-10-13T20:03:49.425861",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 13,
        "token_count": 392,
        "has_context": true
      }
    },
    {
      "index": 5,
      "text": "Multi-Step Functions\nHow to write a multi-step function\n3. Set conditional action\nFinally, we can use the\n```\npostCreated\n```\nvariable to send the reminder email if the user hasn't created a post. Let's add another block of code with\n```\nstep.run()\n```\n:\nCopy Copied\n```\nexport default inngest .createFunction (\n{ id : \"activation-email\" } ,\n{ event : \"app/user.created\" } ,\nasync ({ event , step }) => {\nawait step .run ( \"send-welcome-email\" , async () => {\nreturn await sendEmail ({ email : event . user .email , template : \"welcome\" });\n});\n\n// Wait for an \"app/post.created\" event\nconst postCreated = await step .waitForEvent ( \"wait-for-post-creation\" , {\nevent : \"app/post.created\" ,\nmatch : \"data.user.id\" , // the field \"data.user.id\" must match\ntimeout : \"24h\" , // wait at most 24 hours\n});\n\nif ( ! postCreated) {\n// If no post was created, send a reminder email\nawait step .run ( \"send-reminder-email\" , async () => {\nreturn await sendEmail ({\nemail : event . user .email ,\ntemplate : \"reminder\" ,\n});\n});\n}\n}\n);\n```\nThat's it! We've now written a multi-step function that will send a welcome email, and then send a reminder email if the user hasn't created a post within 24 hours.\nMost importantly, we had to write no config to do this. We can use all the power of JavaScript to write our functions and all the power of Inngest's tools to coordinate between events and steps.",
      "char_count": 1388,
      "token_count": 360,
      "metadata": {
        "title": "Multi-Step Functions",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_multi-step-functions.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_multi-step-functions.md",
        "file_name": "guides_multi-step-functions.md",
        "file_size": 12331,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "7830fb9602d4fa4d2137abb7da76d55cc03d8fb484c1b1424aeedc3e650a7f0b",
        "author": null,
        "created_at": "2025-10-12T23:59:37.422431",
        "modified_at": "2025-10-12T23:59:37.422431",
        "page_count": null,
        "word_count": 1750,
        "extracted_at": "2025-10-13T20:03:49.425861",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 13,
        "token_count": 360,
        "has_context": true
      }
    },
    {
      "index": 6,
      "text": "Multi-Step Functions\nStep Reference\nTypeScript Go Python\nYou can read more about\n[Inngest steps](\\docs\\learn\\inngest-steps)\nor jump directly to a step reference guide:\n- [`step.run()`](\\docs\\reference\\functions\\step-run) : Run synchronous or asynchronous code as a retriable step in your function.\n- [`step.sleep()`](\\docs\\reference\\functions\\step-sleep) : Sleep for a given amount of time.\n- [`step.sleepUntil()`](\\docs\\reference\\functions\\step-sleep-until) : Sleep until a given time.\n- [`step.invoke()`](\\docs\\reference\\functions\\step-invoke) : Invoke another Inngest function as a step, receiving the result of the invoked function.\n- [`step.waitForEvent()`](\\docs\\reference\\functions\\step-wait-for-event) : Pause a function's execution until another event is received.\n- [`step.sendEvent()`](\\docs\\reference\\functions\\step-send-event) : Send event(s) reliably within your function. Use this instead of `inngest.send()` to ensure reliable event delivery from within functions.\nPlease note that each step is executed as\n**a separate HTTP request**\n. To ensure efficient and correct execution, place any non-deterministic logic (such as DB calls or API calls) within a\n```\nstep.run()\n```\ncall.\n[Learn more](\\docs\\guides\\working-with-loops)\n.",
      "char_count": 1243,
      "token_count": 311,
      "metadata": {
        "title": "Multi-Step Functions",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_multi-step-functions.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_multi-step-functions.md",
        "file_name": "guides_multi-step-functions.md",
        "file_size": 12331,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "7830fb9602d4fa4d2137abb7da76d55cc03d8fb484c1b1424aeedc3e650a7f0b",
        "author": null,
        "created_at": "2025-10-12T23:59:37.422431",
        "modified_at": "2025-10-12T23:59:37.422431",
        "page_count": null,
        "word_count": 1750,
        "extracted_at": "2025-10-13T20:03:49.425861",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 13,
        "token_count": 311,
        "has_context": true
      }
    },
    {
      "index": 7,
      "text": "Multi-Step Functions\nGotchas\nMy function is running twice\nInngest will communicate with your function multiple times throughout a single run and will use your use of tools to intelligently memoize state.\nFor this reason, placing business logic outside of a\n```\nstep.run()\n```\ncall is a bad idea, as this will be run every time Inngest communicates with your function.",
      "char_count": 367,
      "token_count": 81,
      "metadata": {
        "title": "Multi-Step Functions",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_multi-step-functions.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_multi-step-functions.md",
        "file_name": "guides_multi-step-functions.md",
        "file_size": 12331,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "7830fb9602d4fa4d2137abb7da76d55cc03d8fb484c1b1424aeedc3e650a7f0b",
        "author": null,
        "created_at": "2025-10-12T23:59:37.422431",
        "modified_at": "2025-10-12T23:59:37.422431",
        "page_count": null,
        "word_count": 1750,
        "extracted_at": "2025-10-13T20:03:49.425861",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 13,
        "token_count": 81,
        "has_context": true
      }
    },
    {
      "index": 8,
      "text": "Multi-Step Functions\nGotchas\nI want to run asynchronous code\n```\nstep.run()\n```\naccepts an\n```\nasync\n```\nfunction, like so:\nCopy Copied\n```\nawait step .run ( \"do-something\" , async () => {\n// your code\n});\n```\nEach call to\n```\nstep.run()\n```\nis a single retriable step - a lightweight transaction.  Therefore, each step should have a single side effect. For example, the below code is problematic:\nCopy Copied\n```\nawait step .run ( \"create-alert\" , async () => {\nconst alertId = await createAlert ();\nawait sendAlertLinkToSlack (alertId);\n});\n```\nIf\n```\ncreateAlert()\n```\nsucceeds but\n```\nsendAlertLinkToSlack()\n```\nfails, the code will be retried and an alert will be created every time the step is retried.\nInstead, we should split out asynchronous actions into multiple steps so they're retried independently.\nCopy Copied\n```\nconst alertId = await step .run ( \"create-alert\" , () => createAlert ());\n\nawait step .run ( \"send-alert-link\" , () => sendAlertLinkToSlack (alertId));\n```",
      "char_count": 984,
      "token_count": 264,
      "metadata": {
        "title": "Multi-Step Functions",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_multi-step-functions.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_multi-step-functions.md",
        "file_name": "guides_multi-step-functions.md",
        "file_size": 12331,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "7830fb9602d4fa4d2137abb7da76d55cc03d8fb484c1b1424aeedc3e650a7f0b",
        "author": null,
        "created_at": "2025-10-12T23:59:37.422431",
        "modified_at": "2025-10-12T23:59:37.422431",
        "page_count": null,
        "word_count": 1750,
        "extracted_at": "2025-10-13T20:03:49.425861",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 13,
        "token_count": 264,
        "has_context": true
      }
    },
    {
      "index": 9,
      "text": "Multi-Step Functions\nGotchas\nMy variable isn't updating\nBecause Inngest communicates with your function multiple times, memoising state as it goes, code within calls to\n```\nstep.run()\n```\nis not called on every invocation.\nMake sure that any variables needed for the overall function are\n*returned*\nfrom calls to\n```\nstep.run()\n```\n:\nCopy Copied\n```\n// This is the right way to set variables within step.run :)\nconst userId = await step .run ( \"get-user\" , () => getRandomUserId ());\n\nconsole .log (userId); // 123\n```\nFor comparison, here are\n**two examples of malfunctioning code**\n(if you're using steps to update variables within the function's closure):\nCopy Copied\n```\n// THIS IS WRONG! step.run() only runs once and is skipped for future\n// steps, so userID will not be defined.\nlet userId;\n\n// Do NOT do this! Instead, return data from step.run()\nawait step .run ( \"get-user\" , async () => {\nuserId = await getRandomUserId ();\n});\n\nconsole .log (userId); // undefined\n```",
      "char_count": 979,
      "token_count": 238,
      "metadata": {
        "title": "Multi-Step Functions",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_multi-step-functions.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_multi-step-functions.md",
        "file_name": "guides_multi-step-functions.md",
        "file_size": 12331,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "7830fb9602d4fa4d2137abb7da76d55cc03d8fb484c1b1424aeedc3e650a7f0b",
        "author": null,
        "created_at": "2025-10-12T23:59:37.422431",
        "modified_at": "2025-10-12T23:59:37.422431",
        "page_count": null,
        "word_count": 1750,
        "extracted_at": "2025-10-13T20:03:49.425861",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 13,
        "token_count": 238,
        "has_context": true
      }
    },
    {
      "index": 10,
      "text": "Multi-Step Functions\nGotchas\nsleepUntil() isn't working as expected\nMake sure to only to use\n```\nsleepUntil()\n```\nwith dates that will be static across the various calls to your function.\nAlways use\n```\nsleep()\n```\nif you'd like to wait a particular time from\n*now*\n.\nCopy Copied\n```\n// ❌ Bad\nconst tomorrow = new Date ();\ntomorrow .setDate ( tomorrow .getDate () + 1 );\nawait step .sleepUntil ( \"wait-until-tomorrow\" , tomorrow);\n\n// ✅ Good\nawait step .sleep ( \"wait-a-day\" , \"1 day\" );\n```\nCopy Copied\n```\n// ✅ Good\nconst userBirthday = await step .run ( \"get-user-birthday\" , async () => {\nconst user = await getUser ();\nreturn user .birthday; // Date\n});\n\nawait sleepUntil ( \"wait-for-user-birthday\" , userBirthday);\n```",
      "char_count": 724,
      "token_count": 202,
      "metadata": {
        "title": "Multi-Step Functions",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_multi-step-functions.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_multi-step-functions.md",
        "file_name": "guides_multi-step-functions.md",
        "file_size": 12331,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "7830fb9602d4fa4d2137abb7da76d55cc03d8fb484c1b1424aeedc3e650a7f0b",
        "author": null,
        "created_at": "2025-10-12T23:59:37.422431",
        "modified_at": "2025-10-12T23:59:37.422431",
        "page_count": null,
        "word_count": 1750,
        "extracted_at": "2025-10-13T20:03:49.425861",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 13,
        "token_count": 202,
        "has_context": true
      }
    },
    {
      "index": 11,
      "text": "Multi-Step Functions\nGotchas\nUnexpected loop behavior\nWhen using loops within functions, it is recommended to treat each iteration as it's own step or steps.\nWhen\n[functions are run](\\docs\\learn\\how-functions-are-executed)\n, the function handler is re-executed from the start for each new step and previously completed steps are memoized. This means that iterations of loops will be run every re-execution, but code encapsulated within\n```\nstep.run()\n```\nwill not re-run.\nIf code within a loop is not encapsulated within a step, it will re-run multiple times, which can lead to confusing behavior, debugging, or\n[logging](\\docs\\guides\\logging)\n. This is why it is recommended to encapsulate non-deterministic code within a\n```\nstep.run()\n```\nwhen working with loops.\nLearn more about\n[working with loops in Inngest](\\docs\\guides\\working-with-loops)\n.",
      "char_count": 850,
      "token_count": 204,
      "metadata": {
        "title": "Multi-Step Functions",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_multi-step-functions.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_multi-step-functions.md",
        "file_name": "guides_multi-step-functions.md",
        "file_size": 12331,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "7830fb9602d4fa4d2137abb7da76d55cc03d8fb484c1b1424aeedc3e650a7f0b",
        "author": null,
        "created_at": "2025-10-12T23:59:37.422431",
        "modified_at": "2025-10-12T23:59:37.422431",
        "page_count": null,
        "word_count": 1750,
        "extracted_at": "2025-10-13T20:03:49.425861",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 13,
        "token_count": 204,
        "has_context": true
      }
    },
    {
      "index": 12,
      "text": "Multi-Step Functions\nFurther reading\nMore information on multi-step functions:\n- Docs guide: [working with loops in Inngest](\\docs\\guides\\working-with-loops) .\n- Blog post: [\"Building an Event Driven Video Processing Workflow with Next.js, tRPC, and Inngest \"](\\blog\\nextjs-trpc-inngest)\n- Blog post: [\"Running chained LLMs with TypeScript in production\"](\\blog\\running-chained-llms-typescript-in-production)\n- Blog post: [building Truckload](\\blog\\mux-migrating-video-collections) , a tool for heavy video migration between hosting platforms, from Mux.\n- Blog post: building *banger.show* 's [video rendering pipeline](\\blog\\banger-video-rendering-pipeline) .\n- [Email sequence examples](\\docs\\examples\\email-sequence) implemented with Inngest.\n- [Customer story: Soundcloud](\\customers\\soundcloud) : building scalable video pipelines with Inngest to streamline dynamic video generation.",
      "char_count": 888,
      "token_count": 219,
      "metadata": {
        "title": "Multi-Step Functions",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_multi-step-functions.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_multi-step-functions.md",
        "file_name": "guides_multi-step-functions.md",
        "file_size": 12331,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "7830fb9602d4fa4d2137abb7da76d55cc03d8fb484c1b1424aeedc3e650a7f0b",
        "author": null,
        "created_at": "2025-10-12T23:59:37.422431",
        "modified_at": "2025-10-12T23:59:37.422431",
        "page_count": null,
        "word_count": 1750,
        "extracted_at": "2025-10-13T20:03:49.425861",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 13,
        "token_count": 219,
        "has_context": true
      }
    }
  ]
}