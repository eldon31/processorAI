{
  "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\examples_fetch-run-status-and-output.md",
  "title": "#### On this page",
  "num_chunks": 9,
  "total_chars": 5396,
  "chunks": [
    {
      "index": 0,
      "text": "On this page\n- [Fetch run status and output](\\docs\\examples\\fetch-run-status-and-output#fetch-run-status-and-output)\n- [Quick Snippet](\\docs\\examples\\fetch-run-status-and-output#quick-snippet)\n- [Triggering the function](\\docs\\examples\\fetch-run-status-and-output#triggering-the-function)\n- [Fetching triggered function status and output](\\docs\\examples\\fetch-run-status-and-output#fetching-triggered-function-status-and-output)\n- [Putting it all together](\\docs\\examples\\fetch-run-status-and-output#putting-it-all-together)\n- [More context](\\docs\\examples\\fetch-run-status-and-output#more-context)\n- [Related concepts](\\docs\\examples\\fetch-run-status-and-output#related-concepts)\n[Examples](\\docs\\examples)",
      "char_count": 707,
      "token_count": 174,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\examples_fetch-run-status-and-output.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\examples_fetch-run-status-and-output.md",
        "file_name": "examples_fetch-run-status-and-output.md",
        "file_size": 5847,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "0ed1b51c633c81810bdebc594137d2a25d102074506613f83102b470e9a6f67e",
        "author": null,
        "created_at": "2025-10-12T23:58:27.547072",
        "modified_at": "2025-10-12T23:58:27.547072",
        "page_count": null,
        "word_count": 699,
        "extracted_at": "2025-10-13T20:03:13.933658",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 9,
        "token_count": 174,
        "has_context": true
      }
    },
    {
      "index": 1,
      "text": "Fetch run status and output\nInngest provides a way to fetch the status and output of a function run using\n[the REST API](https://api-docs.inngest.com/docs/inngest-api/1j9i5603g5768-introduction)\n. This is useful when:\n- You want to check the status or output of a given run.\n- You want to display the status of a function run in your application, for example, in a user dashboard.\nThis page provides a quick example of how to fetch the status and output of a function run using the Inngest API.",
      "char_count": 494,
      "token_count": 128,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\examples_fetch-run-status-and-output.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\examples_fetch-run-status-and-output.md",
        "file_name": "examples_fetch-run-status-and-output.md",
        "file_size": 5847,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "0ed1b51c633c81810bdebc594137d2a25d102074506613f83102b470e9a6f67e",
        "author": null,
        "created_at": "2025-10-12T23:58:27.547072",
        "modified_at": "2025-10-12T23:58:27.547072",
        "page_count": null,
        "word_count": 699,
        "extracted_at": "2025-10-13T20:03:13.933658",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 9,
        "token_count": 128,
        "has_context": true
      }
    },
    {
      "index": 2,
      "text": "Fetch run status and output\nQuick Snippet\nHere is a basic function that processes a CSV file and returns the number of items processed:\nCopy Copied\n```\nconst processCSV = inngest .createFunction (\n{ id : \"process-csv-upload\" } ,\n{ event : \"imports/csv.uploaded\" } ,\nasync ({ event , step }) => {\n// CSV processing logic omitted for the sake of the example\nreturn {\nstatus : \"success\" ,\nprocessedItems : results . length ,\nfailedItems : failures . length ,\n}\n}\n);\n```",
      "char_count": 466,
      "token_count": 113,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\examples_fetch-run-status-and-output.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\examples_fetch-run-status-and-output.md",
        "file_name": "examples_fetch-run-status-and-output.md",
        "file_size": 5847,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "0ed1b51c633c81810bdebc594137d2a25d102074506613f83102b470e9a6f67e",
        "author": null,
        "created_at": "2025-10-12T23:58:27.547072",
        "modified_at": "2025-10-12T23:58:27.547072",
        "page_count": null,
        "word_count": 699,
        "extracted_at": "2025-10-13T20:03:13.933658",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 9,
        "token_count": 113,
        "has_context": true
      }
    },
    {
      "index": 3,
      "text": "Fetch run status and output\nQuick Snippet\nTriggering the function\nTo trigger this function, you will send an event\n```\n\"imports/csv.uploaded\"\n```\nusing\n```\ninngest.send()\n```\nwith whatever payload data you need. The\n```\ninngest.send()\n```\nfunction returns an array of Event IDs that you will use to fetch the status and output of the function run.\nCopy Copied\n```\nconst { ids } = await inngest .send ({\nname : \"imports/csv.uploaded\" ,\ndata : {\nfile : \"http://s3.amazonaws.com/acme-uploads/user_0xp3wqz7vumcvajt/JVLO6YWS42IXEIGO.csv\" ,\nuserId : \"user_0xp3wqz7vumcvajt\" ,\n} ,\n});\n// ids = [\"01HWAVEB858VPPX47Z65GR6P6R\"]\n```",
      "char_count": 621,
      "token_count": 207,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\examples_fetch-run-status-and-output.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\examples_fetch-run-status-and-output.md",
        "file_name": "examples_fetch-run-status-and-output.md",
        "file_size": 5847,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "0ed1b51c633c81810bdebc594137d2a25d102074506613f83102b470e9a6f67e",
        "author": null,
        "created_at": "2025-10-12T23:58:27.547072",
        "modified_at": "2025-10-12T23:58:27.547072",
        "page_count": null,
        "word_count": 699,
        "extracted_at": "2025-10-13T20:03:13.933658",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 9,
        "token_count": 207,
        "has_context": true
      }
    },
    {
      "index": 4,
      "text": "Fetch run status and output\nQuick Snippet\nFetching triggered function status and output\nUsing the REST API, we can use the Event ID to fetch all runs triggered by that event using the\n[event's runs endpoint](https://api-docs.inngest.com/docs/inngest-api/yoyeen3mu7wj0-list-event-function-runs)\n:\nCopy Copied\n```\nhttps://api.inngest.com/v1/events/01HWAVEB858VPPX47Z65GR6P6R/runs\n```\nTo query this, we can use a simple\n```\nfetch\n```\nrequest using our signing key to authenticate with the API. Here, we'll wrap this in a re-usable function:\nCopy Copied\n```\nasync function getRuns (eventId) {\nconst response = await fetch ( `https://api.inngest.com/v1/events/ ${ eventId } /runs` , {\nheaders : {\nAuthorization : `Bearer ${ process . env . INNGEST_SIGNING_KEY } ` ,\n} ,\n});\nconst json = await response .json ();\nreturn json .data;\n}\n```\nWe can now use the Event ID to fetch the status and output of the function run. The\n```\ngetRuns\n```\nfunction will return an array of runs as events can trigger multiple runs via\n[fan-out](\\docs\\guides\\fan-out-jobs)\n. We'll consider that this event only triggers a single function:\nCopy Copied\n```\nconst runs = await getRuns ( \"01HWAVEB858VPPX47Z65GR6P6R\" );\nconsole .log (runs[ 0 ]);\n/*\n{\nrun_id: '01HWAVJ8ASQ5C3FXV32JS9DV9Q',\nrun_started_at: '2024-04-25T14:46:45.337Z',\nfunction_id: '6219fa64-9f58-41b6-95ec-a45c7172fa1e',\nfunction_version: 12,\nenvironment_id: '6219fa64-9f58-41b6-95ec-a45c7172fa1e',\nevent_id: '01HWAVEB858VPPX47Z65GR6P6R',\nstatus: 'Completed',\nended_at: '2024-04-25T14:46:46.896Z',\noutput: {\nstatus: \"success\",\nprocessedItems: 98,\nfailedItems: 2,\n}\n}\n*/\n```\nIf we want to trigger the function then immediately await it's output in the same code, we can wrap our\n```\ngetRuns\n```\nto poll until the status is\n```\nCompleted\n```\n:\nCopy Copied\n```\nasync function getRunOutput (eventId) {\nlet runs = await getRuns (eventId);\nwhile (runs[ 0 ].status !== \"Completed\" ) {\nawait new Promise ((resolve) => setTimeout (resolve , 1000 ));\nruns = await getRuns (eventId);\nif (runs[ 0 ].status === \"Failed\" || runs[ 0 ].status === \"Cancelled\" ) {\nthrow new Error ( `Function run ${ runs[ 0 ].status } ` );\n}\n}\nreturn runs[ 0 ];\n}\n```",
      "char_count": 2168,
      "token_count": 735,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\examples_fetch-run-status-and-output.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\examples_fetch-run-status-and-output.md",
        "file_name": "examples_fetch-run-status-and-output.md",
        "file_size": 5847,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "0ed1b51c633c81810bdebc594137d2a25d102074506613f83102b470e9a6f67e",
        "author": null,
        "created_at": "2025-10-12T23:58:27.547072",
        "modified_at": "2025-10-12T23:58:27.547072",
        "page_count": null,
        "word_count": 699,
        "extracted_at": "2025-10-13T20:03:13.933658",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 9,
        "token_count": 735,
        "has_context": true
      }
    },
    {
      "index": 5,
      "text": "Fetch run status and output\nQuick Snippet\nPutting it all together\nBrining this all together, we can now trigger the function and await the output:\nCopy Copied\n```\nconst { ids } = await inngest .send ({\nname : \"imports/csv.uploaded\" ,\ndata : {\nfile : \"http://s3.amazonaws.com/acme-uploads/user_0xp3wqz7vumcvajt/JVLO6YWS42IXEIGO.csv\" ,\nuserId : \"user_0xp3wqz7vumcvajt\" ,\n} ,\n});\n\nconst run = await getRunOutput (ids[ 0 ]);\nconsole .log ( run .output);\n/*\n{\nstatus: \"success\",\nprocessedItems: 98,\nfailedItems: 2,\n}\n*/\n```",
      "char_count": 518,
      "token_count": 169,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\examples_fetch-run-status-and-output.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\examples_fetch-run-status-and-output.md",
        "file_name": "examples_fetch-run-status-and-output.md",
        "file_size": 5847,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "0ed1b51c633c81810bdebc594137d2a25d102074506613f83102b470e9a6f67e",
        "author": null,
        "created_at": "2025-10-12T23:58:27.547072",
        "modified_at": "2025-10-12T23:58:27.547072",
        "page_count": null,
        "word_count": 699,
        "extracted_at": "2025-10-13T20:03:13.933658",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 9,
        "token_count": 169,
        "has_context": true
      }
    },
    {
      "index": 6,
      "text": "Fetch run status and output\nMore context\nCheck the resources below to learn more about working with the Inngest REST API.",
      "char_count": 121,
      "token_count": 26,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\examples_fetch-run-status-and-output.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\examples_fetch-run-status-and-output.md",
        "file_name": "examples_fetch-run-status-and-output.md",
        "file_size": 5847,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "0ed1b51c633c81810bdebc594137d2a25d102074506613f83102b470e9a6f67e",
        "author": null,
        "created_at": "2025-10-12T23:58:27.547072",
        "modified_at": "2025-10-12T23:58:27.547072",
        "page_count": null,
        "word_count": 699,
        "extracted_at": "2025-10-13T20:03:13.933658",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 9,
        "token_count": 26,
        "has_context": true
      }
    },
    {
      "index": 7,
      "text": "Fetch run status and output\nMore context\nReference: REST API: List event function runs\n[Return all runs triggered by an event.](https://api-docs.inngest.com/docs/inngest-api/yoyeen3mu7wj0-list-event-function-runs)",
      "char_count": 213,
      "token_count": 57,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\examples_fetch-run-status-and-output.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\examples_fetch-run-status-and-output.md",
        "file_name": "examples_fetch-run-status-and-output.md",
        "file_size": 5847,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "0ed1b51c633c81810bdebc594137d2a25d102074506613f83102b470e9a6f67e",
        "author": null,
        "created_at": "2025-10-12T23:58:27.547072",
        "modified_at": "2025-10-12T23:58:27.547072",
        "page_count": null,
        "word_count": 699,
        "extracted_at": "2025-10-13T20:03:13.933658",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 9,
        "token_count": 57,
        "has_context": true
      }
    },
    {
      "index": 8,
      "text": "Fetch run status and output\nRelated concepts\n- [Fan-out jobs](\\docs\\guides\\fan-out-jobs)",
      "char_count": 88,
      "token_count": 26,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\examples_fetch-run-status-and-output.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\examples_fetch-run-status-and-output.md",
        "file_name": "examples_fetch-run-status-and-output.md",
        "file_size": 5847,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "0ed1b51c633c81810bdebc594137d2a25d102074506613f83102b470e9a6f67e",
        "author": null,
        "created_at": "2025-10-12T23:58:27.547072",
        "modified_at": "2025-10-12T23:58:27.547072",
        "page_count": null,
        "word_count": 699,
        "extracted_at": "2025-10-13T20:03:13.933658",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 9,
        "token_count": 26,
        "has_context": true
      }
    }
  ]
}