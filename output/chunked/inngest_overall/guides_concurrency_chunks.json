{
  "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_concurrency.md",
  "title": "#### On this page",
  "num_chunks": 15,
  "total_chars": 14369,
  "chunks": [
    {
      "index": 0,
      "text": "On this page\n- [Concurrency management](\\docs\\guides\\concurrency#concurrency-management)\n- [When to use concurrency](\\docs\\guides\\concurrency#when-to-use-concurrency)\n- [How to configure concurrency](\\docs\\guides\\concurrency#how-to-configure-concurrency)\n- [Basic concurrency](\\docs\\guides\\concurrency#basic-concurrency)\n- [Concurrency keys (Multi-tenant concurrency)](\\docs\\guides\\concurrency#concurrency-keys-multi-tenant-concurrency)\n- [Sharing limits across functions (scope)](\\docs\\guides\\concurrency#sharing-limits-across-functions-scope)\n- [Combining multiple concurrency limits](\\docs\\guides\\concurrency#combining-multiple-concurrency-limits)\n- [How concurrency works](\\docs\\guides\\concurrency#how-concurrency-works)\n- [Concurrency control across specific steps in a function](\\docs\\guides\\concurrency#concurrency-control-across-specific-steps-in-a-function)\n- [How global limits work](\\docs\\guides\\concurrency#how-global-limits-work)\n- [Limitations](\\docs\\guides\\concurrency#limitations)\n- [Concurrency reference](\\docs\\guides\\concurrency#concurrency-reference)\n- [Further examples](\\docs\\guides\\concurrency#further-examples)\n- [Restricting parallel import jobs for a customer id](\\docs\\guides\\concurrency#restricting-parallel-import-jobs-for-a-customer-id)\n- [Tips](\\docs\\guides\\concurrency#tips)\nFeatures\n[Inngest Functions](\\docs\\features\\inngest-functions)\n[Flow Control](\\docs\\guides\\flow-control)",
      "char_count": 1411,
      "token_count": 375,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_concurrency.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_concurrency.md",
        "file_name": "guides_concurrency.md",
        "file_size": 15337,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "556fe84453b576a5a0420112e397d1dabfde7a904513ae97e39d8182d4ac90f5",
        "author": null,
        "created_at": "2025-10-12T23:59:22.666268",
        "modified_at": "2025-10-12T23:59:22.666859",
        "page_count": null,
        "word_count": 2099,
        "extracted_at": "2025-10-13T20:03:39.323885",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 15,
        "token_count": 375,
        "has_context": true
      }
    },
    {
      "index": 1,
      "text": "Concurrency management\nLimiting concurrency in systems is an important tool for correctly managing computing resources and scaling workloads. Inngest's concurrency control enables you to manage the number of\n*steps*\nthat concurrently execute.\nStep concurrency can be optionally configured using \"keys\" which applies the limit to each unique value of the key (ex. user id). The concurrency option can also be applied to different \"scopes\" which allows a concurrency limit to be shared across\n*multiple*\nfunctions.\nAs compared to traditional queue and worker systems, Inngest manages the concurrency within the system you do not need to implement additional worker-level logic or state.",
      "char_count": 684,
      "token_count": 128,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_concurrency.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_concurrency.md",
        "file_name": "guides_concurrency.md",
        "file_size": 15337,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "556fe84453b576a5a0420112e397d1dabfde7a904513ae97e39d8182d4ac90f5",
        "author": null,
        "created_at": "2025-10-12T23:59:22.666268",
        "modified_at": "2025-10-12T23:59:22.666859",
        "page_count": null,
        "word_count": 2099,
        "extracted_at": "2025-10-13T20:03:39.323885",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 15,
        "token_count": 128,
        "has_context": true
      }
    },
    {
      "index": 2,
      "text": "Concurrency management\nWhen to use concurrency\nConcurrency is most useful when you want to constrain your function for a set of resources. Some use cases include:\n- **Limiting in multi-tenant systems** - Prevent a single account, user, or tenant from consuming too many resources and creating a backlog for others. See: [Concurrency keys (Multi-tenant concurrency)](\\docs\\guides\\concurrency#concurrency-keys-multi-tenant-concurrency) .\n- **Limiting throughput for database operations** - Prevent potentially high volume jobs from overwhelming a database or similar resource. See: [Sharing limits across functions (scope)](\\docs\\guides\\concurrency#sharing-limits-across-functions-scope) .\n- **Basic concurrent operations limits** - Limit the capacity dedicated to processing a certain job, for example an import pipeline. See: [Basic concurrency](\\docs\\guides\\concurrency#basic-concurrency) .\n- **Combining multiple of the above** - Multiple concurrency limits can be added per function. See: [Combining multiple concurrency limits](\\docs\\guides\\concurrency#combining-multiple-concurrency-limits)\nIf you need to limit a function to a certain rate of processing, for example with a third party API rate limit, you might need\n[throttling](\\docs\\guides\\throttling)\ninstead. Throttling is applied at the function level, compared to concurrency which is at the step level.",
      "char_count": 1366,
      "token_count": 299,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_concurrency.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_concurrency.md",
        "file_name": "guides_concurrency.md",
        "file_size": 15337,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "556fe84453b576a5a0420112e397d1dabfde7a904513ae97e39d8182d4ac90f5",
        "author": null,
        "created_at": "2025-10-12T23:59:22.666268",
        "modified_at": "2025-10-12T23:59:22.666859",
        "page_count": null,
        "word_count": 2099,
        "extracted_at": "2025-10-13T20:03:39.323885",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 15,
        "token_count": 299,
        "has_context": true
      }
    },
    {
      "index": 3,
      "text": "Concurrency management\nHow to configure concurrency\nOne or more concurrency limits can be configured for each function.\n- [Basic concurrency](\\docs\\guides\\concurrency#basic-concurrency)\n- [Concurrency keys (Multi-tenant concurrency)](\\docs\\guides\\concurrency#concurrency-keys-multi-tenant-concurrency)\n- [Sharing limits across functions (scope)](\\docs\\guides\\concurrency#sharing-limits-across-functions-scope)\n- [Combining multiple concurrency limits](\\docs\\guides\\concurrency#combining-multiple-concurrency-limits)",
      "char_count": 515,
      "token_count": 119,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_concurrency.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_concurrency.md",
        "file_name": "guides_concurrency.md",
        "file_size": 15337,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "556fe84453b576a5a0420112e397d1dabfde7a904513ae97e39d8182d4ac90f5",
        "author": null,
        "created_at": "2025-10-12T23:59:22.666268",
        "modified_at": "2025-10-12T23:59:22.666859",
        "page_count": null,
        "word_count": 2099,
        "extracted_at": "2025-10-13T20:03:39.323885",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 15,
        "token_count": 119,
        "has_context": true
      }
    },
    {
      "index": 4,
      "text": "Concurrency management\nHow to configure concurrency\nBasic concurrency\nThe most basic concurrency limit is a single\n```\nlimit\n```\nset to an integer value of the maximum number of concurrently executing steps. When concurrency limit is reached, new steps will continue to be queued and create a backlog to be processed.\nTypeScript Go Python\nCopy Copied\n```\ninngest .createFunction (\n{\nid : \"generate-ai-summary\" ,\nconcurrency : 10 ,\n} ,\n{ event : \"ai/summary.requested\" } ,\nasync ({ event , step }) => {\n// Your function handler here\n}\n);\n```",
      "char_count": 540,
      "token_count": 127,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_concurrency.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_concurrency.md",
        "file_name": "guides_concurrency.md",
        "file_size": 15337,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "556fe84453b576a5a0420112e397d1dabfde7a904513ae97e39d8182d4ac90f5",
        "author": null,
        "created_at": "2025-10-12T23:59:22.666268",
        "modified_at": "2025-10-12T23:59:22.666859",
        "page_count": null,
        "word_count": 2099,
        "extracted_at": "2025-10-13T20:03:39.323885",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 15,
        "token_count": 127,
        "has_context": true
      }
    },
    {
      "index": 5,
      "text": "Concurrency management\nHow to configure concurrency\nConcurrency keys (Multi-tenant concurrency)\nUse a concurrency\n```\nkey\n```\nexpression to apply the\n```\nlimit\n```\nto each unique value of key received. Within the Inngest system, this creates a\n**virtual queue**\nfor every unique value and limits concurrency to each.\nTypeScript Go Python\nCopy Copied\n```\ninngest .createFunction (\n{\nid : \"generate-ai-summary\" ,\nconcurrency : [\n{\nkey : \"event.data.account_id\" ,\nlimit : 10 ,\n} ,\n] ,\n} ,\n{ event : \"ai/summary.requested\" } ,\nasync ({ event , step }) => {\n}\n);\n```\nConcurrency keys are great for creating fair, multi-tenant systems. This can help prevent the noisy neighbor issue where one user triggers a lot of jobs and consumes far more resources that slow down your other users.",
      "char_count": 779,
      "token_count": 189,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_concurrency.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_concurrency.md",
        "file_name": "guides_concurrency.md",
        "file_size": 15337,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "556fe84453b576a5a0420112e397d1dabfde7a904513ae97e39d8182d4ac90f5",
        "author": null,
        "created_at": "2025-10-12T23:59:22.666268",
        "modified_at": "2025-10-12T23:59:22.666859",
        "page_count": null,
        "word_count": 2099,
        "extracted_at": "2025-10-13T20:03:39.323885",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 15,
        "token_count": 189,
        "has_context": true
      }
    },
    {
      "index": 6,
      "text": "Concurrency management\nHow to configure concurrency\nSharing limits across functions (scope)\nUsing the\n```\nscope\n```\noption, limits can be set across your entire Inngest account, shared across multiple functions. Here is an example of setting an\n```\n\"account\"\n```\nlevel limit for a\n*static*\n```\nkey\n```\nequal to\n```\n\"openai\"\n```\n. This will create a virtual queue using\n```\n\"openai\"\n```\nas the key. Any other functions using this same\n```\n\"openai\"\n```\nkey will consume from this same limit.\nTypeScript Go Python\nCopy Copied\n```\ninngest .createFunction (\n{\nid : \"generate-ai-summary\" ,\nconcurrency : [\n{\nscope : \"account\" ,\nkey : `\"openai\"` ,\nlimit : 60 ,\n} ,\n] ,\n} ,\n{ event : \"ai/summary.requested\" } ,\nasync ({ event , step }) => {\n}\n);\n```",
      "char_count": 741,
      "token_count": 208,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_concurrency.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_concurrency.md",
        "file_name": "guides_concurrency.md",
        "file_size": 15337,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "556fe84453b576a5a0420112e397d1dabfde7a904513ae97e39d8182d4ac90f5",
        "author": null,
        "created_at": "2025-10-12T23:59:22.666268",
        "modified_at": "2025-10-12T23:59:22.666859",
        "page_count": null,
        "word_count": 2099,
        "extracted_at": "2025-10-13T20:03:39.323885",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 15,
        "token_count": 208,
        "has_context": true
      }
    },
    {
      "index": 7,
      "text": "Concurrency management\nHow to configure concurrency\nCombining multiple concurrency limits\nEach SDK's concurrency option supports up to two limits. This is the most beneficial when combining limits, each with a different\n```\nscope\n```\n. Here is an example that combines two limits, one on the\n```\n\"account\"\n```\nscope and another on the\n```\n\"fn\"\n```\nlevel. Combining limits will create multiple virtual queues to limit concurrency. In the below function:\n- If there are 10 steps executing under the 'openai' key's virtual queue, any future runs will be blocked and will wait for existing runs to finish before executing.\n- If there are 5 steps executing under the 'openai' key and a single `event.data.account_id` enqueues 2 runs, the second run is limited by the `event.data.account_id` virtual queue and will wait before executing.\nTypeScript Go Python\nCopy Copied\n```\ninngest .createFunction (\n{\nid : \"unique-function-id\" ,\nconcurrency : [\n{\n// Use an account-level concurrency limit for this function, using the\n// \"openai\" key as a virtual queue.  Any other function which\n// runs using the same \"openai\"` key counts towards this limit.\nscope : \"account\" ,\nkey : `\"openai\"` ,\nlimit : 10 ,\n} ,\n{\n// Create another virtual concurrency queue for this function only.  This\n// limits all accounts to a single execution for this function, based off\n// of the `event.data.account_id` field.\n// NOTE - \"fn\" is the default scope, so we could omit this field.\nscope : \"fn\" ,\nkey : \"event.data.account_id\" ,\nlimit : 1 ,\n} ,\n] ,\n} ,\n{ event : \"ai/summary.requested\" } ,\nasync ({ event , step }) => {\n}\n);\n```\nIt's worth it to note that the\n```\n\"fn\"\n```\nscope is the default and is optional to include.",
      "char_count": 1692,
      "token_count": 420,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_concurrency.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_concurrency.md",
        "file_name": "guides_concurrency.md",
        "file_size": 15337,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "556fe84453b576a5a0420112e397d1dabfde7a904513ae97e39d8182d4ac90f5",
        "author": null,
        "created_at": "2025-10-12T23:59:22.666268",
        "modified_at": "2025-10-12T23:59:22.666859",
        "page_count": null,
        "word_count": 2099,
        "extracted_at": "2025-10-13T20:03:39.323885",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 15,
        "token_count": 420,
        "has_context": true
      }
    },
    {
      "index": 8,
      "text": "Concurrency management\nHow concurrency works\n**Concurrency works by limiting the number of steps executing at a single time.**\nWithin Inngest, execution is defined as \"an SDK running code\".\n**Calling**\n**```\nstep.sleep\n```**\n**,**\n**```\nstep.sleepUntil\n```**\n**,**\n**```\nstep.waitForEvent\n```**\n**, or**\n**```\nstep.invoke\n```**\n**does not count towards capacity limits**\n, as the SDK doesn't execute code while those steps wait. Because sleeping or waiting is common, concurrency\n*does not*\nlimit the number of functions in progress.  Instead, it limits the number of steps executing at any single time.\nSteps that are asynchronous actions,\n```\nstep.sleep\n```\n,\n```\nstep.sleepUntil\n```\n,\n```\nstep.waitForEvent\n```\n, and\n```\nstep.invoke\n```\ndo not contribute to the concurrency limit.\n**Queues are ordered from oldest to newest jobs (**\n[**FIFO**](https://en.wikipedia.org/wiki/FIFO)\n**)**\nacross the same function.  Ordering amongst different functions is not guaranteed.  This means that within a specific function, Inngest prioritizes finishing older functions above starting newer functions - even if the older functions continue to schedule new steps to run.  Different functions, however, compete for capacity, with runs on the most backlogged function much more likely (but not guaranteed) to be scheduled first.\nSome additional information:\n- The order of keys does not matter. Concurrency is limited by any key that reaches its limits.\n- You can specify multiple keys for the same scope, as long as the resulting `key` evaluates to a different string.",
      "char_count": 1559,
      "token_count": 348,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_concurrency.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_concurrency.md",
        "file_name": "guides_concurrency.md",
        "file_size": 15337,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "556fe84453b576a5a0420112e397d1dabfde7a904513ae97e39d8182d4ac90f5",
        "author": null,
        "created_at": "2025-10-12T23:59:22.666268",
        "modified_at": "2025-10-12T23:59:22.666859",
        "page_count": null,
        "word_count": 2099,
        "extracted_at": "2025-10-13T20:03:39.323885",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 15,
        "token_count": 348,
        "has_context": true
      }
    },
    {
      "index": 9,
      "text": "Concurrency management\nConcurrency control across specific steps in a function\nYou might need to set a different concurrency limit for a single step in a function. For example, within an AI flow you may have 10 pre-processing steps which can run with higher limits, and a single AI call with much lower limits.\nTo control concurrency on individual steps, extract the step into a new function with its\n*own*\nconcurrency controls, and invoke the new function using\n```\nstep.invoke\n```\n. This lets you combine concurrency controls and manage \"flow control\" in a clean, composable manner.",
      "char_count": 584,
      "token_count": 121,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_concurrency.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_concurrency.md",
        "file_name": "guides_concurrency.md",
        "file_size": 15337,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "556fe84453b576a5a0420112e397d1dabfde7a904513ae97e39d8182d4ac90f5",
        "author": null,
        "created_at": "2025-10-12T23:59:22.666268",
        "modified_at": "2025-10-12T23:59:22.666859",
        "page_count": null,
        "word_count": 2099,
        "extracted_at": "2025-10-13T20:03:39.323885",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 15,
        "token_count": 121,
        "has_context": true
      }
    },
    {
      "index": 10,
      "text": "Concurrency management\nHow global limits work\nWhile two functions can share different\n```\naccount\n```\nscoped limits, we strongly recommend that you use a global const with a single shared limit.\nYou may write two functions that define different levels for an 'account' scoped concurrency limit.  For example, function A may limit the \"ai\" capacity to 5, while function B limits the \"ai\" capacity to 50:\nTypeScript Go Python\nCopy Copied\n```\ninngest .createFunction (\n{\nid : \"func-a\" ,\nconcurrency : {\nscope : \"account\" ,\nkey : `\"openai\"` ,\nlimit : 5 ,\n} ,\n} ,\n{ event : \"ai/summary.requested\" } ,\nasync ({ event , step }) => {\n}\n);\n\ninngest .createFunction (\n{\nid : \"func-b\" ,\nconcurrency : {\nscope : \"account\" ,\nkey : `\"openai\"` ,\nlimit : 50 ,\n} ,\n} ,\n{ event : \"ai/summary.requested\" } ,\nasync ({ event , step }) => {\n}\n);\n```\nThis works in Inngest and is\n*not*\na conflict.  Instead, function A is limited any time there are 5 or more functions running in the 'openai' queue.  Function B, however, is limited when there are 50 or more items in the queue.  This means that function B has more capacity than function A, though both are limited and compete on the same virtual queue.\nBecause functions are FIFO, function runs are more likely to be worked on the older their jobs get (as the backlog grows).  If function A's jobs stay in the backlog longer than function B's jobs, it's likely that their jobs will be worked on as soon as capacity is free.  That said, function B will almost always have capacity before function A and may block function A's work.\n**While this works we strongly recommend that you use global constants for**\n**```\nenv\n```**\n**or**\n**```\naccount\n```**\n**level scopes, giving functions the same limit.**",
      "char_count": 1730,
      "token_count": 437,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_concurrency.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_concurrency.md",
        "file_name": "guides_concurrency.md",
        "file_size": 15337,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "556fe84453b576a5a0420112e397d1dabfde7a904513ae97e39d8182d4ac90f5",
        "author": null,
        "created_at": "2025-10-12T23:59:22.666268",
        "modified_at": "2025-10-12T23:59:22.666859",
        "page_count": null,
        "word_count": 2099,
        "extracted_at": "2025-10-13T20:03:39.323885",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 15,
        "token_count": 437,
        "has_context": true
      }
    },
    {
      "index": 11,
      "text": "Concurrency management\nLimitations\n- Concurrency limits the number of steps executing at a single time. It does not *yet* perform rate limiting over a given period of time.\n- Functions can specify up to 2 concurrency constraints at once\n- The maximum concurrency limit is defined by [your account's plan](\\pricing?ref=docs-concurrency)\n- Ordering amongst the same function is guaranteed (with the exception of retries)\n- Ordering amongst different functions is not guaranteed. Functions compete with each other randomly to be scheduled.",
      "char_count": 536,
      "token_count": 106,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_concurrency.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_concurrency.md",
        "file_name": "guides_concurrency.md",
        "file_size": 15337,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "556fe84453b576a5a0420112e397d1dabfde7a904513ae97e39d8182d4ac90f5",
        "author": null,
        "created_at": "2025-10-12T23:59:22.666268",
        "modified_at": "2025-10-12T23:59:22.666859",
        "page_count": null,
        "word_count": 2099,
        "extracted_at": "2025-10-13T20:03:39.323885",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 15,
        "token_count": 106,
        "has_context": true
      }
    },
    {
      "index": 12,
      "text": "Concurrency management\nConcurrency reference\n- Name `limit` Type number Required required Description The maximum number of concurrently running steps. A value of `0` or `undefined` is the equivalent of not setting a limit. The maximum value is dictated by [your account's plan](\\pricing?ref=docs-concurrency) .\n- Name `scope`\n- Name `key` Type string Required optional Description An expression which evaluates to a string given the triggering event. The string returned from the expression is used as the concurrency queue name. A key is required when setting an `env` or `account` level scope. Expressions are defined using the Common Expression Language (CEL) with the original event accessible using dot-notation. Read [our guide to writing expressions](\\docs\\guides\\writing-expressions) for more info. Examples:",
      "char_count": 817,
      "token_count": 169,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_concurrency.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_concurrency.md",
        "file_name": "guides_concurrency.md",
        "file_size": 15337,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "556fe84453b576a5a0420112e397d1dabfde7a904513ae97e39d8182d4ac90f5",
        "author": null,
        "created_at": "2025-10-12T23:59:22.666268",
        "modified_at": "2025-10-12T23:59:22.666859",
        "page_count": null,
        "word_count": 2099,
        "extracted_at": "2025-10-13T20:03:39.323885",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 15,
        "token_count": 169,
        "has_context": true
      }
    },
    {
      "index": 13,
      "text": "Concurrency management\nFurther examples\nRestricting parallel import jobs for a customer id\nIn this hypothetical system, customers can upload\n```\n.csv\n```\nfiles which each need to be processed and imported. We want to limit each customer to only one import job at a time so no two jobs are writing to a customer's data at a given time. We do this by setting a\n```\nlimit: 1\n```\nand a concurrency\n```\nkey\n```\nto the\n```\ncustomerId\n```\nwhich is included in every single event payload.\nInngest ensures that the concurrency (\n```\n1\n```\n) applies to each unique value for\n```\nevent.data.customerId\n```\n. This allows different customers to have functions running at the same exact time, but no given customer can have two functions running at once!\nTypeScript Go Python\nCopy Copied\n```\nexport const send = inngest .createFunction (\n{\nname : \"Process customer csv import\" ,\nid : \"process-customer-csv-import\" ,\nconcurrency : {\nlimit : 1 ,\nkey : `event.data.customerId` , // You can use any piece of data from the event payload\n} ,\n} ,\n{ event : \"csv/file.uploaded\" } ,\nasync ({ event , step }) => {\nawait step .run ( \"process-file\" , async () => {\nconst file = await bucket .fetch ( event . data .fileURI);\n// ...\n});\n\nreturn { message : \"success\" };\n}\n);\n```",
      "char_count": 1250,
      "token_count": 314,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_concurrency.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_concurrency.md",
        "file_name": "guides_concurrency.md",
        "file_size": 15337,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "556fe84453b576a5a0420112e397d1dabfde7a904513ae97e39d8182d4ac90f5",
        "author": null,
        "created_at": "2025-10-12T23:59:22.666268",
        "modified_at": "2025-10-12T23:59:22.666859",
        "page_count": null,
        "word_count": 2099,
        "extracted_at": "2025-10-13T20:03:39.323885",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 15,
        "token_count": 314,
        "has_context": true
      }
    },
    {
      "index": 14,
      "text": "Concurrency management\nTips\n- Configure [start timeouts](\\docs\\features\\inngest-functions\\cancellation\\cancel-on-timeouts) to prevent large backlogs with concurrency",
      "char_count": 165,
      "token_count": 36,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_concurrency.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_concurrency.md",
        "file_name": "guides_concurrency.md",
        "file_size": 15337,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "556fe84453b576a5a0420112e397d1dabfde7a904513ae97e39d8182d4ac90f5",
        "author": null,
        "created_at": "2025-10-12T23:59:22.666268",
        "modified_at": "2025-10-12T23:59:22.666859",
        "page_count": null,
        "word_count": 2099,
        "extracted_at": "2025-10-13T20:03:39.323885",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 15,
        "token_count": 36,
        "has_context": true
      }
    }
  ]
}