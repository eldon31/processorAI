{
  "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_middleware_examples.md",
  "title": "#### On this page",
  "num_chunks": 7,
  "total_chars": 8560,
  "chunks": [
    {
      "index": 0,
      "text": "On this page\n- [Example middleware](\\docs\\reference\\middleware\\examples#example-middleware)\n- [Cloudflare Workers AI](\\docs\\reference\\middleware\\examples#cloudflare-workers-ai)\n- [Common actions for every function](\\docs\\reference\\middleware\\examples#common-actions-for-every-function)\n- [Logging](\\docs\\reference\\middleware\\examples#logging)\n- [Prisma in function context](\\docs\\reference\\middleware\\examples#prisma-in-function-context)\n- [Other examples](\\docs\\reference\\middleware\\examples#other-examples)\nReferences\n[TypeScript SDK](\\docs\\reference\\typescript)\n[Middleware](\\docs\\reference\\middleware\\lifecycle)",
      "char_count": 615,
      "token_count": 152,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_middleware_examples.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_middleware_examples.md",
        "file_name": "reference_middleware_examples.md",
        "file_size": 9169,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "7a4fdf212bac163f8726bedac3dbccc8ed581326f0d4af94d821839c93c02eef",
        "author": null,
        "created_at": "2025-10-13T00:00:48.205117",
        "modified_at": "2025-10-13T00:00:48.205668",
        "page_count": null,
        "word_count": 1397,
        "extracted_at": "2025-10-13T20:04:35.470179",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 7,
        "token_count": 152,
        "has_context": true
      }
    },
    {
      "index": 1,
      "text": "Example middleware v2.0.0+\nThe following examples show how you might use middleware in some real-world scenarios.\n- [Cloudflare Workers AI](\\docs\\reference\\middleware\\examples#cloudflare-workers-ai)\n- [Common actions for every function](\\docs\\reference\\middleware\\examples#common-actions-for-every-function)\n- [Logging](\\docs\\reference\\middleware\\examples#logging)\n- [Prisma in function context](\\docs\\reference\\middleware\\examples#prisma-in-function-context)\n- [Cloudflare Workers & Hono environment variables](\\docs\\examples\\middleware\\cloudflare-workers-environment-variables)",
      "char_count": 579,
      "token_count": 134,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_middleware_examples.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_middleware_examples.md",
        "file_name": "reference_middleware_examples.md",
        "file_size": 9169,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "7a4fdf212bac163f8726bedac3dbccc8ed581326f0d4af94d821839c93c02eef",
        "author": null,
        "created_at": "2025-10-13T00:00:48.205117",
        "modified_at": "2025-10-13T00:00:48.205668",
        "page_count": null,
        "word_count": 1397,
        "extracted_at": "2025-10-13T20:04:35.470179",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 7,
        "token_count": 134,
        "has_context": true
      }
    },
    {
      "index": 2,
      "text": "Example middleware v2.0.0+\nCloudflare Workers AI\n[Workers AI](https://developers.cloudflare.com/workers-ai/)\nallows you to run machine learning models, on the Cloudflare network, from your own code, triggered by Inngest.\nTo use the\n```\n@cloudflare/ai\n```\npackage, you need access to the\n```\nenv\n```\nobject passed to a Workers route handler. This argument is usually abstracted away by a serve handler, but middleware can access arguments passed to the request.\nUse this along with\n[mutating function input](\\docs\\reference\\middleware\\typescript#mutating-input)\nto set a new\n```\nai\n```\nproperty that you can use within functions, like in the following example:\nCopy Copied\n```\nimport { InngestMiddleware } from \"inngest\" ;\n\ninterface Env {\n// If you set another name in wrangler.toml as the value for 'binding',\n// replace \"AI\" with the variable name you defined.\nAI : Ai ;\n}\n\nexport const cloudflareMiddleware = new InngestMiddleware ({\nname : \"Inngest: Workers AI\" ,\ninit : () => {\nreturn {\nonFunctionRun : ({ reqArgs }) => {\nconst [ ctx ] = reqArgs as [ Request , Env ];\nconst ai = ctx . env . AI\n\nreturn {\ntransformInput : () => {\nreturn { ctx : { ai } };\n} ,\n};\n} ,\n};\n} ,\n});\n```\nCopy Copied\n```\nimport { inngest } from \"./client\" ;\n\nexport default inngest .createFunction (\n{ id : \"hello-world\" } ,\n{ event : \"demo/event.sent\" } ,\nasync ({ ai }) => {\n// `ai` is typed and can be used directly or within a step\nconst response = await ai .run ( \"@cf/meta/llama-2-7b-chat-int8\" , {\nprompt : \"What is the origin of the phrase Hello, World\" ,\n});\n}\n);\n```",
      "char_count": 1556,
      "token_count": 419,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_middleware_examples.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_middleware_examples.md",
        "file_name": "reference_middleware_examples.md",
        "file_size": 9169,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "7a4fdf212bac163f8726bedac3dbccc8ed581326f0d4af94d821839c93c02eef",
        "author": null,
        "created_at": "2025-10-13T00:00:48.205117",
        "modified_at": "2025-10-13T00:00:48.205668",
        "page_count": null,
        "word_count": 1397,
        "extracted_at": "2025-10-13T20:04:35.470179",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 7,
        "token_count": 419,
        "has_context": true
      }
    },
    {
      "index": 3,
      "text": "Example middleware v2.0.0+\nCommon actions for every function\nYou likely reuse the same steps across many functions - whether it be fetching user data or sending an email, your app is hopefully full of reusable blocks of code.\nWe could add some middleware to pass these into any Inngest function, automatically wrapping them in\n```\nstep.run()\n```\nand allowing the code inside our function to feel a little bit cleaner.\nCopy Copied\n```\n/**\n* Pass to a client to provide a set of actions as steps to all functions, or to\n* a function to provide a set of actions as steps only to that function.\n*/\nconst inngest = new Inngest ({\nid : \"my-app\" ,\nmiddleware : [\ncreateActionsMiddleware ({\ngetUser (id : string ) {\nreturn db . user .get (id);\n} ,\n}) ,\n] ,\n});\n\ninngest .createFunction (\n{ id : \"user-data-dump\" } ,\n{ event : \"app/data.requested\" } ,\nasync ({ event , action: { getUser } }) => {\n// The first parameter is the step's options or ID\nconst user = await getUser ( \"get-user-details\" , event . data .userId);\n}\n);\n```\nCopy Copied\n```\nimport { InngestMiddleware , StepOptionsOrId } from \"inngest\" ;\n\n/**\n* Create a middleware that wraps a set of functions in step tooling, allowing\n* them to be invoked directly instead of using `step.run()`.\n*\n* This is useful for providing a set of common actions to a particular function\n* or to all functions created by a client.\n*/\nexport const createActionsMiddleware = < T extends Actions >(rawActions : T ) => {\nreturn new InngestMiddleware ({\nname : \"Inngest: Actions\" ,\ninit : () => {\nreturn {\nonFunctionRun : () => {\nreturn {\ntransformInput : ({ ctx: { step } }) => {\nconst action : FilterActions < T > = Object .entries (\nrawActions\n) .reduce ((acc , [key , value]) => {\nif ( typeof value !== \"function\" ) {\nreturn acc;\n}\n\nconst action = (\nidOrOptions : StepOptionsOrId ,\n... args : unknown []\n) => {\nreturn step .run (idOrOptions , () => value ( ... args));\n};\n\nreturn {\n... acc ,\n[key] : action ,\n};\n} , {} as FilterActions < T >);\n\nreturn {\nctx : { action } ,\n};\n} ,\n};\n} ,\n};\n} ,\n});\n};\n\ntype Actions = Record < string , unknown >;\n\n/**\n* Filter out all keys from `T` where the associated value does not match type\n* `U`.\n*/\ntype KeysNotOfType < T , U > = {\n[ P in keyof T ] : T [ P ] extends U ? never : P ;\n}[ keyof T ];\n\n/**\n* Given a set of generic objects, extract any top-level functions and\n* appropriately shim their types.\n*\n* We use this type to allow users to spread a set of functions into the\n* middleware without having to worry about non-function properties.\n*/\ntype FilterActions < Fns extends Record < string , any >> = {\n[ K in keyof Omit < Fns , KeysNotOfType < Fns , ( ... args : any []) => any >>] : (\nidOrOptions : StepOptionsOrId ,\n... args : Parameters < Fns [ K ]>\n) => Promise < Awaited < ReturnType < Fns [ K ]>>>;\n};\n```",
      "char_count": 2800,
      "token_count": 724,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_middleware_examples.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_middleware_examples.md",
        "file_name": "reference_middleware_examples.md",
        "file_size": 9169,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "7a4fdf212bac163f8726bedac3dbccc8ed581326f0d4af94d821839c93c02eef",
        "author": null,
        "created_at": "2025-10-13T00:00:48.205117",
        "modified_at": "2025-10-13T00:00:48.205668",
        "page_count": null,
        "word_count": 1397,
        "extracted_at": "2025-10-13T20:04:35.470179",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 7,
        "token_count": 724,
        "has_context": true
      }
    },
    {
      "index": 4,
      "text": "Example middleware v2.0.0+\nLogging\nThe following shows you how you can create a logger middleware and customize it to your needs.\nIt is based on the\n[built-in logger middleware](\\docs\\guides\\logging)\nin the SDK, and hope it gives you an idea of what you can do if the built-in logger doesn't meet your needs.\nCopy Copied\n```\nnew InngestMiddleware ({\nname : \"Inngest: Logger\" ,\ninit ({ client }) {\nreturn {\nonFunctionRun (arg) {\nconst { ctx } = arg;\nconst metadata = {\nrunID : ctx .runId ,\neventName : ctx . event .name ,\nfunctionName : arg . fn .name ,\n};\n\nlet providedLogger : Logger = client[ \"logger\" ];\n// create a child logger if the provided logger has child logger implementation\ntry {\nif ( \"child\" in providedLogger) {\ntype ChildLoggerFn = (\nmetadata : Record < string , unknown >\n) => Logger ;\nprovidedLogger = ( providedLogger .child as ChildLoggerFn )(metadata)\n}\n} catch (err) {\nconsole .error ( 'failed to create \"childLogger\" with error: ' , err);\n// no-op\n}\nconst logger = new ProxyLogger (providedLogger);\n\nreturn {\ntransformInput () {\nreturn {\nctx : {\n/**\n* The passed in logger from the user.\n* Defaults to a console logger if not provided.\n*/\nlogger ,\n} ,\n};\n} ,\nbeforeExecution () {\nlogger .enable ();\n} ,\ntransformOutput ({ result: { error } }) {\nif (error) {\nlogger .error (error);\n}\n} ,\nasync beforeResponse () {\nawait logger .flush ();\n} ,\n};\n} ,\n};\n} ,\n})\n```",
      "char_count": 1384,
      "token_count": 354,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_middleware_examples.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_middleware_examples.md",
        "file_name": "reference_middleware_examples.md",
        "file_size": 9169,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "7a4fdf212bac163f8726bedac3dbccc8ed581326f0d4af94d821839c93c02eef",
        "author": null,
        "created_at": "2025-10-13T00:00:48.205117",
        "modified_at": "2025-10-13T00:00:48.205668",
        "page_count": null,
        "word_count": 1397,
        "extracted_at": "2025-10-13T20:04:35.470179",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 7,
        "token_count": 354,
        "has_context": true
      }
    },
    {
      "index": 5,
      "text": "Example middleware v2.0.0+\nPrisma in function context\nThe following is an example of adding a\n[Prisma](https://www.prisma.io/?ref=inngest)\nclient to all Inngest functions, allowing them immediate access without needing to create the client themselves.\nWhile this example uses Prisma, it serves as a good example of using the\n[onFunctionRun -> input](\\docs\\reference\\middleware\\lifecycle#on-function-run-lifecycle)\nhook to mutate function input to perform crucial setup for your functions and keep them to just business logic.\n💡 Types are inferred from middleware outputs, so your Inngest functions will see an appropriately-typed\n```\nprisma\n```\nproperty in their input.\nCopy Copied\n```\ninngest .createFunction (\n{ name : \"Example\" } ,\n{ event : \"app/user.loggedin\" } ,\nasync ({ prisma }) => {\nawait prisma . auditTrail .create ( /* ... */ );\n}\n);\n```\nCopy Copied\n```\nimport { PrismaClient } from \"@prisma/client\" ;\n\nconst prismaMiddleware = new InngestMiddleware ({\nname : \"Prisma Middleware\" ,\ninit () {\nconst prisma = new PrismaClient ();\n\nreturn {\nonFunctionRun (ctx) {\nreturn {\ntransformInput (ctx) {\nreturn {\n// Anything passed via `ctx` will be merged with the function's arguments\nctx : {\nprisma ,\n} ,\n};\n} ,\n};\n} ,\n};\n} ,\n});\n```\nCheck out\n[Common actions for every function](\\docs\\reference\\middleware\\examples#common-actions-for-every-function)\nto see how this technique can be used to create steps for all of your unique logic.",
      "char_count": 1438,
      "token_count": 359,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_middleware_examples.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_middleware_examples.md",
        "file_name": "reference_middleware_examples.md",
        "file_size": 9169,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "7a4fdf212bac163f8726bedac3dbccc8ed581326f0d4af94d821839c93c02eef",
        "author": null,
        "created_at": "2025-10-13T00:00:48.205117",
        "modified_at": "2025-10-13T00:00:48.205668",
        "page_count": null,
        "word_count": 1397,
        "extracted_at": "2025-10-13T20:04:35.470179",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 7,
        "token_count": 359,
        "has_context": true
      }
    },
    {
      "index": 6,
      "text": "Example middleware v2.0.0+\nCloudflare Workers & Hono middleware\n[Access environment variables within Inngest functions.](\\docs\\examples\\middleware\\cloudflare-workers-environment-variables)",
      "char_count": 188,
      "token_count": 43,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_middleware_examples.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_middleware_examples.md",
        "file_name": "reference_middleware_examples.md",
        "file_size": 9169,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "7a4fdf212bac163f8726bedac3dbccc8ed581326f0d4af94d821839c93c02eef",
        "author": null,
        "created_at": "2025-10-13T00:00:48.205117",
        "modified_at": "2025-10-13T00:00:48.205668",
        "page_count": null,
        "word_count": 1397,
        "extracted_at": "2025-10-13T20:04:35.470179",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 7,
        "token_count": 43,
        "has_context": true
      }
    }
  ]
}