{
  "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_clerk-webhook-events.md",
  "title": "#### On this page",
  "num_chunks": 10,
  "total_chars": 8478,
  "chunks": [
    {
      "index": 0,
      "text": "On this page\n- [Handling Clerk webhook events](\\docs\\guides\\clerk-webhook-events#handling-clerk-webhook-events)\n- [Setting up the Clerk webhook](\\docs\\guides\\clerk-webhook-events#setting-up-the-clerk-webhook)\n- [Creating a function to sync a new user to a database](\\docs\\guides\\clerk-webhook-events#creating-a-function-to-sync-a-new-user-to-a-database)\n- [Creating a function to send a welcome email](\\docs\\guides\\clerk-webhook-events#creating-a-function-to-send-a-welcome-email)\n- [Sending a delayed follow-up email](\\docs\\guides\\clerk-webhook-events#sending-a-delayed-follow-up-email)\n- [Next steps](\\docs\\guides\\clerk-webhook-events#next-steps)\nFeatures\n[Events & Triggers](\\docs\\features\\events-triggers)",
      "char_count": 709,
      "token_count": 197,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_clerk-webhook-events.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_clerk-webhook-events.md",
        "file_name": "guides_clerk-webhook-events.md",
        "file_size": 8690,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "457bb528415796173b105a4852f681e866c1879e233edc5df3b2f4d87bec0ffe",
        "author": null,
        "created_at": "2025-10-12T23:59:20.998874",
        "modified_at": "2025-10-12T23:59:20.998874",
        "page_count": null,
        "word_count": 1180,
        "extracted_at": "2025-10-13T20:03:37.671665",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 10,
        "token_count": 197,
        "has_context": true
      }
    },
    {
      "index": 1,
      "text": "Handling Clerk webhook events\nClerk logo and graphic showing Clerk webhook events\nThird party authentication providers like\n[Clerk](https://clerk.com/)\nare a fantastic way to add auth, user management, and security features to your application. They also provide drop-in components that can get your auth set up quickly. However, with an external source of truth for auth, you'll often need to:\n- Sync data from Clerk with your database,\n- Provision resources for new accounts, or\n- Trigger other work from events (such as emails).\nThis page offers a guide on setting up a Clerk webhook with Inngest and using Clerk events within Inngest functions.",
      "char_count": 648,
      "token_count": 136,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_clerk-webhook-events.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_clerk-webhook-events.md",
        "file_name": "guides_clerk-webhook-events.md",
        "file_size": 8690,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "457bb528415796173b105a4852f681e866c1879e233edc5df3b2f4d87bec0ffe",
        "author": null,
        "created_at": "2025-10-12T23:59:20.998874",
        "modified_at": "2025-10-12T23:59:20.998874",
        "page_count": null,
        "word_count": 1180,
        "extracted_at": "2025-10-13T20:03:37.671665",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 10,
        "token_count": 136,
        "has_context": true
      }
    },
    {
      "index": 2,
      "text": "Handling Clerk webhook events\nSetting up the Clerk webhook\nClerk enables\n[sending events to a webhook endpoint](https://clerk.com/docs/integrations/webhooks/overview)\nwhen certain events occur. Inngest's\n[webhook endpoints](\\docs\\platform\\webhooks)\nallow you to receive these events within your account just like\n[events that you send](\\docs\\events)\nfrom your own application.\nTo set up the Clerk webhook, open the Clerk dashboard and navigate to the \"Webhooks\" page. Next, select the \"Add Endpoint\" button.\nThe Webhooks page in the Clerk Dashboard. A red arrow points to the button for Add Endpoint.\nOn the next page, select the \"Transformation\" template tab and the Inngest template, then click on the \"Connect to Inngest\" button.\nThe Webhooks page in the Clerk Dashboard showing the Inngest transformation template. Red arrows point to the Transformation Template tab, the Inngest template, and the Connect to Inngest button.\nA popup window will appear to complete the setup. Select \"Approve\" to create the webhook.\nThe Inngest permissions popup window showing the Approve button.\nAfter the popup window disappears, the Webhooks page will now display \"Connected\" with the webhook URL underneath. There is one more step to complete setup.\nThe Webhooks page in the Clerk Dashboard showing a connected Inngest account. A red arrow points to the Connected button.\nTo complete the setup, scroll down and select \"Create\".\nThe Webhooks page in the Clerk Dashboard showing the end of the page to create a new endpoint. A red arrow points to the Create button.\nYou'll be redirected to the new endpoint. In your Inngest dashboard, you will see a new webhook created in your account's\n[production environment](https://app.inngest.com/env/production/manage/webhooks)\n.",
      "char_count": 1759,
      "token_count": 388,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_clerk-webhook-events.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_clerk-webhook-events.md",
        "file_name": "guides_clerk-webhook-events.md",
        "file_size": 8690,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "457bb528415796173b105a4852f681e866c1879e233edc5df3b2f4d87bec0ffe",
        "author": null,
        "created_at": "2025-10-12T23:59:20.998874",
        "modified_at": "2025-10-12T23:59:20.998874",
        "page_count": null,
        "word_count": 1180,
        "extracted_at": "2025-10-13T20:03:37.671665",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 10,
        "token_count": 388,
        "has_context": true
      }
    },
    {
      "index": 3,
      "text": "Handling Clerk webhook events\nCreating a function to sync a new user to a database\nOften, one key part of integrating with an auth provider like\n[Clerk](https://clerk.com/)\nis handling asynchronous updates with a webhook.\nSuppose you need to write a function which will insert a new user into the database which will be triggered whenever\n```\nclerk/user.created\n```\nevent occurs. You would use the\n```\ninngest.createFunction()\n```\nmethod, like in the example below:",
      "char_count": 465,
      "token_count": 106,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_clerk-webhook-events.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_clerk-webhook-events.md",
        "file_name": "guides_clerk-webhook-events.md",
        "file_size": 8690,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "457bb528415796173b105a4852f681e866c1879e233edc5df3b2f4d87bec0ffe",
        "author": null,
        "created_at": "2025-10-12T23:59:20.998874",
        "modified_at": "2025-10-12T23:59:20.998874",
        "page_count": null,
        "word_count": 1180,
        "extracted_at": "2025-10-13T20:03:37.671665",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 10,
        "token_count": 106,
        "has_context": true
      }
    },
    {
      "index": 4,
      "text": "Handling Clerk webhook events\nCreating a function to sync a new user to a database\nsrc/inngest/sync-user.ts\nCopy Copied\n```\nconst syncUser = inngest .createFunction (\n{ id : 'sync-user-from-clerk' } ,\n{ event : 'clerk/user.created' } ,\nasync ({ event }) => {\n// The event payload's data will be the Clerk User json object\nconst { user } = event .data;\nconst { id , first_name , last_name } = user;\nconst email = user . email_addresses .find (e =>\ne .id === user .primary_email_address_id\n).email;\nawait database . users .insert ({ id , email , first_name , last_name });\n}\n)\n```\nThe\n```\nevent\n```\nobject contains all of the relevant data for the event. The\n```\nevent.data\n```\nwill match the\n```\ndata\n```\nobject from the standard Clerk webhook\n[payload structure](https://clerk.com/docs/integrations/webhooks/overview#payload-structure)\n. With this\n```\nclerk/user.created\n```\nevent, the\n```\nevent.data\n```\nwill be a Clerk User json object.\nAs you can see, you can choose which events you want to handle with each function. You might write a separate function for\n```\nclerk/user.updated\n```\nand\n```\nclerk/user.deleted\n```\nhandling the entire lifecycle end to end.\nNote that multiple functions can also listen to the same event. This pattern is called \"\n[fan-out](\\docs\\guides\\fan-out-jobs)\n.\"",
      "char_count": 1290,
      "token_count": 341,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_clerk-webhook-events.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_clerk-webhook-events.md",
        "file_name": "guides_clerk-webhook-events.md",
        "file_size": 8690,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "457bb528415796173b105a4852f681e866c1879e233edc5df3b2f4d87bec0ffe",
        "author": null,
        "created_at": "2025-10-12T23:59:20.998874",
        "modified_at": "2025-10-12T23:59:20.998874",
        "page_count": null,
        "word_count": 1180,
        "extracted_at": "2025-10-13T20:03:37.671665",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 10,
        "token_count": 341,
        "has_context": true
      }
    },
    {
      "index": 5,
      "text": "Handling Clerk webhook events\nCreating a function to send a welcome email\nOften, applications need to perform additional tasks when a new user is created, like send a welcome email with tips and useful information.\nWhile it is possible to add this logic at the end of your sync function as seen in the\n[previous section](\\docs\\guides\\clerk-webhook-events#creating-a-function-to-sync-a-new-user-to-a-database)\n, it's better to decouple unrelated tasks into different functions so issues with one task do not affect the other ones. For example, if your email fails to send, it should not affect starting a trial for that user in Stripe.\nYou can make use of the fact that with Inngest, each function has\n[automatic retries](\\docs\\functions\\retries)\n, so only the code that has issues is re-run.\nThe code below creates another function using the same\n```\nclerk/user.created\n```\nevent and adds the logic to send the welcome email:",
      "char_count": 925,
      "token_count": 207,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_clerk-webhook-events.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_clerk-webhook-events.md",
        "file_name": "guides_clerk-webhook-events.md",
        "file_size": 8690,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "457bb528415796173b105a4852f681e866c1879e233edc5df3b2f4d87bec0ffe",
        "author": null,
        "created_at": "2025-10-12T23:59:20.998874",
        "modified_at": "2025-10-12T23:59:20.998874",
        "page_count": null,
        "word_count": 1180,
        "extracted_at": "2025-10-13T20:03:37.671665",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 10,
        "token_count": 207,
        "has_context": true
      }
    },
    {
      "index": 6,
      "text": "Handling Clerk webhook events\nCreating a function to send a welcome email\nsrc/inngest/send-welcome-email.ts\nCopy Copied\n```\nconst sendWelcomeEmail = inngest .createFunction (\n{ id : 'send-welcome-email' } ,\n{ event : 'clerk/user.created' } ,\nasync ({ event }) => {\nconst { user } = event .data;\nconst { first_name } = user;\nconst email = user . email_addresses .find (e =>\ne .id === user .primary_email_address_id\n).email;\nawait emails .sendWelcomeEmail ({ email , first_name });\n}\n)\n```\nNow, you have a function that utilizes the same Clerk webhook event for another purpose. Clerk webhook events can be used for all sorts of application lifecycle use cases. For example, adding users to a marketing email list, starting a Stripe trial, or provisioning new account resources.",
      "char_count": 776,
      "token_count": 183,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_clerk-webhook-events.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_clerk-webhook-events.md",
        "file_name": "guides_clerk-webhook-events.md",
        "file_size": 8690,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "457bb528415796173b105a4852f681e866c1879e233edc5df3b2f4d87bec0ffe",
        "author": null,
        "created_at": "2025-10-12T23:59:20.998874",
        "modified_at": "2025-10-12T23:59:20.998874",
        "page_count": null,
        "word_count": 1180,
        "extracted_at": "2025-10-13T20:03:37.671665",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 10,
        "token_count": 183,
        "has_context": true
      }
    },
    {
      "index": 7,
      "text": "Handling Clerk webhook events\nCreating a function to send a welcome email\nSending a delayed follow-up email\nTo send a follow-up email, you can use the\n[```\nstep.run()\n```](\\docs\\reference\\functions\\step-run)\n. This method will encapsulate specific code that will be automatically retried ensuring that issues with one part of your function don't force the entire function to re-run. Additionally, you will extend the functionality with\n[```\nstep.sleep()\n```](\\docs\\reference\\functions\\step-sleep)\n.\nThe code below sends a welcome email, then uses\n```\nstep.sleep()\n```\nto wait for three days before sending another email offering a free trial:",
      "char_count": 642,
      "token_count": 145,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_clerk-webhook-events.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_clerk-webhook-events.md",
        "file_name": "guides_clerk-webhook-events.md",
        "file_size": 8690,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "457bb528415796173b105a4852f681e866c1879e233edc5df3b2f4d87bec0ffe",
        "author": null,
        "created_at": "2025-10-12T23:59:20.998874",
        "modified_at": "2025-10-12T23:59:20.998874",
        "page_count": null,
        "word_count": 1180,
        "extracted_at": "2025-10-13T20:03:37.671665",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 10,
        "token_count": 145,
        "has_context": true
      }
    },
    {
      "index": 8,
      "text": "Handling Clerk webhook events\nCreating a function to send a welcome email\nsrc/inngest/send-welcome-email.ts\nCopy Copied\n```\nconst sendWelcomeEmail = inngest .createFunction (\n{ id : 'send-welcome-email' } ,\n{ event : 'clerk/user.created' } ,\nasync ({ event , step }) => {\nconst { user } = event .data;\nconst { first_name } = user;\nconst email = user . email_addresses .find (e =>\ne .id === user .primary_email_address_id\n).email;\n\n// Wrapping each distinct task in step.run() ensures that each\n// will be retried automatically on error and will not be re-run\nawait step .run ( 'welcome-email' , async () => {\nawait emails .sendWelcomeEmail ({ email , first_name })\n});\n\n// wait 3 days before second email\nawait step .sleep ( 'wait-3-days' , '3 days' );\n\nawait step .run ( 'trial-offer-email' , async () => {\nawait emails .sendTrialOfferEmail ({ email , first_name })\n});\n}\n)\n```",
      "char_count": 878,
      "token_count": 230,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_clerk-webhook-events.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_clerk-webhook-events.md",
        "file_name": "guides_clerk-webhook-events.md",
        "file_size": 8690,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "457bb528415796173b105a4852f681e866c1879e233edc5df3b2f4d87bec0ffe",
        "author": null,
        "created_at": "2025-10-12T23:59:20.998874",
        "modified_at": "2025-10-12T23:59:20.998874",
        "page_count": null,
        "word_count": 1180,
        "extracted_at": "2025-10-13T20:03:37.671665",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 10,
        "token_count": 230,
        "has_context": true
      }
    },
    {
      "index": 9,
      "text": "Handling Clerk webhook events\nNext steps\nTo continue learning about how to get the most out of Clerk webhook events, check out the following:\n- Platform guide: [Consuming webhooks](\\docs\\platform\\webhooks)\n- Guide: [Fan-out (one-to-many)](\\docs\\guides\\fan-out-jobs)\n- Guide: [Parallel steps](\\docs\\guides\\step-parallelism)\n- Reference: [`step.run()`](\\docs\\reference\\functions\\step-run)",
      "char_count": 386,
      "token_count": 103,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_clerk-webhook-events.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_clerk-webhook-events.md",
        "file_name": "guides_clerk-webhook-events.md",
        "file_size": 8690,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "457bb528415796173b105a4852f681e866c1879e233edc5df3b2f4d87bec0ffe",
        "author": null,
        "created_at": "2025-10-12T23:59:20.998874",
        "modified_at": "2025-10-12T23:59:20.998874",
        "page_count": null,
        "word_count": 1180,
        "extracted_at": "2025-10-13T20:03:37.671665",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 10,
        "token_count": 103,
        "has_context": true
      }
    }
  ]
}