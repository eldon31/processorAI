{
  "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\examples_fetch.md",
  "title": "Fetch: performing API requests or fetching data TypeScript only",
  "num_chunks": 7,
  "total_chars": 4754,
  "chunks": [
    {
      "index": 0,
      "text": "On this page\n- [Fetch: performing API requests or fetching data](\\docs\\examples\\fetch#fetch-performing-api-requests-or-fetching-data)\n- [Getting started with step.fetch()](\\docs\\examples\\fetch#getting-started-with-step-fetch)\n- [Parallelize HTTP requests with step.fetch()](\\docs\\examples\\fetch#parallelize-http-requests-with-step-fetch)\n- [Make 3rd party library HTTP requests durable with the fetch() utility](\\docs\\examples\\fetch#make-3rd-party-library-http-requests-durable-with-the-fetch-utility)\n[Examples](\\docs\\examples)",
      "char_count": 528,
      "token_count": 132,
      "metadata": {
        "title": "Fetch: performing API requests or fetching data TypeScript only",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\examples_fetch.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\examples_fetch.md",
        "file_name": "examples_fetch.md",
        "file_size": 4776,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "1226ae43eb04a34bbe986fc9d57301f77c418bf96c3304763804a39e14dd2c33",
        "author": null,
        "created_at": "2025-10-12T23:58:26.308198",
        "modified_at": "2025-10-12T23:58:26.308384",
        "page_count": null,
        "word_count": 575,
        "extracted_at": "2025-10-13T20:03:14.332427",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 7,
        "token_count": 132,
        "has_context": true
      }
    },
    {
      "index": 1,
      "text": "Fetch: performing API requests or fetching data TypeScript only\nThe Inngest TypeScript SDK provides a\n```\nstep.fetch()\n```\nAPI and a\n```\nfetch()\n```\nutility, enabling you to make requests to third-party APIs or fetch data in a durable way by offloading them to the Inngest Platform.\nFor more information on how Fetch works, see the\n[Fetch documentation](\\docs\\features\\inngest-functions\\steps-workflows\\fetch)\n.",
      "char_count": 411,
      "token_count": 98,
      "metadata": {
        "title": "Fetch: performing API requests or fetching data TypeScript only",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\examples_fetch.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\examples_fetch.md",
        "file_name": "examples_fetch.md",
        "file_size": 4776,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "1226ae43eb04a34bbe986fc9d57301f77c418bf96c3304763804a39e14dd2c33",
        "author": null,
        "created_at": "2025-10-12T23:58:26.308198",
        "modified_at": "2025-10-12T23:58:26.308384",
        "page_count": null,
        "word_count": 575,
        "extracted_at": "2025-10-13T20:03:14.332427",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 7,
        "token_count": 98,
        "has_context": true
      }
    },
    {
      "index": 2,
      "text": "Fetch: performing API requests or fetching data TypeScript only\nGetting started with step.fetch()\nThe\n```\nstep.fetch()\n```\nAPI enables you to make durable HTTP requests while offloading them to the Inngest Platform, saving you compute and improving reliability:",
      "char_count": 261,
      "token_count": 52,
      "metadata": {
        "title": "Fetch: performing API requests or fetching data TypeScript only",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\examples_fetch.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\examples_fetch.md",
        "file_name": "examples_fetch.md",
        "file_size": 4776,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "1226ae43eb04a34bbe986fc9d57301f77c418bf96c3304763804a39e14dd2c33",
        "author": null,
        "created_at": "2025-10-12T23:58:26.308198",
        "modified_at": "2025-10-12T23:58:26.308384",
        "page_count": null,
        "word_count": 575,
        "extracted_at": "2025-10-13T20:03:14.332427",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 7,
        "token_count": 52,
        "has_context": true
      }
    },
    {
      "index": 3,
      "text": "Fetch: performing API requests or fetching data TypeScript only\nGetting started with step.fetch()\nsrc/inngest/functions.ts\nCopy Copied\n```\nimport { inngest } from \"./client\" ;\n\nexport const retrieveTextFile = inngest .createFunction (\n{ id : \"retrieveTextFile\" } ,\n{ event : \"textFile/retrieve\" } ,\nasync ({ step }) => {\n// The fetching of the text file is offloaded to the Inngest Platform\nconst response = await step .fetch (\n\"https://example-files.online-convert.com/document/txt/example.txt\"\n);\n\n// The Inngest function run is resumed when the HTTP request is complete\nawait step .run ( \"extract-text\" , async () => {\nconst text = await response .text ();\nconst exampleOccurences = text .match ( /example/ g );\nreturn exampleOccurences ?. length ;\n});\n}\n);\n```\n```\nstep.fetch()\n```\ntakes the same arguments as the\n[native](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch)\n[```\nfetch\n```](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch)\n[API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch)\n.",
      "char_count": 1066,
      "token_count": 269,
      "metadata": {
        "title": "Fetch: performing API requests or fetching data TypeScript only",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\examples_fetch.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\examples_fetch.md",
        "file_name": "examples_fetch.md",
        "file_size": 4776,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "1226ae43eb04a34bbe986fc9d57301f77c418bf96c3304763804a39e14dd2c33",
        "author": null,
        "created_at": "2025-10-12T23:58:26.308198",
        "modified_at": "2025-10-12T23:58:26.308384",
        "page_count": null,
        "word_count": 575,
        "extracted_at": "2025-10-13T20:03:14.332427",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 7,
        "token_count": 269,
        "has_context": true
      }
    },
    {
      "index": 4,
      "text": "Fetch: performing API requests or fetching data TypeScript only\nClone this example on GitHub\n[Check out this complete](https://github.com/inngest/inngest-js/tree/main/examples/node-step-fetch/)\n[```\nstep.fetch()\n```](https://github.com/inngest/inngest-js/tree/main/examples/node-step-fetch/)\n[example on GitHub.](https://github.com/inngest/inngest-js/tree/main/examples/node-step-fetch/)",
      "char_count": 387,
      "token_count": 91,
      "metadata": {
        "title": "Fetch: performing API requests or fetching data TypeScript only",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\examples_fetch.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\examples_fetch.md",
        "file_name": "examples_fetch.md",
        "file_size": 4776,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "1226ae43eb04a34bbe986fc9d57301f77c418bf96c3304763804a39e14dd2c33",
        "author": null,
        "created_at": "2025-10-12T23:58:26.308198",
        "modified_at": "2025-10-12T23:58:26.308384",
        "page_count": null,
        "word_count": 575,
        "extracted_at": "2025-10-13T20:03:14.332427",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 7,
        "token_count": 91,
        "has_context": true
      }
    },
    {
      "index": 5,
      "text": "Fetch: performing API requests or fetching data TypeScript only\nParallelize HTTP requests with step.fetch()\n```\nstep.fetch()\n```\nshares all the benefits of\n```\nstep.run()\n```\n, including the ability to parallelize requests using\n```\nPromise.all()\n```\n:\nCopy Copied\n```\nconst processFiles = inngest .createFunction (\n{ id : \"process-files\" , concurrency : 10 } ,\n{ event : \"files/process\" } ,\nasync ({ step , event }) => {\n// All requests will be offloaded and processed in parallel while matching the concurrency limit\nconst responses = await Promise .all ( event . data . files .map ( async (file) => {\nreturn step .fetch ( `https://api.example.com/files/ ${ file .id } ` )\n}))\n\n// Your Inngest function is resumed here with the responses\nawait step .run ( \"process-file\" , async (file) => {\nconst body = await response .json ()\n// body.files\n})\n}\n)\n```\nNote that\n```\nstep.fetch()\n```\n, like all other\n```\nstep\n```\nAPIs, matches your function's configuration such as\n[concurrency](\\docs\\guides\\concurrency)\nor\n[throttling](\\docs\\guides\\throttling)\n.",
      "char_count": 1050,
      "token_count": 275,
      "metadata": {
        "title": "Fetch: performing API requests or fetching data TypeScript only",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\examples_fetch.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\examples_fetch.md",
        "file_name": "examples_fetch.md",
        "file_size": 4776,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "1226ae43eb04a34bbe986fc9d57301f77c418bf96c3304763804a39e14dd2c33",
        "author": null,
        "created_at": "2025-10-12T23:58:26.308198",
        "modified_at": "2025-10-12T23:58:26.308384",
        "page_count": null,
        "word_count": 575,
        "extracted_at": "2025-10-13T20:03:14.332427",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 7,
        "token_count": 275,
        "has_context": true
      }
    },
    {
      "index": 6,
      "text": "Fetch: performing API requests or fetching data TypeScript only\nMake 3rd party library HTTP requests durable with the fetch() utility\nInngest's\n```\nfetch()\n```\nutility can be passed as a custom fetch handler to make all the requests made by a 3rd party library durable.\nFor example, you can pass the\n```\nfetch()\n```\nutility to the AI SDK or the OpenAI libraries:\nAI SDK OpenAI SDK\nCopy Copied\n```\nimport { fetch as inngestFetch } from 'inngest' ;\nimport { generateText } from 'ai' ;\nimport { createAnthropic } from '@ai-sdk/anthropic' ;\n\n// Pass the Inngest fetch utility to the AI SDK's model constructor:\nconst anthropic = createAnthropic ({\nfetch : inngestFetch ,\n});\n\nconst weatherFunction = inngest .createFunction (\n{ id : \"weather-function\" } ,\n{ event : \"weather/get\" } ,\nasync ({ step }) => {\n// This request is offloaded to the Inngest platform\n// and it also retries automatically if it fails!\nconst response = await generateText ({\nmodel : anthropic ( 'claude-3-5-sonnet-20240620' ) ,\nprompt : `What's the weather in London?` ,\n});\n}\n)\n```",
      "char_count": 1051,
      "token_count": 279,
      "metadata": {
        "title": "Fetch: performing API requests or fetching data TypeScript only",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\examples_fetch.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\examples_fetch.md",
        "file_name": "examples_fetch.md",
        "file_size": 4776,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "1226ae43eb04a34bbe986fc9d57301f77c418bf96c3304763804a39e14dd2c33",
        "author": null,
        "created_at": "2025-10-12T23:58:26.308198",
        "modified_at": "2025-10-12T23:58:26.308384",
        "page_count": null,
        "word_count": 575,
        "extracted_at": "2025-10-13T20:03:14.332427",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 7,
        "token_count": 279,
        "has_context": true
      }
    }
  ]
}