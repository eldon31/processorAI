{
  "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_error-retries_inngest-errors.md",
  "title": "Inngest Errors",
  "num_chunks": 9,
  "total_chars": 6013,
  "chunks": [
    {
      "index": 0,
      "text": "Inngest Errors\nInngest automatically handles errors and retries for you. You can use standard errors or use included Inngest errors to control how Inngest handles errors.\nTypeScript Go Python",
      "char_count": 191,
      "token_count": 41,
      "metadata": {
        "title": "Inngest Errors",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_error-retries_inngest-errors.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_error-retries_inngest-errors.md",
        "file_name": "features_inngest-functions_error-retries_inngest-errors.md",
        "file_size": 6846,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "d7992332a91adbc071b1f8ca1ca2ceec3639564bc68704460279ee6c5fcce6e3",
        "author": null,
        "created_at": "2025-10-12T23:58:48.926312",
        "modified_at": "2025-10-12T23:58:48.926312",
        "page_count": null,
        "word_count": 1019,
        "extracted_at": "2025-10-13T20:03:22.459462",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 9,
        "token_count": 41,
        "has_context": true
      }
    },
    {
      "index": 1,
      "text": "Inngest Errors\nStandard errors\nAll\n```\nError\n```\nobjects are handled by Inngest and\n[retried automatically](\\docs\\features\\inngest-functions\\error-retries\\retries)\n. This includes all standard errors like\n```\nTypeError\n```\nand custom errors that extend the\n```\nError\n```\nclass. You can throw errors in the function handler or within a step.\nCopy Copied\n```\nexport default inngest .createFunction (\n{ id : \"import-item-data\" } ,\n{ event : \"store/import.requested\" } ,\nasync ({ event }) => {\n\n// throwing a standard error\nif ( ! event .itemId) {\nthrow new Error ( \"Item ID is required\" );\n}\n\n// throwing an error within a step\nconst item = await step .run ( 'fetch-item' , async () => {\nconst response = await fetch ( `https://api.ecommerce.com/items/ ${ event .itemId } ` );\nif ( response .status === 500 ) {\nthrow new Error ( \"Failed to fetch item from ecommerce API\" );\n}\n// ...\n});\n}\n);\n```",
      "char_count": 892,
      "token_count": 239,
      "metadata": {
        "title": "Inngest Errors",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_error-retries_inngest-errors.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_error-retries_inngest-errors.md",
        "file_name": "features_inngest-functions_error-retries_inngest-errors.md",
        "file_size": 6846,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "d7992332a91adbc071b1f8ca1ca2ceec3639564bc68704460279ee6c5fcce6e3",
        "author": null,
        "created_at": "2025-10-12T23:58:48.926312",
        "modified_at": "2025-10-12T23:58:48.926312",
        "page_count": null,
        "word_count": 1019,
        "extracted_at": "2025-10-13T20:03:22.459462",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 9,
        "token_count": 239,
        "has_context": true
      }
    },
    {
      "index": 2,
      "text": "Inngest Errors\nPrevent any additional retries\nUse\n```\nNonRetriableError\n```\nto prevent Inngest from retrying the function\n*or*\nstep. This is useful when the type of error is not expected to be resolved by a retry, for example, when the error is caused by an invalid input or when the error is expected to occur again if retried.\nCopy Copied\n```\nimport { NonRetriableError } from \"inngest\" ;\n\nexport default inngest .createFunction (\n{ id : \"mark-store-imported\" } ,\n{ event : \"store/import.completed\" } ,\nasync ({ event }) => {\ntry {\nconst result = await database .updateStore (\n{ id : event . data .storeId } ,\n{ imported : true }\n);\nreturn result .ok === true ;\n} catch (err) {\n// Passing the original error via `cause` enables you to view the error in function logs\nthrow new NonRetriableError ( \"Store not found\" , { cause : err });\n}\n}\n);\n```",
      "char_count": 847,
      "token_count": 221,
      "metadata": {
        "title": "Inngest Errors",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_error-retries_inngest-errors.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_error-retries_inngest-errors.md",
        "file_name": "features_inngest-functions_error-retries_inngest-errors.md",
        "file_size": 6846,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "d7992332a91adbc071b1f8ca1ca2ceec3639564bc68704460279ee6c5fcce6e3",
        "author": null,
        "created_at": "2025-10-12T23:58:48.926312",
        "modified_at": "2025-10-12T23:58:48.926312",
        "page_count": null,
        "word_count": 1019,
        "extracted_at": "2025-10-13T20:03:22.459462",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 9,
        "token_count": 221,
        "has_context": true
      }
    },
    {
      "index": 3,
      "text": "Inngest Errors\nPrevent any additional retries\nParameters\nCopy Copied\n```\nnew NonRetriableError (message: string , options ?: { cause? : Error }): NonRetriableError\n```\n- Name `message` Type string Required required Description The error message.\n- Name `options` Type object Required optional Description Show nested properties",
      "char_count": 327,
      "token_count": 73,
      "metadata": {
        "title": "Inngest Errors",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_error-retries_inngest-errors.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_error-retries_inngest-errors.md",
        "file_name": "features_inngest-functions_error-retries_inngest-errors.md",
        "file_size": 6846,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "d7992332a91adbc071b1f8ca1ca2ceec3639564bc68704460279ee6c5fcce6e3",
        "author": null,
        "created_at": "2025-10-12T23:58:48.926312",
        "modified_at": "2025-10-12T23:58:48.926312",
        "page_count": null,
        "word_count": 1019,
        "extracted_at": "2025-10-13T20:03:22.459462",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 9,
        "token_count": 73,
        "has_context": true
      }
    },
    {
      "index": 4,
      "text": "Inngest Errors\nRetry after a specific period of time\nUse\n```\nRetryAfterError\n```\nto control when Inngest should retry the function or step. This is useful when you want to delay the next retry attempt for a specific period of time, for example, to more gracefully handle a race condition or backing off after hitting an API rate limit.\nIf\n```\nRetryAfterError\n```\nis not used, Inngest will use\n[the default retry backoff policy](https://github.com/inngest/inngest/blob/main/pkg/backoff/backoff.go#L10-L22)\n.\nCopy Copied\n```\ninngest .createFunction (\n{ id : \"send-welcome-sms\" } ,\n{ event : \"app/user.created\" } ,\nasync ({ event , step }) => {\nconst { success , retryAfter } = await twilio . messages .create ({\nto : event . data . user .phoneNumber ,\nbody : \"Welcome to our service!\" ,\n});\n\nif ( ! success && retryAfter) {\nthrow new RetryAfterError ( \"Hit Twilio rate limit\" , retryAfter);\n}\n}\n);\n```",
      "char_count": 899,
      "token_count": 239,
      "metadata": {
        "title": "Inngest Errors",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_error-retries_inngest-errors.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_error-retries_inngest-errors.md",
        "file_name": "features_inngest-functions_error-retries_inngest-errors.md",
        "file_size": 6846,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "d7992332a91adbc071b1f8ca1ca2ceec3639564bc68704460279ee6c5fcce6e3",
        "author": null,
        "created_at": "2025-10-12T23:58:48.926312",
        "modified_at": "2025-10-12T23:58:48.926312",
        "page_count": null,
        "word_count": 1019,
        "extracted_at": "2025-10-13T20:03:22.459462",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 9,
        "token_count": 239,
        "has_context": true
      }
    },
    {
      "index": 5,
      "text": "Inngest Errors\nRetry after a specific period of time\nParameters\nCopy Copied\n```\nnew RetryAfterError (\nmessage: string ,\nretryAfter: number | string | date ,\noptions ?: { cause? : Error }\n): RetryAfterError\n```\n- Name `message` Type string Required required Description The error message.\n- Name `retryAfter`\n- Name `options` Type object Required optional Description Show nested properties",
      "char_count": 389,
      "token_count": 87,
      "metadata": {
        "title": "Inngest Errors",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_error-retries_inngest-errors.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_error-retries_inngest-errors.md",
        "file_name": "features_inngest-functions_error-retries_inngest-errors.md",
        "file_size": 6846,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "d7992332a91adbc071b1f8ca1ca2ceec3639564bc68704460279ee6c5fcce6e3",
        "author": null,
        "created_at": "2025-10-12T23:58:48.926312",
        "modified_at": "2025-10-12T23:58:48.926312",
        "page_count": null,
        "word_count": 1019,
        "extracted_at": "2025-10-13T20:03:22.459462",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 9,
        "token_count": 87,
        "has_context": true
      }
    },
    {
      "index": 6,
      "text": "Inngest Errors\nStep errors v3.12.0+\nAfter a step exhausts all of its retries, it will throw a\n```\nStepError\n```\nwhich can be caught and handled in the function handler if desired.\ntry/catch Chaining with .catch() Ignoring and logging the error\nCopy Copied\n```\ninngest .createFunction (\n{ id : \"send-weather-forecast\" } ,\n{ event : \"weather/forecast.requested\" } ,\nasync ({ event , step }) => {\nlet data;\n\ntry {\ndata = await step .run ( 'get-public-weather-data' , async () => {\nreturn await fetch ( 'https://api.weather.com/data' );\n});\n} catch (err) {\n// err will be an instance of StepError\n// Handle the error by recovering with a different step\ndata = await step .run ( 'use-backup-weather-api' , async () => {\nreturn await fetch ( 'https://api.stormwaters.com/data' );\n});\n}\n// ...\n}\n);\n```\nSupport for handling step errors is available in the Inngest TypeScript SDK starting from version\n**3.12.0**\n. Prior to this version, wrapping a step in try/catch will not work correctly.",
      "char_count": 983,
      "token_count": 263,
      "metadata": {
        "title": "Inngest Errors",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_error-retries_inngest-errors.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_error-retries_inngest-errors.md",
        "file_name": "features_inngest-functions_error-retries_inngest-errors.md",
        "file_size": 6846,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "d7992332a91adbc071b1f8ca1ca2ceec3639564bc68704460279ee6c5fcce6e3",
        "author": null,
        "created_at": "2025-10-12T23:58:48.926312",
        "modified_at": "2025-10-12T23:58:48.926312",
        "page_count": null,
        "word_count": 1019,
        "extracted_at": "2025-10-13T20:03:22.459462",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 9,
        "token_count": 263,
        "has_context": true
      }
    },
    {
      "index": 7,
      "text": "Inngest Errors\nAttempt counter\nThe current attempt number is passed in as input to the function handler.\n```\nattempt\n```\nis a zero-index number that increments for each retry. The first attempt will be\n```\n0\n```\n, the second\n```\n1\n```\n, and so on. The number is reset after a successfully executed step.\nCopy Copied\n```\ninngest .createFunction (\n{ id : \"generate-summary\" } ,\n{ event : \"blog/post.created\" } ,\nasync ({ attempt }) => {\n// `attempt` is the zero-index attempt number\n\nawait step .run ( 'call-llm' , async () => {\nif (attempt < 2 ) {\n// Call OpenAI's API two times\n} else {\n// After two attempts to OpenAI, try a different LLM, for example, Mistral\n}\n});\n}\n);\n```",
      "char_count": 676,
      "token_count": 186,
      "metadata": {
        "title": "Inngest Errors",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_error-retries_inngest-errors.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_error-retries_inngest-errors.md",
        "file_name": "features_inngest-functions_error-retries_inngest-errors.md",
        "file_size": 6846,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "d7992332a91adbc071b1f8ca1ca2ceec3639564bc68704460279ee6c5fcce6e3",
        "author": null,
        "created_at": "2025-10-12T23:58:48.926312",
        "modified_at": "2025-10-12T23:58:48.926312",
        "page_count": null,
        "word_count": 1019,
        "extracted_at": "2025-10-13T20:03:22.459462",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 9,
        "token_count": 186,
        "has_context": true
      }
    },
    {
      "index": 8,
      "text": "Inngest Errors\nStack traces\nWhen calling functions that return Promises, await the Promise to ensure that the stack trace is preserved. This applies to functions executing in different cycles of the event loop, for example, when calling a database or an external API. This is especially useful when debugging errors in production.\nReturning Promise Awaiting Promise\nCopy Copied\n```\ninngest .createFunction (\n{ id : \"update-recent-usage\" } ,\n{ event : \"app/update-recent-usage\" } ,\nasync ({ event , step }) => {\n// ...\nawait step .run ( \"update in db\" , () => doSomeWork ( event .data));\n// ...\n}\n);\n```\nPlease note that immediately returning the Promise will not include a pointer to the calling function in the stack trace. Awaiting the Promise will ensure that the stack trace includes the calling function.",
      "char_count": 809,
      "token_count": 180,
      "metadata": {
        "title": "Inngest Errors",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_error-retries_inngest-errors.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_error-retries_inngest-errors.md",
        "file_name": "features_inngest-functions_error-retries_inngest-errors.md",
        "file_size": 6846,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "d7992332a91adbc071b1f8ca1ca2ceec3639564bc68704460279ee6c5fcce6e3",
        "author": null,
        "created_at": "2025-10-12T23:58:48.926312",
        "modified_at": "2025-10-12T23:58:48.926312",
        "page_count": null,
        "word_count": 1019,
        "extracted_at": "2025-10-13T20:03:22.459462",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 9,
        "token_count": 180,
        "has_context": true
      }
    }
  ]
}