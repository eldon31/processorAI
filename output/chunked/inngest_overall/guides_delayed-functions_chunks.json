{
  "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_delayed-functions.md",
  "title": "#### On this page",
  "num_chunks": 6,
  "total_chars": 3876,
  "chunks": [
    {
      "index": 0,
      "text": "On this page\n- [Delayed Functions](\\docs\\guides\\delayed-functions#delayed-functions)\n- [Platform support](\\docs\\guides\\delayed-functions#platform-support)\n- [Delaying jobs](\\docs\\guides\\delayed-functions#delaying-jobs)\n- [Running at specific times](\\docs\\guides\\delayed-functions#running-at-specific-times)\n- [Running at specific times](\\docs\\guides\\delayed-functions#running-at-specific-times-2)\n- [How it works](\\docs\\guides\\delayed-functions#how-it-works)\nFeatures\n[Events & Triggers](\\docs\\features\\events-triggers)",
      "char_count": 519,
      "token_count": 146,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_delayed-functions.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_delayed-functions.md",
        "file_name": "guides_delayed-functions.md",
        "file_size": 4102,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "a54e4f6ab2a5b9dc2cf81d59e6e084e60e1f978346ab0d2d7013a6beac1194b1",
        "author": null,
        "created_at": "2025-10-12T23:59:24.819465",
        "modified_at": "2025-10-12T23:59:24.819968",
        "page_count": null,
        "word_count": 557,
        "extracted_at": "2025-10-13T20:03:40.455310",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 6,
        "token_count": 146,
        "has_context": true
      }
    },
    {
      "index": 1,
      "text": "Delayed Functions\nYou can easily enqueue jobs in the future with Inngest. Inngest offers two ways to run jobs in the future: delaying jobs for a specific amount of time (up to a year, and for free plan up to seven days), or running code at a specific date and time. There are some benefits to enqueuing jobs using Inngest:\n- It works across any provider or platform\n- Delaying jobs is durable, and works across server restarts, serverless functions, and redeploys\n- You can enqueue jobs into the far future\n- Serverless functions are fully supported on all platforms\n- Our SDK bypasses serverless function timeouts on all platforms\n- You never need to manage queues or backlogs",
      "char_count": 677,
      "token_count": 152,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_delayed-functions.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_delayed-functions.md",
        "file_name": "guides_delayed-functions.md",
        "file_size": 4102,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "a54e4f6ab2a5b9dc2cf81d59e6e084e60e1f978346ab0d2d7013a6beac1194b1",
        "author": null,
        "created_at": "2025-10-12T23:59:24.819465",
        "modified_at": "2025-10-12T23:59:24.819968",
        "page_count": null,
        "word_count": 557,
        "extracted_at": "2025-10-13T20:03:40.455310",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 6,
        "token_count": 152,
        "has_context": true
      }
    },
    {
      "index": 2,
      "text": "Delayed Functions\nPlatform support\n**This works across all providers and platforms**\n, whether you run serverless functions or use servers like express.\n**It also bypasses serverless function timeouts**\non all platforms, so you can sleep for a longer time than your provider supports.",
      "char_count": 284,
      "token_count": 55,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_delayed-functions.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_delayed-functions.md",
        "file_name": "guides_delayed-functions.md",
        "file_size": 4102,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "a54e4f6ab2a5b9dc2cf81d59e6e084e60e1f978346ab0d2d7013a6beac1194b1",
        "author": null,
        "created_at": "2025-10-12T23:59:24.819465",
        "modified_at": "2025-10-12T23:59:24.819968",
        "page_count": null,
        "word_count": 557,
        "extracted_at": "2025-10-13T20:03:40.455310",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 6,
        "token_count": 55,
        "has_context": true
      }
    },
    {
      "index": 3,
      "text": "Delayed Functions\nDelaying jobs\nTypeScript Go Python\nYou can delay jobs using the\n[```\nstep.sleep()\n```](\\docs\\reference\\functions\\step-sleep)\nmethod:\nCopy Copied\n```\nimport { Inngest } from \"inngest\" ;\n\nconst inngest = new Inngest ({ id : \"signup-flow\" });\n\nexport const fn = inngest .createFunction (\n{ id : \"send-signup-email\" } ,\n{ event : \"app/user.created\" } ,\nasync ({ event , step }) => {\nawait step .sleep ( \"wait-a-moment\" , \"1 hour\" );\nawait step .run ( \"do-some-work-in-the-future\" , async () => {\n// This runs after 1 hour\n});\n}\n);\n```\nFor more information on\n```\nstep.sleep()\n```\nread\n[the reference](\\docs\\reference\\functions\\step-sleep)\n.",
      "char_count": 654,
      "token_count": 196,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_delayed-functions.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_delayed-functions.md",
        "file_name": "guides_delayed-functions.md",
        "file_size": 4102,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "a54e4f6ab2a5b9dc2cf81d59e6e084e60e1f978346ab0d2d7013a6beac1194b1",
        "author": null,
        "created_at": "2025-10-12T23:59:24.819465",
        "modified_at": "2025-10-12T23:59:24.819968",
        "page_count": null,
        "word_count": 557,
        "extracted_at": "2025-10-13T20:03:40.455310",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 6,
        "token_count": 196,
        "has_context": true
      }
    },
    {
      "index": 4,
      "text": "Delayed Functions\nRunning at specific times\nYou can run jobs at a specific time using the\n[```\nstep.sleepUntil()\n```](\\docs\\reference\\functions\\step-sleep-until)\nmethod:\nCopy Copied\n```\nimport { Inngest } from \"inngest\" ;\n\nconst inngest = new Inngest ({ id : \"signup-flow\" });\n\nexport const fn = inngest .createFunction (\n{ id : \"send-signup-email\" } ,\n{ event : \"app/user.created\" } ,\nasync ({ event , step }) => {\nawait step .sleepUntil ( \"wait-for-iso-string\" , \"2023-04-01T12:30:00\" );\n\n// You can also sleep until a timestamp within the event data.  This lets you\n// pass in a time for you to run the job:\nawait step .sleepUntil ( \"wait-for-timestamp\" , event . data .run_at); // Assuming event.data.run_at is a timestamp.\n\nawait step .run ( \"do-some-work-in-the-future\" , async () => {\n// This runs at the specified time.\n});\n}\n);\n```\nFor more information on\n```\nstep.sleepUntil()\n```\n[read the reference](\\docs\\reference\\functions\\step-sleep-until)\n.",
      "char_count": 957,
      "token_count": 280,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_delayed-functions.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_delayed-functions.md",
        "file_name": "guides_delayed-functions.md",
        "file_size": 4102,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "a54e4f6ab2a5b9dc2cf81d59e6e084e60e1f978346ab0d2d7013a6beac1194b1",
        "author": null,
        "created_at": "2025-10-12T23:59:24.819465",
        "modified_at": "2025-10-12T23:59:24.819968",
        "page_count": null,
        "word_count": 557,
        "extracted_at": "2025-10-13T20:03:40.455310",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 6,
        "token_count": 280,
        "has_context": true
      }
    },
    {
      "index": 5,
      "text": "Delayed Functions\nHow it works\nIn both methods,\n**the function controls when it runs**\n.  You control the flow of your code by calling\n```\nsleep\n```\nor\n```\nsleepUntil\n```\nwithin your function directly,\ninstead of using the queue to manage your code's timing.  This keeps your logic together and makes your code easier to modify.\nInngest\n*stops the function from running*\nfor whatever time is specified.  When you call\n```\nstep.sleep\n```\nor\n```\nstep.sleepUntil\n```\nthe function automatically stops running any future work. The function then tells the Inngest executor that it should be re-invoked at a future time.  We re-call the function at the next step, skipping any previous work.  This is how we bypass serverless function time limits and work across server restarts or redeploys.",
      "char_count": 785,
      "token_count": 184,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_delayed-functions.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_delayed-functions.md",
        "file_name": "guides_delayed-functions.md",
        "file_size": 4102,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "a54e4f6ab2a5b9dc2cf81d59e6e084e60e1f978346ab0d2d7013a6beac1194b1",
        "author": null,
        "created_at": "2025-10-12T23:59:24.819465",
        "modified_at": "2025-10-12T23:59:24.819968",
        "page_count": null,
        "word_count": 557,
        "extracted_at": "2025-10-13T20:03:40.455310",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 6,
        "token_count": 184,
        "has_context": true
      }
    }
  ]
}