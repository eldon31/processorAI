{
  "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_middleware_create.md",
  "title": "#### On this page",
  "num_chunks": 2,
  "total_chars": 6815,
  "chunks": [
    {
      "index": 0,
      "text": "On this page\n- [Creating middleware](\\docs\\features\\middleware\\create#creating-middleware)\n- [Initialization](\\docs\\features\\middleware\\create#initialization)\n- [Specifying lifecycles and hooks](\\docs\\features\\middleware\\create#specifying-lifecycles-and-hooks)\n- [Adding configuration](\\docs\\features\\middleware\\create#adding-configuration)\n- [Next steps](\\docs\\features\\middleware\\create#next-steps)\nFeatures\n[Middleware](\\docs\\features\\middleware)",
      "char_count": 449,
      "token_count": 114,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_middleware_create.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_middleware_create.md",
        "file_name": "features_middleware_create.md",
        "file_size": 7046,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "1bf389748d5844ac0245fb4be15c39c0843ae5d5c79bd2d09b73ef2d18b571bd",
        "author": null,
        "created_at": "2025-10-12T23:58:59.238381",
        "modified_at": "2025-10-12T23:58:59.238883",
        "page_count": null,
        "word_count": 911,
        "extracted_at": "2025-10-13T20:03:26.377910",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 2,
        "token_count": 114,
        "has_context": true
      }
    },
    {
      "index": 1,
      "text": "Creating middleware\nCreating middleware means defining the lifecycles and subsequent hooks in those lifecycles to run code in. Lifecycles are actions such as a function run or sending events, and individual hooks within those are where we run code, usually with a\n*before*\nand\n*after*\nstep.\nTypeScript (v2.0.0+) Python (v0.3.0+)\nA Middleware is created using the\n```\nInngestMiddleware\n```\nclass.\n**```\nnew InngestMiddleware(options): InngestMiddleware\n```\nCopy Copied\n```\n// Create a new middleware\nconst myMiddleware = new InngestMiddleware ({\nname : \"My Middleware\" ,\ninit : () => {\nreturn {};\n} ,\n});\n// Register it on the client\nconst inngest = new Inngest ({\nid : \"my-app\" ,\nmiddleware : [myMiddleware] ,\n});\n```\n## [Initialization](\\docs\\features\\middleware\\create#initialization)\n\nAs you can see above, we start with the `init` function, which is called when the client is initialized.\n\nCopy Copied\n```\nimport { InngestMiddleware } from \"inngest\" ;\nnew InngestMiddleware ({\nname : \"Example Middleware\" ,\ninit () {\n// This runs when the client is initialized\n// Use this to set up anything your middleware needs\nreturn {};\n} ,\n});\n```\nFunction registration, lifecycles, and hooks can all be with synchronous or `async` functions. This makes it easy for our initialization handler to do some async work, like setting up a database connection.\n\nCopy Copied\n```\nnew InngestMiddleware ({\nname : \"Example Middleware\" ,\nasync init () {\nconst db = await connectToDatabase ();\nreturn {};\n} ,\n});\n```\nAll lifecycle and hook functions can be synchronous or `async` functions - the SDK will always wait until a middleware's function has resolved before continuing to the next one.\n\nAs it's possible for an application to use multiple Inngest clients, it's recommended to always initialize dependencies within the initializer function/method, instead of in the global scope.\n\n## [Specifying lifecycles and hooks](\\docs\\features\\middleware\\create#specifying-lifecycles-and-hooks)\n\nNotice we're returning an empty object `{}` . From here, we can instead return the lifecycles we want to use for this client. See the [Middleware - Lifecycle - Hook reference](\\docs\\reference\\middleware\\lifecycle#hook-reference) for a full list of available hooks.\n\nCopy Copied\n```\nnew InngestMiddleware ({\nname : \"Example Middleware\" ,\nasync init () {\n// 1. Use init to set up dependencies\n// 2. Use return values to group hooks by lifecycle: - \"onFunctionRun\" \"onSendEvent\"\nreturn {\nonFunctionRun ({ ctx , fn , steps }) {\n// 3. Use the lifecycle function to pass dependencies into hooks\n// 4. Return any hooks that you want to define for this action\nreturn {\n// 5. Define the hook that runs at a specific stage for this lifecycle.\nbeforeExecution () {\n// 6. Define your hook\n} ,\n};\n} ,\n};\n} ,\n});\n```\nHere we use the `beforeExecution()` hook within the `onFunctionRun()` lifecycle.\n\nThe use of [closures](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures) here means that our `onFunctionRun()` lifecycle can access anything from the middleware's initialization, like our `db` connection.\n\n`onFunctionRun()` here is also called for every function execution, meaning you can run code specific to this execution without maintaining any global state. We can even conditionally register hooks based on incoming arguments. For example, here we only register a hook for a specific event trigger:\n\nCopy Copied\n```\nnew InngestMiddleware ({\nname : \"Example Middleware\" ,\nasync init () {\nreturn {\nonFunctionRun ({ ctx , fn , steps }) {\n// Register a hook only if this event is the trigger\nif ( ctx . event .name === \"app/user.created\" ) {\nreturn {\nbeforeExecution () {\nconsole .log ( \"Function executing with user created event\" );\n} ,\n};\n}\n// Register no hooks if the trigger was not\n```\napp/user.created\n```\nreturn {};\n} ,\n};\n} ,\n});\n```\nLearn more about hooks with:\n\n- [Lifecycle](\\docs\\reference\\middleware\\lifecycle) - middleware ordering and see all available hooks\n- [TypeScript](\\docs\\reference\\middleware\\typescript) - how to affect input and output types and values\n\n## [Adding configuration](\\docs\\features\\middleware\\create#adding-configuration)\n\nIt's common for middleware to require additional customization or options from developers. For this, we recommend creating a function that takes in some options and returns the middleware.\n\n### inngest/middleware/myMiddleware.ts\n\nCopy Copied\n```\nimport { InngestMiddleware } from \"inngest\" ;\nexport const createMyMiddleware = (logEventOutput : string ) => {\nreturn new InngestMiddleware ({\nname : \"My Middleware\" ,\ninit () {\nreturn {\nonFunctionRun ({ ctx , fn , steps }) {\nif ( ctx . event .name === logEventOutput) {\nreturn {\ntransformOutput ({ result , step }) {\nconsole .log (\n```\n${ logEventOutput } output: ${ JSON .stringify (result) }\n```\n);\n} ,\n};\n}\nreturn {};\n} ,\n};\n} ,\n});\n};\n```\nCopy Copied\n```\nimport { createMyMiddleware } from \"./middleware/myMiddleware\" ;\nexport const inngest = new Inngest ({\nid : \"my-client\" ,\nmiddleware : [ createMyMiddleware ( \"app/user.created\" )] ,\n});\n```\nMake sure to let TypeScript infer the output of the function instead of strictly typing it; this helps Inngest understand changes to input and output of arguments. See [Middleware - TypeScript](\\docs\\reference\\middleware\\typescript) for more information.\n\n## [Next steps](\\docs\\features\\middleware\\create#next-steps)\n\nCheck out our pre-built middleware and examples:\n\n## [Dependency Injection](\\docs\\features\\middleware\\dependency-injection)\n\n[Provide shared client instances (ex, OpenAI) to your Inngest Functions.](\\docs\\features\\middleware\\dependency-injection)\n\n## [Encryption Middleware](\\docs\\features\\middleware\\encryption-middleware)\n\n[End-to-end encryption for events, step output, and function output.](\\docs\\features\\middleware\\encryption-middleware)\n\n## [Sentry Middleware](\\docs\\features\\middleware\\sentry-middleware)\n\n[Quickly setup Sentry for your Inngest Functions.](\\docs\\features\\middleware\\sentry-middleware)\n\n## [Datadog middleware](\\docs\\examples\\track-failures-in-datadog)\n\n[Add tracing with Datadog under a few minutes.](\\docs\\examples\\track-failures-in-datadog)\n\n## [Cloudflare Workers &amp; Hono middleware](\\docs\\examples\\middleware\\cloudflare-workers-environment-variables)\n\n[Access environment variables within Inngest functions.](\\docs\\examples\\middleware\\cloudflare-workers-environment-variables)\n```",
      "char_count": 6366,
      "token_count": 1515,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_middleware_create.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_middleware_create.md",
        "file_name": "features_middleware_create.md",
        "file_size": 7046,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "1bf389748d5844ac0245fb4be15c39c0843ae5d5c79bd2d09b73ef2d18b571bd",
        "author": null,
        "created_at": "2025-10-12T23:58:59.238381",
        "modified_at": "2025-10-12T23:58:59.238883",
        "page_count": null,
        "word_count": 911,
        "extracted_at": "2025-10-13T20:03:26.377910",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 2,
        "token_count": 1515,
        "has_context": true
      }
    }
  ]
}