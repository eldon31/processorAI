{
  "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_invoking-functions-directly.md",
  "title": "#### On this page",
  "num_chunks": 7,
  "total_chars": 5840,
  "chunks": [
    {
      "index": 0,
      "text": "On this page\n- [Invoking functions directly](\\docs\\guides\\invoking-functions-directly#invoking-functions-directly)\n- [Invoking another function](\\docs\\guides\\invoking-functions-directly#invoking-another-function)\n- [When should I invoke?](\\docs\\guides\\invoking-functions-directly#when-should-i-invoke)\n- [Referencing another Inngest function](\\docs\\guides\\invoking-functions-directly#referencing-another-inngest-function)\n- [When should I invoke?](\\docs\\guides\\invoking-functions-directly#when-should-i-invoke-2)\n- [When should I invoke?](\\docs\\guides\\invoking-functions-directly#when-should-i-invoke-3)\n- [Creating a distributed system](\\docs\\guides\\invoking-functions-directly#creating-a-distributed-system)\n- [Similar pattern: Fan-Out](\\docs\\guides\\invoking-functions-directly#similar-pattern-fan-out)\nFeatures\n[Events & Triggers](\\docs\\features\\events-triggers)",
      "char_count": 865,
      "token_count": 238,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_invoking-functions-directly.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_invoking-functions-directly.md",
        "file_name": "guides_invoking-functions-directly.md",
        "file_size": 6195,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "791bcd32526ee3da6e42eb9b8e34be3b8b9fe90d0ee75366205e8efaffaa8e1a",
        "author": null,
        "created_at": "2025-10-12T23:59:33.440792",
        "modified_at": "2025-10-12T23:59:33.441296",
        "page_count": null,
        "word_count": 822,
        "extracted_at": "2025-10-13T20:03:45.646719",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 7,
        "token_count": 238,
        "has_context": true
      }
    },
    {
      "index": 1,
      "text": "Invoking functions directly\nInngest's\n```\nstep.invoke()\n```\nfunction provides a powerful tool for calling functions directly within your event-driven system. It differs from traditional event-driven triggers, offering a more direct, RPC-like approach. This encourages a few key benefits:\n- Allows functions to call and receive the result of other functions\n- Naturally separates your system into reusable functions that can spread across process boundaries\n- Allows use of synchronous interaction between functions in an otherwise-asynchronous event-driven architecture, making it much easier to manage functions that require immediate outcomes",
      "char_count": 644,
      "token_count": 112,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_invoking-functions-directly.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_invoking-functions-directly.md",
        "file_name": "guides_invoking-functions-directly.md",
        "file_size": 6195,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "791bcd32526ee3da6e42eb9b8e34be3b8b9fe90d0ee75366205e8efaffaa8e1a",
        "author": null,
        "created_at": "2025-10-12T23:59:33.440792",
        "modified_at": "2025-10-12T23:59:33.441296",
        "page_count": null,
        "word_count": 822,
        "extracted_at": "2025-10-13T20:03:45.646719",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 7,
        "token_count": 112,
        "has_context": true
      }
    },
    {
      "index": 2,
      "text": "Invoking functions directly\nInvoking another function\nTypeScript Go Python",
      "char_count": 74,
      "token_count": 14,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_invoking-functions-directly.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_invoking-functions-directly.md",
        "file_name": "guides_invoking-functions-directly.md",
        "file_size": 6195,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "791bcd32526ee3da6e42eb9b8e34be3b8b9fe90d0ee75366205e8efaffaa8e1a",
        "author": null,
        "created_at": "2025-10-12T23:59:33.440792",
        "modified_at": "2025-10-12T23:59:33.441296",
        "page_count": null,
        "word_count": 822,
        "extracted_at": "2025-10-13T20:03:45.646719",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 7,
        "token_count": 14,
        "has_context": true
      }
    },
    {
      "index": 3,
      "text": "Invoking functions directly\nInvoking another function\nWhen should I invoke?\nUse\n```\nstep.invoke()\n```\nin tasks that need specific settings like concurrency limits. Because it runs with its own configuration,\ndistinct from the invoker's, you can provide a tailored configuration for each function.\nIf you don't need to define granular configuration or if your function won't be reused across app boundaries, use\n```\nstep.run()\n```\nfor simplicity.\nCopy Copied\n```\n// Some function we'll call\nconst computeSquare = inngest .createFunction (\n{ id : \"compute-square\" } ,\n{ event : \"calculate/square\" } ,\nasync ({ event }) => {\nreturn { result : event . data .number * event . data .number }; // Result typed as { result: number }\n}\n);\n\n// In this function, we'll call `computeSquare`\nconst mainFunction = inngest .createFunction (\n{ id : \"main-function\" } ,\n{ event : \"main/event\" } ,\nasync ({ step }) => {\nconst square = await step .invoke ( \"compute-square-value\" , {\nfunction : computeSquare ,\ndata : { number : 4 } , // input data is typed, requiring input if it's needed\n});\n\nreturn `Square of 4 is ${ square .result } .` ; // square.result is typed as number\n}\n);\n```\nIn the above example, our\n```\nmainFunction\n```\ncalls\n```\ncomputeSquare\n```\nto retrieve the resulting value.\n```\ncomputeSquare\n```\ncan now be called from here or any other process connected to Inngest.",
      "char_count": 1369,
      "token_count": 338,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_invoking-functions-directly.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_invoking-functions-directly.md",
        "file_name": "guides_invoking-functions-directly.md",
        "file_size": 6195,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "791bcd32526ee3da6e42eb9b8e34be3b8b9fe90d0ee75366205e8efaffaa8e1a",
        "author": null,
        "created_at": "2025-10-12T23:59:33.440792",
        "modified_at": "2025-10-12T23:59:33.441296",
        "page_count": null,
        "word_count": 822,
        "extracted_at": "2025-10-13T20:03:45.646719",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 7,
        "token_count": 338,
        "has_context": true
      }
    },
    {
      "index": 4,
      "text": "Invoking functions directly\nReferencing another Inngest function\nIf a function exists in another app, you can create a reference that can be invoked in the same manner as the local\n```\ncomputeSquare\n```\nfunction above.\nCopy Copied\n```\n// @/inngest/computeSquare.ts\nimport { referenceFunction } from \"inngest\" ;\nimport { z } from \"zod\" ;\n\n// Create a reference to a function in another application.\nexport const computeSquare = referenceFunction ({\nappId : \"my-python-app\" ,\nfunctionId : \"compute-square\" ,\n// Schemas are optional, but provide types for your call if specified\nschemas : {\ndata : z .object ({\nnumber : z .number () ,\n}) ,\nreturn : z .object ({\nresult : z .number () ,\n}) ,\n} ,\n});\n```\nCopy Copied\n```\nimport { computeSquare } from \"@/inngest/computeSquare\" ;\n\n// square.result is typed as a number\nconst square = await step .invoke ( \"compute-square-value\" , {\nfunction : computeSquare ,\ndata : { number : 4 } , // input data is typed, requiring input if it's needed\n});\n```\nReferences can also be used to invoke local functions without needing to import them (and their dependencies) directly. This can be useful for frameworks like Next.js where edge and serverless handlers can be mixed together and require different sets of dependencies.\nCopy Copied\n```\nimport { inngest , referenceFunction } from \"inngest\" ;\nimport { type computeSquare } from \"@/inngest/computeSquare\" ; // Import only the type\n\nconst mainFunction = inngest .createFunction (\n{ id : \"main-function\" } ,\n{ event : \"main/event\" } ,\nasync ({ step }) => {\nconst square = await step .invoke ( \"compute-square-value\" , {\nfunction : referenceFunction < typeof computeSquare>({\nfunctionId : \"compute-square\" ,\n}) ,\ndata : { number : 4 } , // input data is still typed\n});\n\nreturn `Square of 4 is ${ square .result } .` ; // square.result is typed as number\n}\n);\n```\nFor more information on referencing functions, see\n[TypeScript -> Referencing Functions](\\docs\\functions\\references)\n.",
      "char_count": 1965,
      "token_count": 479,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_invoking-functions-directly.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_invoking-functions-directly.md",
        "file_name": "guides_invoking-functions-directly.md",
        "file_size": 6195,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "791bcd32526ee3da6e42eb9b8e34be3b8b9fe90d0ee75366205e8efaffaa8e1a",
        "author": null,
        "created_at": "2025-10-12T23:59:33.440792",
        "modified_at": "2025-10-12T23:59:33.441296",
        "page_count": null,
        "word_count": 822,
        "extracted_at": "2025-10-13T20:03:45.646719",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 7,
        "token_count": 479,
        "has_context": true
      }
    },
    {
      "index": 5,
      "text": "Invoking functions directly\nCreating a distributed system\nYou can invoke Inngest functions written in any language, hosted on different clouds.  For example, a TypeScript function on Vercel can invoke a Python function hosted in AWS.\nBy starting to define these blocks of functionality, you're creating a smart, distributed system with all of the benefits of event-driven architecture and without any of the hassle.",
      "char_count": 415,
      "token_count": 80,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_invoking-functions-directly.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_invoking-functions-directly.md",
        "file_name": "guides_invoking-functions-directly.md",
        "file_size": 6195,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "791bcd32526ee3da6e42eb9b8e34be3b8b9fe90d0ee75366205e8efaffaa8e1a",
        "author": null,
        "created_at": "2025-10-12T23:59:33.440792",
        "modified_at": "2025-10-12T23:59:33.441296",
        "page_count": null,
        "word_count": 822,
        "extracted_at": "2025-10-13T20:03:45.646719",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 7,
        "token_count": 80,
        "has_context": true
      }
    },
    {
      "index": 6,
      "text": "Invoking functions directly\nSimilar pattern: Fan-Out\nA similar pattern to invoking functions directly is that of fan-out -\n[check out the guide here](\\docs\\guides\\fan-out-jobs)\n. Here are some key differences:\n- Fan-out will trigger multiple functions simultaneously, whereas invocation will only trigger one\n- Unlike invocation, fan-out will not receive the result of the invoked function\n- Choose fan-out for parallel processing of independent tasks and invocation for coordinated, interdependent functions",
      "char_count": 508,
      "token_count": 99,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_invoking-functions-directly.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_invoking-functions-directly.md",
        "file_name": "guides_invoking-functions-directly.md",
        "file_size": 6195,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "791bcd32526ee3da6e42eb9b8e34be3b8b9fe90d0ee75366205e8efaffaa8e1a",
        "author": null,
        "created_at": "2025-10-12T23:59:33.440792",
        "modified_at": "2025-10-12T23:59:33.441296",
        "page_count": null,
        "word_count": 822,
        "extracted_at": "2025-10-13T20:03:45.646719",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 7,
        "token_count": 99,
        "has_context": true
      }
    }
  ]
}