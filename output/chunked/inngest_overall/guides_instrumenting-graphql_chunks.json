{
  "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_instrumenting-graphql.md",
  "title": "Instrumenting GraphQL",
  "num_chunks": 6,
  "total_chars": 4010,
  "chunks": [
    {
      "index": 0,
      "text": "On this page\n- [Instrumenting GraphQL](\\docs\\guides\\instrumenting-graphql#instrumenting-graph-ql)\n- [Getting Started](\\docs\\guides\\instrumenting-graphql#getting-started)\n- [Usage example](\\docs\\guides\\instrumenting-graphql#usage-example)\n- [Output events](\\docs\\guides\\instrumenting-graphql#output-events)\n- [Reacting to events](\\docs\\guides\\instrumenting-graphql#reacting-to-events)",
      "char_count": 383,
      "token_count": 108,
      "metadata": {
        "title": "Instrumenting GraphQL",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_instrumenting-graphql.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_instrumenting-graphql.md",
        "file_name": "guides_instrumenting-graphql.md",
        "file_size": 4253,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "81efd7eed84ccc8b3d49b7769024c7e5227e71e3f1db51f3a8ff1e2cba6abf65",
        "author": null,
        "created_at": "2025-10-12T23:59:32.165598",
        "modified_at": "2025-10-12T23:59:32.165598",
        "page_count": null,
        "word_count": 568,
        "extracted_at": "2025-10-13T20:03:45.043003",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 6,
        "token_count": 108,
        "has_context": true
      }
    },
    {
      "index": 1,
      "text": "Instrumenting GraphQL\nWhen building with GraphQL, you can give your event-driven application a kick-start by instrumenting every query and mutation, sending events when one is successfully executed.\nWe can do this using an\n[Envelop](https://envelop.dev/)\nplugin,\n```\nuseInngest\n```\n, for\n[GraphQL Yoga](https://the-guild.dev/graphql/yoga-server)\nand servers or frameworks powered by Yoga, such as\n[RedwoodJS](https://www.redwoodjs.com/)\n.\nBy instrumenting with the\n```\nuseInngest\n```\nplugin:\n- Get an immediate set of events to react to that automatically grows with your GraphQL API.\n- No changes to your existing resolvers are ever needed.\n- Utilise fine-grained control over what events are sent such as operations (queries, mutations, or subscriptions), introspection events, when GraphQL errors occur, if result data should be included, type and schema coordinate denylists, and more.\n- Automatically capture context such as user data.",
      "char_count": 940,
      "token_count": 211,
      "metadata": {
        "title": "Instrumenting GraphQL",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_instrumenting-graphql.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_instrumenting-graphql.md",
        "file_name": "guides_instrumenting-graphql.md",
        "file_size": 4253,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "81efd7eed84ccc8b3d49b7769024c7e5227e71e3f1db51f3a8ff1e2cba6abf65",
        "author": null,
        "created_at": "2025-10-12T23:59:32.165598",
        "modified_at": "2025-10-12T23:59:32.165598",
        "page_count": null,
        "word_count": 568,
        "extracted_at": "2025-10-13T20:03:45.043003",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 6,
        "token_count": 211,
        "has_context": true
      }
    },
    {
      "index": 2,
      "text": "Instrumenting GraphQL\nGetting Started\nCopy Copied\n```\nnpm install envelop-plugin-inngest # or yarn add\n```",
      "char_count": 106,
      "token_count": 26,
      "metadata": {
        "title": "Instrumenting GraphQL",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_instrumenting-graphql.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_instrumenting-graphql.md",
        "file_name": "guides_instrumenting-graphql.md",
        "file_size": 4253,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "81efd7eed84ccc8b3d49b7769024c7e5227e71e3f1db51f3a8ff1e2cba6abf65",
        "author": null,
        "created_at": "2025-10-12T23:59:32.165598",
        "modified_at": "2025-10-12T23:59:32.165598",
        "page_count": null,
        "word_count": 568,
        "extracted_at": "2025-10-13T20:03:45.043003",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 6,
        "token_count": 26,
        "has_context": true
      }
    },
    {
      "index": 3,
      "text": "Instrumenting GraphQL\nGetting Started\nUsage example\nUsing\n```\nuseInngest\n```\njust requires that you have an Inngest client (see the\n[Quick start](\\docs\\getting-started\\nextjs-quick-start)\n) set up with an appropriate event key (see\n[Creating an event key](https://www.inngest.com/docs/events/creating-an-event-key)\n).\nHere's a single-file example of how to add the plugin.\nCopy Copied\n```\nimport { useInngest } from \"envelop-plugin-inngest\" ;\nimport { createSchema , createYoga } from \"graphql-yoga\" ;\nimport { Inngest } from \"inngest\" ;\n\nconst inngest = new Inngest ({ id : \"my-app\" });\n\n// Provide your schema\nconst yoga = createYoga ({\nschema : createSchema ({\ntypeDefs : /* GraphQL */ `\ntype Query {\ngreetings: String!\n}\n` ,\nresolvers : {\nQuery : {\ngreetings : () => \"Hello World!\" ,\n} ,\n} ,\n}) ,\n\n// Add the plugin to the server. RedwoodJS users can use the\n// `extraPlugins` option instead.\nplugins : [ useInngest ({ inngestClient : inngest })] ,\n});\n\n// Start the server and explore http://localhost:4000/graphql\nconst server = createServer (yoga);\n\nserver .listen ( 4000 , () => {\nconsole .info ( \"Server is running on http://localhost:4000/graphql\" );\n});\n```",
      "char_count": 1168,
      "token_count": 329,
      "metadata": {
        "title": "Instrumenting GraphQL",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_instrumenting-graphql.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_instrumenting-graphql.md",
        "file_name": "guides_instrumenting-graphql.md",
        "file_size": 4253,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "81efd7eed84ccc8b3d49b7769024c7e5227e71e3f1db51f3a8ff1e2cba6abf65",
        "author": null,
        "created_at": "2025-10-12T23:59:32.165598",
        "modified_at": "2025-10-12T23:59:32.165598",
        "page_count": null,
        "word_count": 568,
        "extracted_at": "2025-10-13T20:03:45.043003",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 6,
        "token_count": 329,
        "has_context": true
      }
    },
    {
      "index": 4,
      "text": "Instrumenting GraphQL\nGetting Started\nOutput events\nOnce the plugin is installed, an event will be sent for all successful GraphQL operations, resulting in a ready-to-use set of events that you can react to immediately.\nHere's an example event sent from a mutation to create a new item in a user's cart:\nCopy Copied\n```\n{\n\"name\" : \"graphql/create-cart-item.mutation\" ,\n\"data\" : {\n\"identifiers\" : [\n{\n\"id\" : 27 ,\n\"typename\" : \"CartItem\"\n}\n] ,\n\"operation\" : {\n\"id\" : \"create-cart-item\" ,\n\"name\" : \"CreateCartItem\" ,\n\"type\" : \"mutation\"\n} ,\n\"result\" : {\n\"data\" : {\n\"createCartItem\" : {\n\"id\" : 27 ,\n\"productId\" : \"123\"\n}\n}\n} ,\n\"types\" : [\n\"CartItem\"\n] ,\n\"variables\" : {}\n} ,\n\"id\" : \"01GXXAQ1M0A1SFVGEHACRF4K1C\"\n}\n```",
      "char_count": 712,
      "token_count": 219,
      "metadata": {
        "title": "Instrumenting GraphQL",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_instrumenting-graphql.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_instrumenting-graphql.md",
        "file_name": "guides_instrumenting-graphql.md",
        "file_size": 4253,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "81efd7eed84ccc8b3d49b7769024c7e5227e71e3f1db51f3a8ff1e2cba6abf65",
        "author": null,
        "created_at": "2025-10-12T23:59:32.165598",
        "modified_at": "2025-10-12T23:59:32.165598",
        "page_count": null,
        "word_count": 568,
        "extracted_at": "2025-10-13T20:03:45.043003",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 6,
        "token_count": 219,
        "has_context": true
      }
    },
    {
      "index": 5,
      "text": "Instrumenting GraphQL\nGetting Started\nReacting to events\nWe can react to this event by creating a new Inngest function with the event as the trigger.\nCopy Copied\n```\ninngest .createFunction (\n{ id : \"send-cart-alert\" } ,\n{ event : \"graphql/create-cart-item.mutation\" } ,\nasync ({ event }) => {\nawait sendSlackMessage (\n\"#marketing\" ,\n`Someone added product # ${ event . data .identifiers[ 0 ].id } to their cart!`\n);\n}\n);\n```\nFor more info on how to customize the events sent check out the\n[envelop-plugin-inngest](https://github.com/inngest/envelop-plugin-inngest)\nrepository, or see\n[Writing functions](https://www.inngest.com/docs/functions)\nto learn how to react to these events in different ways.",
      "char_count": 701,
      "token_count": 180,
      "metadata": {
        "title": "Instrumenting GraphQL",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_instrumenting-graphql.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\guides_instrumenting-graphql.md",
        "file_name": "guides_instrumenting-graphql.md",
        "file_size": 4253,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "81efd7eed84ccc8b3d49b7769024c7e5227e71e3f1db51f3a8ff1e2cba6abf65",
        "author": null,
        "created_at": "2025-10-12T23:59:32.165598",
        "modified_at": "2025-10-12T23:59:32.165598",
        "page_count": null,
        "word_count": 568,
        "extracted_at": "2025-10-13T20:03:45.043003",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 6,
        "token_count": 180,
        "has_context": true
      }
    }
  ]
}