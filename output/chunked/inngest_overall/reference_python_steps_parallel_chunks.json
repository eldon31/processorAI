{
  "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_python_steps_parallel.md",
  "title": "#### On this page",
  "num_chunks": 7,
  "total_chars": 3601,
  "chunks": [
    {
      "index": 0,
      "text": "On this page\n- [Parallel](\\docs\\reference\\python\\steps\\parallel#parallel)\n- [Arguments](\\docs\\reference\\python\\steps\\parallel#arguments)\n- [Examples](\\docs\\reference\\python\\steps\\parallel#examples)\n- [Frequently Asked Questions](\\docs\\reference\\python\\steps\\parallel#frequently-asked-questions)\n- [Do parallel steps work if I don't use async functions?](\\docs\\reference\\python\\steps\\parallel#do-parallel-steps-work-if-i-don-t-use-async-functions)\n- [Can I use asyncio.gather instead of step.parallel?](\\docs\\reference\\python\\steps\\parallel#can-i-use-asyncio-gather-instead-of-step-parallel)\n- [Why does step.parallel accept a tuple instead of variadic arguments?](\\docs\\reference\\python\\steps\\parallel#why-does-step-parallel-accept-a-tuple-instead-of-variadic-arguments)\nReferences\n[Python SDK](\\docs\\reference\\python)\n[Steps](\\docs\\reference\\python\\steps\\invoke)",
      "char_count": 863,
      "token_count": 237,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_python_steps_parallel.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_python_steps_parallel.md",
        "file_name": "reference_python_steps_parallel.md",
        "file_size": 4006,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "30061a5342678f1a71c0a97f70028401e37e63b6a4807760fbc6e133e7c70ddb",
        "author": null,
        "created_at": "2025-10-13T00:01:12.777148",
        "modified_at": "2025-10-13T00:01:12.777711",
        "page_count": null,
        "word_count": 469,
        "extracted_at": "2025-10-13T20:04:48.460455",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 7,
        "token_count": 237,
        "has_context": true
      }
    },
    {
      "index": 1,
      "text": "Parallel v0.3.0+\nRun steps in parallel. Returns the parallel steps' result as a tuple.",
      "char_count": 86,
      "token_count": 23,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_python_steps_parallel.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_python_steps_parallel.md",
        "file_name": "reference_python_steps_parallel.md",
        "file_size": 4006,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "30061a5342678f1a71c0a97f70028401e37e63b6a4807760fbc6e133e7c70ddb",
        "author": null,
        "created_at": "2025-10-13T00:01:12.777148",
        "modified_at": "2025-10-13T00:01:12.777711",
        "page_count": null,
        "word_count": 469,
        "extracted_at": "2025-10-13T20:04:48.460455",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 7,
        "token_count": 23,
        "has_context": true
      }
    },
    {
      "index": 2,
      "text": "Parallel v0.3.0+\nArguments\n- Name `callables` Type tuple[Callable[[], object], ...] Required required Description Accepts a tuple of callables. Each callable has no arguments and returns a JSON serializable value. Typically this is just a `lambda` around a `step` method.",
      "char_count": 271,
      "token_count": 65,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_python_steps_parallel.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_python_steps_parallel.md",
        "file_name": "reference_python_steps_parallel.md",
        "file_size": 4006,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "30061a5342678f1a71c0a97f70028401e37e63b6a4807760fbc6e133e7c70ddb",
        "author": null,
        "created_at": "2025-10-13T00:01:12.777148",
        "modified_at": "2025-10-13T00:01:12.777711",
        "page_count": null,
        "word_count": 469,
        "extracted_at": "2025-10-13T20:04:48.460455",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 7,
        "token_count": 65,
        "has_context": true
      }
    },
    {
      "index": 3,
      "text": "Parallel v0.3.0+\nExamples\nRunning two steps in parallel:\nCopy Copied\n```\n@inngest_client . create_function (\nfn_id = \"my-function\" ,\ntrigger = inngest. TriggerEvent (event = \"my-event\" ),\n)\nasync def fn ( ctx : inngest . Context) -> None :\nuser_id = ctx . event . data [ \"user_id\" ]\n\n(updated_user , sent_email) = await ctx . group . parallel (\n(\nlambda : ctx.step. run ( \"update-user\" , update_user, user_id),\nlambda : ctx.step. run ( \"send-email\" , send_email, user_id),\n)\n)\n```\nDynamically building a tuple of parallel steps:\nCopy Copied\n```\n@client . create_function (\nfn_id = \"my-function\" ,\ntrigger = inngest. TriggerEvent (event = \"my-event\" ),\n)\nasync def fn ( ctx : inngest . Context) -> None :\nparallel_steps = tuple [ typing . Callable [ [] , typing . Awaitable [ bool ]]]()\nfor user_id in ctx . event . data [ \"user_ids\" ]:\nparallel_steps += tuple (\n[\nfunctools. partial (\nctx.step.run,\nf \"get-user- { user_id } \" ,\nfunctools. partial (update_user, user_id),\n)\n]\n)\n\nupdated_users = await ctx . group . parallel (parallel_steps)\n```\n⚠️ Use\n```\nfunctools.partial\n```\ninstead of\n```\nlambda\n```\nwhen building the tuple in a loop. If\n```\nlambda\n```\nis used, then the step functions will use the last value of the loop variable. This is due to Python's lack of block scoping.",
      "char_count": 1281,
      "token_count": 362,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_python_steps_parallel.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_python_steps_parallel.md",
        "file_name": "reference_python_steps_parallel.md",
        "file_size": 4006,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "30061a5342678f1a71c0a97f70028401e37e63b6a4807760fbc6e133e7c70ddb",
        "author": null,
        "created_at": "2025-10-13T00:01:12.777148",
        "modified_at": "2025-10-13T00:01:12.777711",
        "page_count": null,
        "word_count": 469,
        "extracted_at": "2025-10-13T20:04:48.460455",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 7,
        "token_count": 362,
        "has_context": true
      }
    },
    {
      "index": 4,
      "text": "Parallel v0.3.0+\nFrequently Asked Questions\nDo parallel steps work if I don't use async functions?\nYes, parallel steps work with both\n```\nasync\n```\nand non-\n```\nasync\n```\nfunctions. Since our execution model uses a separate HTTP request for each step, threaded HTTP frameworks (for example, Flask) will create a separate thread for each step.",
      "char_count": 342,
      "token_count": 81,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_python_steps_parallel.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_python_steps_parallel.md",
        "file_name": "reference_python_steps_parallel.md",
        "file_size": 4006,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "30061a5342678f1a71c0a97f70028401e37e63b6a4807760fbc6e133e7c70ddb",
        "author": null,
        "created_at": "2025-10-13T00:01:12.777148",
        "modified_at": "2025-10-13T00:01:12.777711",
        "page_count": null,
        "word_count": 469,
        "extracted_at": "2025-10-13T20:04:48.460455",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 7,
        "token_count": 81,
        "has_context": true
      }
    },
    {
      "index": 5,
      "text": "Parallel v0.3.0+\nFrequently Asked Questions\nCan I use asyncio.gather instead of step.parallel ?\nNo,\n```\nasyncio.gather\n```\nwill not work as expected. Inngest's execution model necessitates a control flow interruption when it encounters a\n```\nstep\n```\nmethod, but currently that does not work with\n```\nasyncio.gather\n```\n.",
      "char_count": 321,
      "token_count": 84,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_python_steps_parallel.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_python_steps_parallel.md",
        "file_name": "reference_python_steps_parallel.md",
        "file_size": 4006,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "30061a5342678f1a71c0a97f70028401e37e63b6a4807760fbc6e133e7c70ddb",
        "author": null,
        "created_at": "2025-10-13T00:01:12.777148",
        "modified_at": "2025-10-13T00:01:12.777711",
        "page_count": null,
        "word_count": 469,
        "extracted_at": "2025-10-13T20:04:48.460455",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 7,
        "token_count": 84,
        "has_context": true
      }
    },
    {
      "index": 6,
      "text": "Parallel v0.3.0+\nFrequently Asked Questions\nWhy does step.parallel accept a tuple instead of variadic arguments?\nTo properly type-annotate\n```\nstep.parallel\n```\n, the return types of the callables need to be statically \"extracted\". Python's type-checkers are better at doing this with tuples than with variadic arguments. Mypy still struggles even with tuples, but Pyright is able to properly infer the\n```\nstep.parallel\n```\nreturn type.",
      "char_count": 437,
      "token_count": 101,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_python_steps_parallel.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_python_steps_parallel.md",
        "file_name": "reference_python_steps_parallel.md",
        "file_size": 4006,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "30061a5342678f1a71c0a97f70028401e37e63b6a4807760fbc6e133e7c70ddb",
        "author": null,
        "created_at": "2025-10-13T00:01:12.777148",
        "modified_at": "2025-10-13T00:01:12.777711",
        "page_count": null,
        "word_count": 469,
        "extracted_at": "2025-10-13T20:04:48.460455",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 7,
        "token_count": 101,
        "has_context": true
      }
    }
  ]
}