{
  "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
  "title": "#### On this page",
  "num_chunks": 20,
  "total_chars": 13850,
  "chunks": [
    {
      "index": 0,
      "text": "On this page\n- [Consuming webhook events](\\docs\\platform\\webhooks#consuming-webhook-events)\n- [Creating a webhook](\\docs\\platform\\webhooks#creating-a-webhook)\n- [Defining a transform function](\\docs\\platform\\webhooks#defining-a-transform-function)\n- [Example transforms](\\docs\\platform\\webhooks#example-transforms)\n- [Testing transforms](\\docs\\platform\\webhooks#testing-transforms)\n- [Advanced configuration](\\docs\\platform\\webhooks#advanced-configuration)\n- [Managing webhooks via REST API](\\docs\\platform\\webhooks#managing-webhooks-via-rest-api)\n- [Local development](\\docs\\platform\\webhooks#local-development)\n- [Writing functions](\\docs\\platform\\webhooks#writing-functions)\n- [Verifying request signatures](\\docs\\platform\\webhooks#verifying-request-signatures)\n- [Branch environments](\\docs\\platform\\webhooks#branch-environments)\n- [Supported content types](\\docs\\platform\\webhooks#supported-content-types)\n- [Processing webhooks with URL params or Form Data content](\\docs\\platform\\webhooks#processing-webhooks-with-url-params-or-form-data-content)\n- [Building webhook integrations](\\docs\\platform\\webhooks#building-webhook-integrations)\nFeatures\n[Events & Triggers](\\docs\\features\\events-triggers)",
      "char_count": 1203,
      "token_count": 289,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "file_name": "platform_webhooks.md",
        "file_size": 14617,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "ddcdfcf4471395417a1d6c3858195aea2e0cda2c9d2075dd0b69fefb5a99d1cc",
        "author": null,
        "created_at": "2025-10-13T00:00:25.024804",
        "modified_at": "2025-10-13T00:00:25.025309",
        "page_count": null,
        "word_count": 2009,
        "extracted_at": "2025-10-13T20:04:24.845394",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 20,
        "token_count": 289,
        "has_context": true
      }
    },
    {
      "index": 1,
      "text": "Consuming webhook events\nAt its core, Inngest is centered around functions that are triggered by events. Webhooks are one of the most ubiquitous sources for events for developers. Inngest was designed to support webhook events.\nThis guide will show you how to use Inngest to consume your webhook events and trigger functions.\nWhen talking about webhooks, it's useful to define some terminology:\n- **Provider** - The service sending the webhook events as HTTP post requests.\n- **Consumer** - The URL endpoint which receives the HTTP post requests.\nInngest enables you to create any number of unique URLs which act as webhook consumers. You can create a webhook for each third party service that you use (e.g. Stripe, Github, Clerk) along with custom rules on how to handle that webhook.",
      "char_count": 785,
      "token_count": 163,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "file_name": "platform_webhooks.md",
        "file_size": 14617,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "ddcdfcf4471395417a1d6c3858195aea2e0cda2c9d2075dd0b69fefb5a99d1cc",
        "author": null,
        "created_at": "2025-10-13T00:00:25.024804",
        "modified_at": "2025-10-13T00:00:25.025309",
        "page_count": null,
        "word_count": 2009,
        "extracted_at": "2025-10-13T20:04:24.845394",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 20,
        "token_count": 163,
        "has_context": true
      }
    },
    {
      "index": 2,
      "text": "Consuming webhook events\nCreating a webhook\nFirst, you'll need to head to the\n**Manage**\ntab in the Inngest dashboard and then click\n**Webhooks**\n. From there, click\n**Create Webhook**\n.\nNow you'll have a uniquely generated URL that you can provide to any provider service to start sending events. These URLs are configured in different ways for different provider services. For example, with Stripe, you need to enter \"developer mode\" and configure your webhook URLs.\nGive your webhook a name and save it. Next we'll explore how to turn the request payload into Inngest events.\nInngest dashboard showing a newly created webhook",
      "char_count": 628,
      "token_count": 136,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "file_name": "platform_webhooks.md",
        "file_size": 14617,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "ddcdfcf4471395417a1d6c3858195aea2e0cda2c9d2075dd0b69fefb5a99d1cc",
        "author": null,
        "created_at": "2025-10-13T00:00:25.024804",
        "modified_at": "2025-10-13T00:00:25.025309",
        "page_count": null,
        "word_count": 2009,
        "extracted_at": "2025-10-13T20:04:24.845394",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 20,
        "token_count": 136,
        "has_context": true
      }
    },
    {
      "index": 3,
      "text": "Consuming webhook events\nDefining a transform function\nMost webhooks send event data as JSON within the POST request body. These raw events must be transformed slightly to be compatible with\n[the Inngest event payload format](\\docs\\features\\events-triggers\\event-format)\n. Mainly, we must have\n```\nname\n```\nand\n```\ndata\n```\nset in the Inngest event.\nFortunately, Inngest includes\n***transform***\nfunctions for every webhook. You can define a short JavaScript function used to transform the shape of the payload. This transform runs on Inngest's servers so there is no added load or cost to your infra.\nHere is\n[an example of a raw webhook payload from Clerk](https://clerk.com/docs/integrations/webhooks/overview#payload-structure)\non the left and our transformed event:",
      "char_count": 770,
      "token_count": 180,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "file_name": "platform_webhooks.md",
        "file_size": 14617,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "ddcdfcf4471395417a1d6c3858195aea2e0cda2c9d2075dd0b69fefb5a99d1cc",
        "author": null,
        "created_at": "2025-10-13T00:00:25.024804",
        "modified_at": "2025-10-13T00:00:25.025309",
        "page_count": null,
        "word_count": 2009,
        "extracted_at": "2025-10-13T20:04:24.845394",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 20,
        "token_count": 180,
        "has_context": true
      }
    },
    {
      "index": 4,
      "text": "Consuming webhook events\nDefining a transform function\nExample Clerk webhook payload\nCopy Copied\n```\n{\n\"type\" : \"user.created\" ,\n\"object\" : \"event\" ,\n\"data\" : {\n\"created_at\" : 1654012591514 ,\n\"external_id\" : \"567772\" ,\n\"first_name\" : \"Example\" ,\n\"id\" : \"user_29w83sxmDNGwOuEthce5gg56FcC\" ,\n\"last_name\" : \"Example\" ,\n\"last_sign_in_at\" : 1654012591514 ,\n\"object\" : \"user\" ,\n\"primary_email_address_id\" : \"idn_29w83yL7CwVlJXylYLxcslromF1\" ,\n// ... simplified for example\n} ,\n}\n```",
      "char_count": 476,
      "token_count": 197,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "file_name": "platform_webhooks.md",
        "file_size": 14617,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "ddcdfcf4471395417a1d6c3858195aea2e0cda2c9d2075dd0b69fefb5a99d1cc",
        "author": null,
        "created_at": "2025-10-13T00:00:25.024804",
        "modified_at": "2025-10-13T00:00:25.025309",
        "page_count": null,
        "word_count": 2009,
        "extracted_at": "2025-10-13T20:04:24.845394",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 20,
        "token_count": 197,
        "has_context": true
      }
    },
    {
      "index": 5,
      "text": "Consuming webhook events\nDefining a transform function\nExample Inngest event format\nCopy Copied\n```\n{\n\"name\" : \"clerk/user.created\" ,\n\"data\" : {\n\"created_at\" : 1654012591514 ,\n\"external_id\" : \"567772\" ,\n\"first_name\" : \"Example\" ,\n\"id\" : \"user_29w83sxmDNGwOuEthce5gg56FcC\" ,\n\"last_name\" : \"Example\" ,\n\"last_sign_in_at\" : 1654012591514 ,\n\"object\" : \"user\" ,\n\"primary_email_address_id\" : \"idn_29w83yL7CwVlJXylYLxcslromF1\" ,\n// ... simplified for example\n}\n}\n```\nTransforms are defined as simple JavaScript functions that accept three arguments and expect the Inngest event payload object in the returned value. The arguments are:\n- Name `evt` Type object Description The raw JSON payload from the POST request body\n- Name `headers` Type object Description A map of HTTP headers sent along with the request as key-value pairs. Header names are case-insensitive and are canonicalized by making the first character and any characters following a hyphen uppercase and the rest lowercase. For more details, [check out](https://pkg.go.dev/net/http#CanonicalHeaderKey) the underlying implementation reference.\n- Name `queryParams` Type object Description A map of parsed query string parameters sent to the webhook URL. Values are all arrays to support multiple params for a single key.\nHere's a simple transform function for the Clerk example shown above:\nCopy Copied\n```\nfunction transform (evt , headers = {} , queryParams = {}) {\nreturn {\nname : `clerk/ ${ evt .type } ` ,\ndata : evt .data ,\n// You can optionally set ts using data from the raw json payload\n// to explicitly set the timestamp of the incoming event.\n// If ts is not set, it will be automatically set to the time the request is received.\n}\n}\n```\n👉 We also recommend prefixing each event name with the name of the provider service, e.g.\n```\nclerk/user.created\n```\n,\n```\nstripe/charge.failed\n```\n.",
      "char_count": 1854,
      "token_count": 493,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "file_name": "platform_webhooks.md",
        "file_size": 14617,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "ddcdfcf4471395417a1d6c3858195aea2e0cda2c9d2075dd0b69fefb5a99d1cc",
        "author": null,
        "created_at": "2025-10-13T00:00:25.024804",
        "modified_at": "2025-10-13T00:00:25.025309",
        "page_count": null,
        "word_count": 2009,
        "extracted_at": "2025-10-13T20:04:24.845394",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 20,
        "token_count": 493,
        "has_context": true
      }
    },
    {
      "index": 6,
      "text": "Consuming webhook events\nDefining a transform function\nExample transforms\n💡 Header names are case-insensitive and are canonicalized by making the first character and any characters following a hyphen uppercase and the rest lowercase.\nRemember to check your transforms for header usage and make sure to use the correct case.\n**Github**\n- Using headers\nGithub uses a\n```\nX-Github-Event\n```\nheader to specify the event type:\nCopy Copied\n```\nfunction transform (evt , headers = {} , queryParams = {}) {\nconst name = headers[ \"X-Github-Event\" ];\nreturn {\n// Use the event as the data without modification\ndata : evt ,\n// Add an event name, prefixed with \"github.\" based off of the X-Github-Event data\nname : \"github.\" + name .trim () .replace ( \"Event\" , \"\" ) .toLowerCase () ,\n};\n}\n```\n**Stripe**\n- Using an\n```\nid\n```\nfor deduplication\nStripe sends an\n```\nid\n```\nwith every event to deduplicate events. We can use this as the\n```\nid\n```\nfor the Inngest event for the same reason:\nCopy Copied\n```\nfunction transform (evt , headers = {} , queryParams = {}) {\nreturn {\nid : evt .id ,\nname : `stripe/ ${ evt .type } ` ,\ndata : evt ,\n};\n}\n```\n**Linear**\n- Creating useful event names\nCopy Copied\n```\nfunction transform (evt , headers = {} , queryParams = {}) {\nreturn {\n// type (e.g. Issue) + action (e.g. create)\nname : `linear/ ${ evt . type .toLowerCase () } . ${ evt .action } ` ,\ndata : evt ,\n};\n}\n```\n**Intercom**\n- Setting the\n```\nts\n```\nfield\nCopy Copied\n```\nfunction transform (evt , headers = {} , queryParams = {}) {\nreturn {\nname : `intercom/ ${ evt .topic } ` ,\n// the top level obj only contains webhook data, so we omit that\ndata : evt .data ,\nts : evt .created_at * 1000 ,\n};\n};\n```\n**Resend**\nCopy Copied\n```\nfunction transform (evt , headers = {} , queryParams = {}) {\nreturn {\nname : `resend/ ${ evt .type } ` ,\ndata : evt .data ,\n};\n};\n```",
      "char_count": 1851,
      "token_count": 502,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "file_name": "platform_webhooks.md",
        "file_size": 14617,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "ddcdfcf4471395417a1d6c3858195aea2e0cda2c9d2075dd0b69fefb5a99d1cc",
        "author": null,
        "created_at": "2025-10-13T00:00:25.024804",
        "modified_at": "2025-10-13T00:00:25.025309",
        "page_count": null,
        "word_count": 2009,
        "extracted_at": "2025-10-13T20:04:24.845394",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 20,
        "token_count": 502,
        "has_context": true
      }
    },
    {
      "index": 7,
      "text": "Consuming webhook events\nDefining a transform function\nTesting transforms\nThe Inngest dashboard includes a tool to quickly test your transform function. You can paste the incoming payload from the webhook provider in the \"Incoming Event JSON\" editor and immediately preview what the transformed event will look like.\nInngest dashboard transform testing\nSome webhook providers do not provide example payloads in their documentation. If that's the case, you can use a tool that we built,\n[TypedWebhooks.tools](https://typedwebhook.tools/?ref=)\nto test webhooks and browse payloads.",
      "char_count": 579,
      "token_count": 116,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "file_name": "platform_webhooks.md",
        "file_size": 14617,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "ddcdfcf4471395417a1d6c3858195aea2e0cda2c9d2075dd0b69fefb5a99d1cc",
        "author": null,
        "created_at": "2025-10-13T00:00:25.024804",
        "modified_at": "2025-10-13T00:00:25.025309",
        "page_count": null,
        "word_count": 2009,
        "extracted_at": "2025-10-13T20:04:24.845394",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 20,
        "token_count": 116,
        "has_context": true
      }
    },
    {
      "index": 8,
      "text": "Consuming webhook events\nAdvanced configuration\nAdditionally, you can configure allow/deny lists for event names and IP addresses. This can be useful if you want a bit more control over what events are ingested.",
      "char_count": 211,
      "token_count": 42,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "file_name": "platform_webhooks.md",
        "file_size": 14617,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "ddcdfcf4471395417a1d6c3858195aea2e0cda2c9d2075dd0b69fefb5a99d1cc",
        "author": null,
        "created_at": "2025-10-13T00:00:25.024804",
        "modified_at": "2025-10-13T00:00:25.025309",
        "page_count": null,
        "word_count": 2009,
        "extracted_at": "2025-10-13T20:04:24.845394",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 20,
        "token_count": 42,
        "has_context": true
      }
    },
    {
      "index": 9,
      "text": "Consuming webhook events\nManaging webhooks via REST API\nWebhooks can be created, updated and deleted all via the Inngest REST API. This is very useful if you want to manage all transforms within your codebase and sync them to the Inngest platform. Check out the documentation below to learn more:",
      "char_count": 296,
      "token_count": 64,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "file_name": "platform_webhooks.md",
        "file_size": 14617,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "ddcdfcf4471395417a1d6c3858195aea2e0cda2c9d2075dd0b69fefb5a99d1cc",
        "author": null,
        "created_at": "2025-10-13T00:00:25.024804",
        "modified_at": "2025-10-13T00:00:25.025309",
        "page_count": null,
        "word_count": 2009,
        "extracted_at": "2025-10-13T20:04:24.845394",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 20,
        "token_count": 64,
        "has_context": true
      }
    },
    {
      "index": 10,
      "text": "Consuming webhook events\nAPI: Webhooks\n[Read the documentation about managing Webhooks via the Inngest REST API](https://api-docs.inngest.com/docs/inngest-api/b539bae406d1f-get-all-webhook-endpoints-in-given-environment)",
      "char_count": 220,
      "token_count": 64,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "file_name": "platform_webhooks.md",
        "file_size": 14617,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "ddcdfcf4471395417a1d6c3858195aea2e0cda2c9d2075dd0b69fefb5a99d1cc",
        "author": null,
        "created_at": "2025-10-13T00:00:25.024804",
        "modified_at": "2025-10-13T00:00:25.025309",
        "page_count": null,
        "word_count": 2009,
        "extracted_at": "2025-10-13T20:04:24.845394",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 20,
        "token_count": 64,
        "has_context": true
      }
    },
    {
      "index": 11,
      "text": "Consuming webhook events\nDemo: Webhook transform sync\n[View an end-to-end example of how to test and sync Webhooks in your codebase.](https://github.com/inngest/webhook-transform-sync)",
      "char_count": 184,
      "token_count": 45,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "file_name": "platform_webhooks.md",
        "file_size": 14617,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "ddcdfcf4471395417a1d6c3858195aea2e0cda2c9d2075dd0b69fefb5a99d1cc",
        "author": null,
        "created_at": "2025-10-13T00:00:25.024804",
        "modified_at": "2025-10-13T00:00:25.025309",
        "page_count": null,
        "word_count": 2009,
        "extracted_at": "2025-10-13T20:04:24.845394",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 20,
        "token_count": 45,
        "has_context": true
      }
    },
    {
      "index": 12,
      "text": "Consuming webhook events\nLocal development\nTo test your webhook locally, you can forward events to the\n[Dev Server](\\docs\\local-development)\nfrom the Inngest dashboard using the \"Send to Dev Server\" button. This button is found anywhere that an event payload is visible on the Inngest dashboard. This will send a copy of the event to your local machine where you can test your functions.\nSend to dev server button in the Inngest cloud dashboard",
      "char_count": 444,
      "token_count": 96,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "file_name": "platform_webhooks.md",
        "file_size": 14617,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "ddcdfcf4471395417a1d6c3858195aea2e0cda2c9d2075dd0b69fefb5a99d1cc",
        "author": null,
        "created_at": "2025-10-13T00:00:25.024804",
        "modified_at": "2025-10-13T00:00:25.025309",
        "page_count": null,
        "word_count": 2009,
        "extracted_at": "2025-10-13T20:04:24.845394",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 20,
        "token_count": 96,
        "has_context": true
      }
    },
    {
      "index": 13,
      "text": "Consuming webhook events\nWriting functions\nNow that you have events flowing into Inngest, you can write functions that that handle the events that you care about. You can also explore the list of events that have been received at any time by heading to the\n*Events*\ntab of the Inngest dashboard.",
      "char_count": 295,
      "token_count": 64,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "file_name": "platform_webhooks.md",
        "file_size": 14617,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "ddcdfcf4471395417a1d6c3858195aea2e0cda2c9d2075dd0b69fefb5a99d1cc",
        "author": null,
        "created_at": "2025-10-13T00:00:25.024804",
        "modified_at": "2025-10-13T00:00:25.025309",
        "page_count": null,
        "word_count": 2009,
        "extracted_at": "2025-10-13T20:04:24.845394",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 20,
        "token_count": 64,
        "has_context": true
      }
    },
    {
      "index": 14,
      "text": "Consuming webhook events\nWriting functions\nExample: Send a welcome email when the clerk/user.created event is received\nCopy Copied\n```\ninngest .createFunction (\n{ name : \"Send welcome email\" , id : \"send-welcome-email\" } ,\n{ event : \"clerk/user.created\" } ,\nasync ({ event , step }) => {\nconst emailAddress = event . data .email_addresses[ 0 ].email_address;\nawait step .run ( 'send-email' , async () => {\nreturn await resend . emails .send ({\nto : emailAddress ,\nfrom : \"noreply@inngest.com\" ,\nsubject : \"Welcome to Inngest!\" ,\nreact : WelcomeEmail () ,\n})\n});\n}\n)\n```\n💡\n**Tip**\n: To test functions locally, copy an event from a webhook from the Inngest dashboard and use it with the Inngest dev server's\n```\nSend test\n```\nbutton.",
      "char_count": 731,
      "token_count": 194,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "file_name": "platform_webhooks.md",
        "file_size": 14617,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "ddcdfcf4471395417a1d6c3858195aea2e0cda2c9d2075dd0b69fefb5a99d1cc",
        "author": null,
        "created_at": "2025-10-13T00:00:25.024804",
        "modified_at": "2025-10-13T00:00:25.025309",
        "page_count": null,
        "word_count": 2009,
        "extracted_at": "2025-10-13T20:04:24.845394",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 20,
        "token_count": 194,
        "has_context": true
      }
    },
    {
      "index": 15,
      "text": "Consuming webhook events\nVerifying request signatures\nMany webhook providers sign their requests with a secret key to ensure that the request is coming from them. This establishes trust with the webhook provider and ensures that the event data has not been tampered with.\nTo verify a webhook signature, you'll need to return the signature and raw request body string in your transform. For example, the following transform function could be used for Stripe webhooks:\nCopy Copied\n```\nfunction transform (evt , headers , queryParams , raw) {\nreturn {\nname : `stripe/ ${ evt .type } ` ,\ndata : {\nraw ,\nsig : headers[ \"Stripe-Signature\" ] ,\n}\n};\n};\n```\nThen you can use that data to verify the signature in your Inngest functions:\nCopy Copied\n```\ninngest .createFunction (\n{ id : \"stripe/charge.updated\" } ,\n{ event : \"stripe/charge.updated\" } ,\nasync ({ attempt , event , step }) => {\nif ( ! verifySig ( event . data .raw , event . data .sig , stripeSecret)) {\nthrow new NonRetriableError ( \"failed signature verification\" );\n}\n\n// Now it's safe to use the event data.\nconst data = JSON .parse ( event . data .raw);\n}\n);\n```",
      "char_count": 1121,
      "token_count": 267,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "file_name": "platform_webhooks.md",
        "file_size": 14617,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "ddcdfcf4471395417a1d6c3858195aea2e0cda2c9d2075dd0b69fefb5a99d1cc",
        "author": null,
        "created_at": "2025-10-13T00:00:25.024804",
        "modified_at": "2025-10-13T00:00:25.025309",
        "page_count": null,
        "word_count": 2009,
        "extracted_at": "2025-10-13T20:04:24.845394",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 20,
        "token_count": 267,
        "has_context": true
      }
    },
    {
      "index": 16,
      "text": "Consuming webhook events\nBranch environments\nAll branch environments share the same webhooks. They are centrally-managed in a\n[single page](https://app.inngest.com/env/branch/manage/webhooks)\n.\nAdditionally, the target branch environment must be specified using either an\n```\nx-inngest-env\n```\nquery param or header. For example, the following command will send an webhook to the\n```\nbranch-1\n```\nbranch environment:\nCopy Copied\n```\ncurl 'https://inn.gs/e/REDACTED?x-inngest-env=branch-1' -d '{\"msg\": \"hi\"}'\n```\nIf the branch environment is not specified with the header or query param, the webhook will be sent to\n[this page](https://app.inngest.com/env/branch/events)\nand will not trigger any functions. Events will also go here if the branch environment does not exist.\nThe value for\n```\nx-inngest-env\n```\nis the name of the branch environment, not the ID in the URL.",
      "char_count": 870,
      "token_count": 221,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "file_name": "platform_webhooks.md",
        "file_size": 14617,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "ddcdfcf4471395417a1d6c3858195aea2e0cda2c9d2075dd0b69fefb5a99d1cc",
        "author": null,
        "created_at": "2025-10-13T00:00:25.024804",
        "modified_at": "2025-10-13T00:00:25.025309",
        "page_count": null,
        "word_count": 2009,
        "extracted_at": "2025-10-13T20:04:24.845394",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 20,
        "token_count": 221,
        "has_context": true
      }
    },
    {
      "index": 17,
      "text": "Consuming webhook events\nSupported content types\nWebhooks currently support the following content types:\n- application/json\n- application/x-www-form-urlencoded\n- multipart/form-data\nThe\n```\napplication/x-www-form-urlencoded\n```\nand\n```\nmultipart/form-data\n```\ncontent types are currently in beta.",
      "char_count": 296,
      "token_count": 63,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "file_name": "platform_webhooks.md",
        "file_size": 14617,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "ddcdfcf4471395417a1d6c3858195aea2e0cda2c9d2075dd0b69fefb5a99d1cc",
        "author": null,
        "created_at": "2025-10-13T00:00:25.024804",
        "modified_at": "2025-10-13T00:00:25.025309",
        "page_count": null,
        "word_count": 2009,
        "extracted_at": "2025-10-13T20:04:24.845394",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 20,
        "token_count": 63,
        "has_context": true
      }
    },
    {
      "index": 18,
      "text": "Consuming webhook events\nSupported content types\nProcessing webhooks with URL params or Form Data content\nGiven the following\n```\napplication/x-www-form-urlencoded\n```\nwebhook:\nCopy Copied\n```\ncurl https://inn.gs/e/REDACTED \\\n-H \"content-type: application/x-www-form-urlencoded\" \\\n-d \"name=Alice&messages=hello&messages=world\"\n```\nAnd your webhook transform looks like this:\nCopy Copied\n```\nfunction transform (json , headers , queryParams , raw) {\nreturn {\nname : \"hi\" ,\ndata : { json , raw } ,\n};\n};\n```\nThen the resulting event data will be:\nCopy Copied\n```\n{\n\"json\" : {\n\"messages\" : [ \"hello\" , \"world\" ] ,\n\"name\" : [ \"Alice\" ]\n} ,\n\"raw\" : \"name=Alice&messages=hello&messages=world\"\n}\n```\n⚠️\n**Note that the JSON object's values are always arrays of strings.**",
      "char_count": 764,
      "token_count": 211,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "file_name": "platform_webhooks.md",
        "file_size": 14617,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "ddcdfcf4471395417a1d6c3858195aea2e0cda2c9d2075dd0b69fefb5a99d1cc",
        "author": null,
        "created_at": "2025-10-13T00:00:25.024804",
        "modified_at": "2025-10-13T00:00:25.025309",
        "page_count": null,
        "word_count": 2009,
        "extracted_at": "2025-10-13T20:04:24.845394",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 20,
        "token_count": 211,
        "has_context": true
      }
    },
    {
      "index": 19,
      "text": "Consuming webhook events\nBuilding webhook integrations\nInngest has a feature called\n**webhook intents**\nthat allows you to build webhook integrations with any application.\n[Read more about building webhook integrations here](\\docs\\platform\\webhooks\\build-an-integration)\n.",
      "char_count": 272,
      "token_count": 58,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\platform_webhooks.md",
        "file_name": "platform_webhooks.md",
        "file_size": 14617,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "ddcdfcf4471395417a1d6c3858195aea2e0cda2c9d2075dd0b69fefb5a99d1cc",
        "author": null,
        "created_at": "2025-10-13T00:00:25.024804",
        "modified_at": "2025-10-13T00:00:25.025309",
        "page_count": null,
        "word_count": 2009,
        "extracted_at": "2025-10-13T20:04:24.845394",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 20,
        "token_count": 58,
        "has_context": true
      }
    }
  ]
}