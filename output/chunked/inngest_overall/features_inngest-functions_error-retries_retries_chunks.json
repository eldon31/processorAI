{
  "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_error-retries_retries.md",
  "title": "Retries",
  "num_chunks": 5,
  "total_chars": 5102,
  "chunks": [
    {
      "index": 0,
      "text": "On this page\n- [Retries](\\docs\\features\\inngest-functions\\error-retries\\retries#retries)\n- [Steps and Retries](\\docs\\features\\inngest-functions\\error-retries\\retries#steps-and-retries)\n- [Preventing retries with Non-retriable errors](\\docs\\features\\inngest-functions\\error-retries\\retries#preventing-retries-with-non-retriable-errors)\n- [Customizing retry times](\\docs\\features\\inngest-functions\\error-retries\\retries#customizing-retry-times)\nFeatures\n[Inngest Functions](\\docs\\features\\inngest-functions)\n[Errors & Retries](\\docs\\guides\\error-handling)",
      "char_count": 553,
      "token_count": 162,
      "metadata": {
        "title": "Retries",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_error-retries_retries.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_error-retries_retries.md",
        "file_name": "features_inngest-functions_error-retries_retries.md",
        "file_size": 5485,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "162de7654e1089bc5d5bdb790b8189ceaeaf5a5dd96e64493e546530f68aa859",
        "author": null,
        "created_at": "2025-10-12T23:58:49.891117",
        "modified_at": "2025-10-12T23:58:49.891117",
        "page_count": null,
        "word_count": 799,
        "extracted_at": "2025-10-13T20:03:22.875977",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 5,
        "token_count": 162,
        "has_context": true
      }
    },
    {
      "index": 1,
      "text": "Retries\nBy default, in\n*addition*\nto the\n**initial attempt**\n, Inngest will retry a function or a step up to 4 times until it succeeds. This means that for a function with a default configuration, it will be attempted 5 times in total.\nFor the function below, if the database write fails then it'll be retried up to 4 times until it succeeds:\nTypeScript Go Python\nCopy Copied\n```\ninngest .createFunction (\n{ id : \"click-recorder\" } ,\n{ event : \"app/button.clicked\" } ,\nasync ({ event , attempt }) => {\nawait db . clicks .insertOne ( event .data); // this code now retries!\n} ,\n);\n```\nYou can configure the number of\n```\nretries\n```\nby specifying it in your function configuration. Setting the value to\n```\n0\n```\nwill disable retries.\nTypeScript Go Python\nCopy Copied\n```\ninngest .createFunction (\n{\nid : \"click-recorder\" ,\nretries : 10 , // choose how many retries you'd like\n} ,\n{ event : \"app/button.clicked\" } ,\nasync ({ event , step , attempt }) => { /* ... */ } ,\n);\n```\nYou can customize the behavior of your function based on the number of retries using the\n```\nattempt\n```\nargument.\n```\nattempt\n```\nis passed in the function handler's context and is zero-indexed, meaning the first attempt is\n```\n0\n```\n, the second is\n```\n1\n```\n, and so on. The\n```\nattempt\n```\nis incremented every time the function throws an error and is retried, and is reset when steps complete. This allows you to handle attempt numbers differently in each step.\nRetries will be performed with backoff according to\n[the default schedule](https://github.com/inngest/inngest/blob/main/pkg/backoff/backoff.go#L10-L22)\n.",
      "char_count": 1596,
      "token_count": 421,
      "metadata": {
        "title": "Retries",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_error-retries_retries.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_error-retries_retries.md",
        "file_name": "features_inngest-functions_error-retries_retries.md",
        "file_size": 5485,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "162de7654e1089bc5d5bdb790b8189ceaeaf5a5dd96e64493e546530f68aa859",
        "author": null,
        "created_at": "2025-10-12T23:58:49.891117",
        "modified_at": "2025-10-12T23:58:49.891117",
        "page_count": null,
        "word_count": 799,
        "extracted_at": "2025-10-13T20:03:22.875977",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 5,
        "token_count": 421,
        "has_context": true
      }
    },
    {
      "index": 2,
      "text": "Retries\nSteps and Retries\nA function can be broken down into multiple steps, where each step is individually executed and retried.\nHere, both the \"\n*get-data*\n\" and \"\n*save-data*\n\" steps have their own set of retries. If the \"\n*save-data*\n\" step has a failure, it's retried, alone, in a separate request.\nTypeScript Go Python\nCopy Copied\n```\ninngest .createFunction (\n{ id : \"sync-systems\" } ,\n{ event : \"auto/sync.request\" } ,\nasync ({ step }) => {\n// Can be retried up to 4 times\nconst data = await step .run ( \"get-data\" , async () => {\nreturn getDataFromExternalSource ();\n});\n\n// Can also be retried up to 4 times\nawait step .run ( \"save-data\" , async () => {\nreturn db . syncs .insertOne (data);\n});\n} ,\n);\n```\nYou can configure the number of\n[```\nretries\n```](\\docs\\reference\\functions\\create#inngest-create-function-configuration-trigger-handler-inngest-function)\nfor each function. This excludes the initial attempt.  A retry count of\n```\n4\n```\nmeans that each step will be attempted up to 5 times.",
      "char_count": 1007,
      "token_count": 274,
      "metadata": {
        "title": "Retries",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_error-retries_retries.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_error-retries_retries.md",
        "file_name": "features_inngest-functions_error-retries_retries.md",
        "file_size": 5485,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "162de7654e1089bc5d5bdb790b8189ceaeaf5a5dd96e64493e546530f68aa859",
        "author": null,
        "created_at": "2025-10-12T23:58:49.891117",
        "modified_at": "2025-10-12T23:58:49.891117",
        "page_count": null,
        "word_count": 799,
        "extracted_at": "2025-10-13T20:03:22.875977",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 5,
        "token_count": 274,
        "has_context": true
      }
    },
    {
      "index": 3,
      "text": "Retries\nPreventing retries with Non-retriable errors\nYou can throw a\n[non-retriable error](\\docs\\reference\\typescript\\functions\\errors#non-retriable-error)\nfrom a step or a function, which will bypass any remaining retries and fail the step or function it was thrown from.\nThis is useful for when you know an error is permanent and want to stop all execution. In this example, the user doesn't exist, so there's no need to continue to email them.\nTypeScript Go Python\nCopy Copied\n```\nimport { NonRetriableError } from \"inngest\" ;\n\ninngest .createFunction (\n{ id : \"user-weekly-digest\" } ,\n{ event : \"user/weekly.digest.requested\" } ,\nasync ({ event , step }) => {\nconst user = await step\n.run ( \"get-user-email\" , () => {\nreturn db . users .findOne ( event . data .userId);\n})\n.catch ((err) => {\nif ( err .name === \"UserNotFoundError\" ) {\nthrow new NonRetriableError ( \"User no longer exists; stopping\" );\n}\n\nthrow err;\n});\n\nawait step .run ( \"send-digest\" , () => {\nreturn sendDigest ( user .email);\n});\n} ,\n);\n```",
      "char_count": 1015,
      "token_count": 270,
      "metadata": {
        "title": "Retries",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_error-retries_retries.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_error-retries_retries.md",
        "file_name": "features_inngest-functions_error-retries_retries.md",
        "file_size": 5485,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "162de7654e1089bc5d5bdb790b8189ceaeaf5a5dd96e64493e546530f68aa859",
        "author": null,
        "created_at": "2025-10-12T23:58:49.891117",
        "modified_at": "2025-10-12T23:58:49.891117",
        "page_count": null,
        "word_count": 799,
        "extracted_at": "2025-10-13T20:03:22.875977",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 5,
        "token_count": 270,
        "has_context": true
      }
    },
    {
      "index": 4,
      "text": "Retries\nCustomizing retry times\nRetries are executed with exponential back-off with some jitter, but it's also possible to specify exactly when you'd like a step or function to be retried.\nIn this example, an external API provided\n```\nRetry-After\n```\nheader with information on when requests can be made again, so you can tell Inngest to retry your function then.\nTypeScript Go Python\nCopy Copied\n```\nimport { RetryAfterError } from 'inngest' ;\n\ninngest .createFunction (\n{ id : \"send-welcome-notification\" } ,\n{ event : \"app/user.created\" } ,\nasync ({ event , step }) => {\n\nconst msg = await step .run ( 'send-message' , async () => {\nconst { success , retryAfter , message } = await twilio . messages .create ({\nto : event . data . user .phoneNumber ,\nbody : \"Welcome to our service!\" ,\n});\n\nif ( ! success && retryAfter) {\nthrow new RetryAfterError ( \"Hit Twilio rate limit\" , retryAfter);\n}\n\nreturn { message };\n});\n\n} ,\n);\n```",
      "char_count": 931,
      "token_count": 233,
      "metadata": {
        "title": "Retries",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_error-retries_retries.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\features_inngest-functions_error-retries_retries.md",
        "file_name": "features_inngest-functions_error-retries_retries.md",
        "file_size": 5485,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "162de7654e1089bc5d5bdb790b8189ceaeaf5a5dd96e64493e546530f68aa859",
        "author": null,
        "created_at": "2025-10-12T23:58:49.891117",
        "modified_at": "2025-10-12T23:58:49.891117",
        "page_count": null,
        "word_count": 799,
        "extracted_at": "2025-10-13T20:03:22.875977",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 5,
        "token_count": 233,
        "has_context": true
      }
    }
  ]
}