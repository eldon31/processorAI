{
  "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-invoke.md",
  "title": "#### On this page",
  "num_chunks": 17,
  "total_chars": 8597,
  "chunks": [
    {
      "index": 0,
      "text": "On this page\n- [Invoke](\\docs\\reference\\functions\\step-invoke#invoke)\n- [step.invoke(id, options): Promise](\\docs\\reference\\functions\\step-invoke#step-invoke-id-options-promise)\n- [How to call step.invoke()](\\docs\\reference\\functions\\step-invoke#how-to-call-step-invoke)\n- [Using function references](\\docs\\reference\\functions\\step-invoke#using-function-references)\n- [When to use step.invoke()](\\docs\\reference\\functions\\step-invoke#when-to-use-step-invoke)\n- [Internal behaviour](\\docs\\reference\\functions\\step-invoke#internal-behaviour)\n- [Return values and serialization](\\docs\\reference\\functions\\step-invoke#return-values-and-serialization)\n- [Retries](\\docs\\reference\\functions\\step-invoke#retries)\n- [Error handling](\\docs\\reference\\functions\\step-invoke#error-handling)\n- [Function not found](\\docs\\reference\\functions\\step-invoke#function-not-found)\n- [Invoked function fails](\\docs\\reference\\functions\\step-invoke#invoked-function-fails)\n- [Invoked function times out](\\docs\\reference\\functions\\step-invoke#invoked-function-times-out)\n- [Invoked function is rate limited](\\docs\\reference\\functions\\step-invoke#invoked-function-is-rate-limited)\n- [Usage limits](\\docs\\reference\\functions\\step-invoke#usage-limits)\nReferences\n[TypeScript SDK](\\docs\\reference\\typescript)\n[Steps](\\docs\\reference\\functions\\step-run)",
      "char_count": 1323,
      "token_count": 355,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-invoke.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-invoke.md",
        "file_name": "reference_functions_step-invoke.md",
        "file_size": 9249,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "fabb5947d5ae6021b8f8c41f9debe843d4cccc76044d35d133059661d0555411",
        "author": null,
        "created_at": "2025-10-13T00:00:38.840249",
        "modified_at": "2025-10-13T00:00:38.840249",
        "page_count": null,
        "word_count": 1165,
        "extracted_at": "2025-10-13T20:04:32.645976",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 17,
        "token_count": 355,
        "has_context": true
      }
    },
    {
      "index": 1,
      "text": "Invoke v3.7.0+\nUse\n```\nstep.invoke()\n```\nto asynchronously call another function and handle the result. Invoking other functions allows you to easily re-use functionality and compose them to create more complex workflows or map-reduce type jobs.\n```\nstep.invoke()\n```\nreturns a\n```\nPromise\n```\nthat resolves with the return value of the invoked function.\nCopy Copied\n```\n// Some function we'll call\nconst computeSquare = inngest .createFunction (\n{ id : \"compute-square\" } ,\n{ event : \"calculate/square\" } ,\nasync ({ event }) => {\nreturn { result : event . data .number * event . data .number }; // Result typed as { result: number }\n}\n);\n\n// In this function, we'll call `computeSquare`\nconst mainFunction = inngest .createFunction (\n{ id : \"main-function\" } ,\n{ event : \"main/event\" } ,\nasync ({ step }) => {\nconst square = await step .invoke ( \"compute-square-value\" , {\nfunction : computeSquare ,\ndata : { number : 4 } , // input data is typed, requiring input if it's needed\n});\n\nreturn `Square of 4 is ${ square .result } .` ; // square.result is typed as number\n}\n);\n```",
      "char_count": 1077,
      "token_count": 272,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-invoke.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-invoke.md",
        "file_name": "reference_functions_step-invoke.md",
        "file_size": 9249,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "fabb5947d5ae6021b8f8c41f9debe843d4cccc76044d35d133059661d0555411",
        "author": null,
        "created_at": "2025-10-13T00:00:38.840249",
        "modified_at": "2025-10-13T00:00:38.840249",
        "page_count": null,
        "word_count": 1165,
        "extracted_at": "2025-10-13T20:04:32.645976",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 17,
        "token_count": 272,
        "has_context": true
      }
    },
    {
      "index": 2,
      "text": "Invoke v3.7.0+\nstep.invoke(id, options): Promise\n- Name `id` Type string Required required Description The ID of the invocation. This is used in logs and to keep track of the invocation's state across different versions.\n- Name `options` Type object Required required Description Options for the invocation: Properties Throwing errors within the invoked function will be reflected in the invoking function.",
      "char_count": 406,
      "token_count": 81,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-invoke.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-invoke.md",
        "file_name": "reference_functions_step-invoke.md",
        "file_size": 9249,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "fabb5947d5ae6021b8f8c41f9debe843d4cccc76044d35d133059661d0555411",
        "author": null,
        "created_at": "2025-10-13T00:00:38.840249",
        "modified_at": "2025-10-13T00:00:38.840249",
        "page_count": null,
        "word_count": 1165,
        "extracted_at": "2025-10-13T20:04:32.645976",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 17,
        "token_count": 81,
        "has_context": true
      }
    },
    {
      "index": 3,
      "text": "Invoke v3.7.0+\nstep.invoke(id, options): Promise\nInvoke a function directly\nCopy Copied\n```\nconst resultFromDirectCall = await step .invoke ( \"invoke-by-definition\" , {\nfunction : anotherFunction ,\ndata : { ... } ,\n});\n```",
      "char_count": 222,
      "token_count": 58,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-invoke.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-invoke.md",
        "file_name": "reference_functions_step-invoke.md",
        "file_size": 9249,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "fabb5947d5ae6021b8f8c41f9debe843d4cccc76044d35d133059661d0555411",
        "author": null,
        "created_at": "2025-10-13T00:00:38.840249",
        "modified_at": "2025-10-13T00:00:38.840249",
        "page_count": null,
        "word_count": 1165,
        "extracted_at": "2025-10-13T20:04:32.645976",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 17,
        "token_count": 58,
        "has_context": true
      }
    },
    {
      "index": 4,
      "text": "Invoke v3.7.0+\nstep.invoke(id, options): Promise\nInvoke a function using a function reference\nCopy Copied\n```\nconst resultFromReference = await step .invoke ( \"invoke-by-reference\" , {\nfunction : referenceFunction ( ... ) ,\ndata : { ... } ,\n});\n```",
      "char_count": 248,
      "token_count": 63,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-invoke.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-invoke.md",
        "file_name": "reference_functions_step-invoke.md",
        "file_size": 9249,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "fabb5947d5ae6021b8f8c41f9debe843d4cccc76044d35d133059661d0555411",
        "author": null,
        "created_at": "2025-10-13T00:00:38.840249",
        "modified_at": "2025-10-13T00:00:38.840249",
        "page_count": null,
        "word_count": 1165,
        "extracted_at": "2025-10-13T20:04:32.645976",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 17,
        "token_count": 63,
        "has_context": true
      }
    },
    {
      "index": 5,
      "text": "Invoke v3.7.0+\nstep.invoke(id, options): Promise\nInvoke a function with a timeout\nCopy Copied\n```\nconst resultFromDirectCall = await step .invoke ( \"invoke-with-timeout\" , {\nfunction : anotherFunction ,\ndata : { ... } ,\ntimeout : \"1h\" ,\n});\n```",
      "char_count": 244,
      "token_count": 68,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-invoke.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-invoke.md",
        "file_name": "reference_functions_step-invoke.md",
        "file_size": 9249,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "fabb5947d5ae6021b8f8c41f9debe843d4cccc76044d35d133059661d0555411",
        "author": null,
        "created_at": "2025-10-13T00:00:38.840249",
        "modified_at": "2025-10-13T00:00:38.840249",
        "page_count": null,
        "word_count": 1165,
        "extracted_at": "2025-10-13T20:04:32.645976",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 17,
        "token_count": 68,
        "has_context": true
      }
    },
    {
      "index": 6,
      "text": "Invoke v3.7.0+\nHow to call step.invoke()\nHandling\n```\nstep.invoke()\n```\nis similar to handling any other Promise in JavaScript:\nCopy Copied\n```\n// Using the \"await\" keyword\nconst result = await step .invoke ( \"invoke-function\" , {\nfunction : someInngestFn ,\ndata : { ... } ,\n});\n\n// Using `then` for chaining\nstep\n.invoke ( \"invoke-function\" , { function : someInngestFn , data : { ... } })\n.then ((result) => {\n// further processing\n});\n\n// Running multiple invocations in parallel\nPromise .all ([\nstep .invoke ( \"invoke-first-function\" , {\nfunction : firstFunctionReference ,\ndata : { ... } ,\n}) ,\nstep .invoke ( \"invoke-second-function\" , {\nfunction : secondFn ,\ndata : { ... } ,\n}) ,\n]);\n```",
      "char_count": 695,
      "token_count": 183,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-invoke.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-invoke.md",
        "file_name": "reference_functions_step-invoke.md",
        "file_size": 9249,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "fabb5947d5ae6021b8f8c41f9debe843d4cccc76044d35d133059661d0555411",
        "author": null,
        "created_at": "2025-10-13T00:00:38.840249",
        "modified_at": "2025-10-13T00:00:38.840249",
        "page_count": null,
        "word_count": 1165,
        "extracted_at": "2025-10-13T20:04:32.645976",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 17,
        "token_count": 183,
        "has_context": true
      }
    },
    {
      "index": 7,
      "text": "Invoke v3.7.0+\nUsing function references\nInstead of directly importing a local function to invoke,\n[```\nreferenceFunction()\n```](\\docs\\functions\\references)\ncan be used to call an Inngest function located in another app, or to avoid importing the dependencies of a function within the same app.\nCopy Copied\n```\nimport { referenceFunction } from \"inngest\" ;\nimport { type computePi } from \"@/inngest/computePi\" ;\n\n// Create a local reference to a function without importing dependencies\nconst computePi = referenceFunction < typeof computePi>({\nfunctionId : \"compute-pi\" ,\n});\n\n// Create a reference to a function in another application\nconst computeSquare = referenceFunction ({\nappId : \"my-python-app\" ,\nfunctionId : \"compute-square\" ,\n});\n\n// square.result is typed as a number\nconst square = await step .invoke ( \"compute-square-value\" , {\nfunction : computePi ,\ndata : { number : 4 } , // input data is typed, requiring input if it's needed\n});\n```\nSee\n[Referencing functions](\\docs\\functions\\references)\nfor more information.",
      "char_count": 1030,
      "token_count": 240,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-invoke.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-invoke.md",
        "file_name": "reference_functions_step-invoke.md",
        "file_size": 9249,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "fabb5947d5ae6021b8f8c41f9debe843d4cccc76044d35d133059661d0555411",
        "author": null,
        "created_at": "2025-10-13T00:00:38.840249",
        "modified_at": "2025-10-13T00:00:38.840249",
        "page_count": null,
        "word_count": 1165,
        "extracted_at": "2025-10-13T20:04:32.645976",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 17,
        "token_count": 240,
        "has_context": true
      }
    },
    {
      "index": 8,
      "text": "Invoke v3.7.0+\nWhen to use step.invoke()\nUse of\n```\nstep.invoke()\n```\nto call an Inngest function directly is more akin to traditional RPC than Inngest's usual event-driven flow. While this tool still uses events behind the scenes, you can use it to help break up your codebase into reusable workflows that can be called from anywhere.\nUse\n```\nstep.invoke()\n```\nin tasks that need specific settings like concurrency limits. Because it runs with its own configuration,\ndistinct from the invoker's, you can provide a tailored configuration for each function.\nIf you don't need to define granular configuration or if your function won't be reused across app boundaries, use\n```\nstep.run()\n```\nfor simplicity.",
      "char_count": 705,
      "token_count": 157,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-invoke.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-invoke.md",
        "file_name": "reference_functions_step-invoke.md",
        "file_size": 9249,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "fabb5947d5ae6021b8f8c41f9debe843d4cccc76044d35d133059661d0555411",
        "author": null,
        "created_at": "2025-10-13T00:00:38.840249",
        "modified_at": "2025-10-13T00:00:38.840249",
        "page_count": null,
        "word_count": 1165,
        "extracted_at": "2025-10-13T20:04:32.645976",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 17,
        "token_count": 157,
        "has_context": true
      }
    },
    {
      "index": 9,
      "text": "Invoke v3.7.0+\nInternal behaviour\nWhen a function object is passed as an argument, internally, the SDK retrieves the function's ID automatically. Alternatively, if a function ID\n```\nstring\n```\nis passed, the Inngest SDK will assert the ID is correct at runtime. See\n[Error handling](\\docs\\reference\\functions\\step-invoke#error-handling)\nfor more information about this point.\nWhen Inngest receives the request to invoke a function, it'll do so and wait for an\n```\ninngest/function.finished\n```\nevent, which it will use to fulfil the data (or error) for the step.",
      "char_count": 562,
      "token_count": 138,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-invoke.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-invoke.md",
        "file_name": "reference_functions_step-invoke.md",
        "file_size": 9249,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "fabb5947d5ae6021b8f8c41f9debe843d4cccc76044d35d133059661d0555411",
        "author": null,
        "created_at": "2025-10-13T00:00:38.840249",
        "modified_at": "2025-10-13T00:00:38.840249",
        "page_count": null,
        "word_count": 1165,
        "extracted_at": "2025-10-13T20:04:32.645976",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 17,
        "token_count": 138,
        "has_context": true
      }
    },
    {
      "index": 10,
      "text": "Invoke v3.7.0+\nReturn values and serialization\nSimilar to\n```\nstep.run()\n```\n, all data returned from\n```\nstep.invoke()\n```\nis serialized as JSON. This is done to enable the SDK to return a valid serialized response to the Inngest service.",
      "char_count": 239,
      "token_count": 61,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-invoke.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-invoke.md",
        "file_name": "reference_functions_step-invoke.md",
        "file_size": 9249,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "fabb5947d5ae6021b8f8c41f9debe843d4cccc76044d35d133059661d0555411",
        "author": null,
        "created_at": "2025-10-13T00:00:38.840249",
        "modified_at": "2025-10-13T00:00:38.840249",
        "page_count": null,
        "word_count": 1165,
        "extracted_at": "2025-10-13T20:04:32.645976",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 17,
        "token_count": 61,
        "has_context": true
      }
    },
    {
      "index": 11,
      "text": "Invoke v3.7.0+\nRetries\nThe invoked function will be executed as a regular Inngest function: it will have its own set of retries and can be seen as a brand new run.\nIf a\n```\nstep.invoke()\n```\nfails for any of the reasons below, it will throw a\n```\nNonRetriableError\n```\n. This is to combat compounding retries, such that chains of invoked functions can be executed many more times than expected. For example, if A invokes B which invokes C, which invokes D, on failure D would be run 27 times (\n```\nretryCount^n\n```\n).\nThis may change on the future -\n[let us know](https://roadmap.inngest.com/roadmap?ref=docs)\nif you'd like to change this.",
      "char_count": 639,
      "token_count": 171,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-invoke.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-invoke.md",
        "file_name": "reference_functions_step-invoke.md",
        "file_size": 9249,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "fabb5947d5ae6021b8f8c41f9debe843d4cccc76044d35d133059661d0555411",
        "author": null,
        "created_at": "2025-10-13T00:00:38.840249",
        "modified_at": "2025-10-13T00:00:38.840249",
        "page_count": null,
        "word_count": 1165,
        "extracted_at": "2025-10-13T20:04:32.645976",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 17,
        "token_count": 171,
        "has_context": true
      }
    },
    {
      "index": 12,
      "text": "Invoke v3.7.0+\nError handling\nFunction not found\nIf Inngest could not find a function to invoke using the given ID (see\n[Internal behaviour](\\docs\\reference\\functions\\step-invoke#internal-behaviour)\nabove), an\n```\ninngest/function.finished\n```\nevent will be sent with an appropriate error and the step will fail with a\n```\nNonRetriableError\n```\n.",
      "char_count": 346,
      "token_count": 94,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-invoke.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-invoke.md",
        "file_name": "reference_functions_step-invoke.md",
        "file_size": 9249,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "fabb5947d5ae6021b8f8c41f9debe843d4cccc76044d35d133059661d0555411",
        "author": null,
        "created_at": "2025-10-13T00:00:38.840249",
        "modified_at": "2025-10-13T00:00:38.840249",
        "page_count": null,
        "word_count": 1165,
        "extracted_at": "2025-10-13T20:04:32.645976",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 17,
        "token_count": 94,
        "has_context": true
      }
    },
    {
      "index": 13,
      "text": "Invoke v3.7.0+\nError handling\nInvoked function fails\nIf the function exhausts all retries and fails, an\n```\ninngest/function.finished\n```\nevent will be sent with an appropriate error and the step will fail with a\n```\nNonRetriableError\n```\n.",
      "char_count": 240,
      "token_count": 65,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-invoke.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-invoke.md",
        "file_name": "reference_functions_step-invoke.md",
        "file_size": 9249,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "fabb5947d5ae6021b8f8c41f9debe843d4cccc76044d35d133059661d0555411",
        "author": null,
        "created_at": "2025-10-13T00:00:38.840249",
        "modified_at": "2025-10-13T00:00:38.840249",
        "page_count": null,
        "word_count": 1165,
        "extracted_at": "2025-10-13T20:04:32.645976",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 17,
        "token_count": 65,
        "has_context": true
      }
    },
    {
      "index": 14,
      "text": "Invoke v3.7.0+\nError handling\nInvoked function times out\nIf the\n```\ntimeout\n```\nhas been reached and the invoked function is still running, the\nstep will fail with a\n```\nNonRetriableError\n```\n.",
      "char_count": 193,
      "token_count": 56,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-invoke.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-invoke.md",
        "file_name": "reference_functions_step-invoke.md",
        "file_size": 9249,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "fabb5947d5ae6021b8f8c41f9debe843d4cccc76044d35d133059661d0555411",
        "author": null,
        "created_at": "2025-10-13T00:00:38.840249",
        "modified_at": "2025-10-13T00:00:38.840249",
        "page_count": null,
        "word_count": 1165,
        "extracted_at": "2025-10-13T20:04:32.645976",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 17,
        "token_count": 56,
        "has_context": true
      }
    },
    {
      "index": 15,
      "text": "Invoke v3.7.0+\nError handling\nInvoked function is rate limited\nIf the called function has a rate limit configuration and is skipped, the step will fail with a\n```\nNonRetriableError\n```\n.\nIt's recommended to wrap the\n```\nstep.invoke\n```\nwith a\n```\ntry catch\n```\nif the invoked function is expected to be executing occasionally.",
      "char_count": 326,
      "token_count": 84,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-invoke.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-invoke.md",
        "file_name": "reference_functions_step-invoke.md",
        "file_size": 9249,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "fabb5947d5ae6021b8f8c41f9debe843d4cccc76044d35d133059661d0555411",
        "author": null,
        "created_at": "2025-10-13T00:00:38.840249",
        "modified_at": "2025-10-13T00:00:38.840249",
        "page_count": null,
        "word_count": 1165,
        "extracted_at": "2025-10-13T20:04:32.645976",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 17,
        "token_count": 84,
        "has_context": true
      }
    },
    {
      "index": 16,
      "text": "Invoke v3.7.0+\nUsage limits\nSee\n[usage limits](\\docs\\usage-limits\\inngest#functions)\nfor more details.",
      "char_count": 102,
      "token_count": 34,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-invoke.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_step-invoke.md",
        "file_name": "reference_functions_step-invoke.md",
        "file_size": 9249,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "fabb5947d5ae6021b8f8c41f9debe843d4cccc76044d35d133059661d0555411",
        "author": null,
        "created_at": "2025-10-13T00:00:38.840249",
        "modified_at": "2025-10-13T00:00:38.840249",
        "page_count": null,
        "word_count": 1165,
        "extracted_at": "2025-10-13T20:04:32.645976",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 17,
        "token_count": 34,
        "has_context": true
      }
    }
  ]
}