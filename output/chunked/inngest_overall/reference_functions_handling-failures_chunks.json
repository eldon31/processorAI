{
  "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_handling-failures.md",
  "title": "#### On this page",
  "num_chunks": 11,
  "total_chars": 7993,
  "chunks": [
    {
      "index": 0,
      "text": "On this page\n- [Handling Failures](\\docs\\reference\\functions\\handling-failures#handling-failures)\n- [How onFailure works](\\docs\\reference\\functions\\handling-failures#how-on-failure-works)\n- [onFailure({ error, event, step, runId })](\\docs\\reference\\functions\\handling-failures#on-failure-error-event-step-run-id)\n- [error](\\docs\\reference\\functions\\handling-failures#error)\n- [event](\\docs\\reference\\functions\\handling-failures#event)\n- [step](\\docs\\reference\\functions\\handling-failures#step)\n- [runId](\\docs\\reference\\functions\\handling-failures#run-id)\n- [Examples](\\docs\\reference\\functions\\handling-failures#examples)\n- [Send a Slack notification when a function fails](\\docs\\reference\\functions\\handling-failures#send-a-slack-notification-when-a-function-fails)\n- [Capture all failure errors with Sentry](\\docs\\reference\\functions\\handling-failures#capture-all-failure-errors-with-sentry)\n- [Additional examples](\\docs\\reference\\functions\\handling-failures#additional-examples)\nReferences\n[TypeScript SDK](\\docs\\reference\\typescript)",
      "char_count": 1039,
      "token_count": 280,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_handling-failures.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_handling-failures.md",
        "file_name": "reference_functions_handling-failures.md",
        "file_size": 8536,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "cae572f1fba36a8b85ac43b6e5b88755b5d7821e422c4c9eba4b54040f889fa6",
        "author": null,
        "created_at": "2025-10-13T00:00:34.168177",
        "modified_at": "2025-10-13T00:00:34.168729",
        "page_count": null,
        "word_count": 1012,
        "extracted_at": "2025-10-13T20:04:31.227734",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 11,
        "token_count": 280,
        "has_context": true
      }
    },
    {
      "index": 1,
      "text": "Handling Failures\nDefine any failure handlers for your function with the\n[```\nonFailure\n```](\\docs\\reference\\functions\\create#configuration)\noption. This function will be automatically called when your function fails after it's maximum number of retries. Alternatively, you can use the\n[```\n\"inngest/function.failed\"\n```](\\docs\\reference\\functions\\handling-failures#the-inngest-function-failed-event)\nsystem event to handle failures across all functions.\nCopy Copied\n```\nimport { inngest } from \"./client\" ;\n\nexport default inngest .createFunction (\n{\nid : \"import-product-images\" ,\nonFailure : async ({ error , event , step }) => {\n// This is the failure handler which can be used to\n// send an alert, notification, or whatever you need to do\n} ,\n} ,\n{ event : \"shop/product.imported\" } ,\nasync ({ event , step , runId }) => {\n// This is the main function handler's code\n}\n);\n```\nThe failure handler is very useful for:\n- Sending alerts to your team\n- Sending metrics to a third party monitoring tool (e.g. Datadog)\n- Send a notification to your team or user that the job has failed\n- Perform a rollback of the transaction (i.e. undo work partially completed by the main handler)\n*Failures*\nshould not be confused with\n*Errors*\nwhich will be retried. Read the\n[error handling & retries documentation](\\docs\\functions\\retries)\nfor more context.",
      "char_count": 1344,
      "token_count": 323,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_handling-failures.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_handling-failures.md",
        "file_name": "reference_functions_handling-failures.md",
        "file_size": 8536,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "cae572f1fba36a8b85ac43b6e5b88755b5d7821e422c4c9eba4b54040f889fa6",
        "author": null,
        "created_at": "2025-10-13T00:00:34.168177",
        "modified_at": "2025-10-13T00:00:34.168729",
        "page_count": null,
        "word_count": 1012,
        "extracted_at": "2025-10-13T20:04:31.227734",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 11,
        "token_count": 323,
        "has_context": true
      }
    },
    {
      "index": 2,
      "text": "Handling Failures\nHow onFailure works\nThe\n```\nonFailure\n```\nhandler is a helper that actually creates a separate Inngest function used specifically for handling failures for your main function handler.\nThe separate Inngest function utilizes an\n[```\n\"inngest/function.failed\"\n```](\\docs\\reference\\functions\\handling-failures#the-inngest-function-failed-event)\nsystem event that gets sent to your account any time a function fails. The function created with\n```\nonFailure\n```\nwill appear as a separate function in your dashboard with the name format:\n```\n\"<Your function name> (failure)\"\n```\n.",
      "char_count": 591,
      "token_count": 135,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_handling-failures.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_handling-failures.md",
        "file_name": "reference_functions_handling-failures.md",
        "file_size": 8536,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "cae572f1fba36a8b85ac43b6e5b88755b5d7821e422c4c9eba4b54040f889fa6",
        "author": null,
        "created_at": "2025-10-13T00:00:34.168177",
        "modified_at": "2025-10-13T00:00:34.168729",
        "page_count": null,
        "word_count": 1012,
        "extracted_at": "2025-10-13T20:04:31.227734",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 11,
        "token_count": 135,
        "has_context": true
      }
    },
    {
      "index": 3,
      "text": "Handling Failures\nonFailure({ error, event, step, runId })\nThe\n```\nonFailure\n```\nhandler function has the same arguments as\n[the main function handler](\\docs\\reference\\functions\\create#handler)\nwhen creating a function, but also receives an\n```\nerror\n```\nargument.",
      "char_count": 264,
      "token_count": 68,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_handling-failures.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_handling-failures.md",
        "file_name": "reference_functions_handling-failures.md",
        "file_size": 8536,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "cae572f1fba36a8b85ac43b6e5b88755b5d7821e422c4c9eba4b54040f889fa6",
        "author": null,
        "created_at": "2025-10-13T00:00:34.168177",
        "modified_at": "2025-10-13T00:00:34.168729",
        "page_count": null,
        "word_count": 1012,
        "extracted_at": "2025-10-13T20:04:31.227734",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 11,
        "token_count": 68,
        "has_context": true
      }
    },
    {
      "index": 4,
      "text": "Handling Failures\nonFailure({ error, event, step, runId })\nerror\nThe JavaScript\n[```\nError\n```](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/Error)\nobject as thrown from the last retry in your main function handler.\nThe Inngest SDK attempts to serialize and deserialize the\n```\nError\n```\nobject to the best of its ability and any custom error classes (e.g.\n```\nPrisma.PrismaClientKnownRequestError\n```\nor\n```\nMyCustomErrorType\n```\n) that may be thrown will be deserialized as the default\n```\nError\n```\nobject. This means you\n*cannot*\nuse\n```\ninstance\n```\nof within\n```\nonFailure\n```\nto infer the type of error.",
      "char_count": 652,
      "token_count": 173,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_handling-failures.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_handling-failures.md",
        "file_name": "reference_functions_handling-failures.md",
        "file_size": 8536,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "cae572f1fba36a8b85ac43b6e5b88755b5d7821e422c4c9eba4b54040f889fa6",
        "author": null,
        "created_at": "2025-10-13T00:00:34.168177",
        "modified_at": "2025-10-13T00:00:34.168729",
        "page_count": null,
        "word_count": 1012,
        "extracted_at": "2025-10-13T20:04:31.227734",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 11,
        "token_count": 173,
        "has_context": true
      }
    },
    {
      "index": 5,
      "text": "Handling Failures\nonFailure({ error, event, step, runId })\nevent\nThe\n[```\n\"inngest/function.failed\"\n```](\\docs\\reference\\system-events\\inngest-function-failed)\nsystem event payload object. This object is similar to any event payload, but it contains data specific to the failed function's final retry attempt.\n[See the complete reference for this event payload here](\\docs\\reference\\system-events\\inngest-function-failed)\n.",
      "char_count": 423,
      "token_count": 99,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_handling-failures.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_handling-failures.md",
        "file_name": "reference_functions_handling-failures.md",
        "file_size": 8536,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "cae572f1fba36a8b85ac43b6e5b88755b5d7821e422c4c9eba4b54040f889fa6",
        "author": null,
        "created_at": "2025-10-13T00:00:34.168177",
        "modified_at": "2025-10-13T00:00:34.168729",
        "page_count": null,
        "word_count": 1012,
        "extracted_at": "2025-10-13T20:04:31.227734",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 11,
        "token_count": 99,
        "has_context": true
      }
    },
    {
      "index": 6,
      "text": "Handling Failures\nonFailure({ error, event, step, runId })\nstep\n[See the](\\docs\\reference\\functions\\create#step)\n[```\nstep\n```](\\docs\\reference\\functions\\create#step)\n[reference in the create function documentation](\\docs\\reference\\functions\\create#step)\n.",
      "char_count": 256,
      "token_count": 71,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_handling-failures.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_handling-failures.md",
        "file_name": "reference_functions_handling-failures.md",
        "file_size": 8536,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "cae572f1fba36a8b85ac43b6e5b88755b5d7821e422c4c9eba4b54040f889fa6",
        "author": null,
        "created_at": "2025-10-13T00:00:34.168177",
        "modified_at": "2025-10-13T00:00:34.168729",
        "page_count": null,
        "word_count": 1012,
        "extracted_at": "2025-10-13T20:04:31.227734",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 11,
        "token_count": 71,
        "has_context": true
      }
    },
    {
      "index": 7,
      "text": "Handling Failures\nonFailure({ error, event, step, runId })\nrunId\nThis will be the function run ID for the error handling function,\n*not the function that failed*\n. To get the failed function's run ID, use\n```\nevent.data.run_id\n```\n.\n[Learn more about](\\docs\\reference\\functions\\create#run-id)\n[```\nrunId\n```](\\docs\\reference\\functions\\create#run-id)\n[here](\\docs\\reference\\functions\\create#run-id)\n.",
      "char_count": 399,
      "token_count": 114,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_handling-failures.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_handling-failures.md",
        "file_name": "reference_functions_handling-failures.md",
        "file_size": 8536,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "cae572f1fba36a8b85ac43b6e5b88755b5d7821e422c4c9eba4b54040f889fa6",
        "author": null,
        "created_at": "2025-10-13T00:00:34.168177",
        "modified_at": "2025-10-13T00:00:34.168729",
        "page_count": null,
        "word_count": 1012,
        "extracted_at": "2025-10-13T20:04:31.227734",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 11,
        "token_count": 114,
        "has_context": true
      }
    },
    {
      "index": 8,
      "text": "Handling Failures\nExamples\nSend a Slack notification when a function fails\nIn this example, the function attempts to sync all products from a Shopify store, and if it fails, it sends a message to the team's\n*#eng-alerts*\nSlack channel using the Slack Web Api's\n```\nchat.postMessage\n```\n(\n[docs](https://api.slack.com/methods/chat.postMessage)\n) API.\nCopy Copied\n```\nimport { client } from \"@slack/web-api\" ;\nimport { inngest } from \"./client\" ;\n\nexport default inngest .createFunction (\n{\nid : \"sync-shopify-products\" ,\n// Your handler should be an async function:\nonFailure : async ({ error , event }) => {\nconst originalEvent = event . data .event;\n\n// Post a message to the Engineering team's alerts channel in Slack:\nconst result = await client . chat .postMessage ({\ntoken : process . env . SLACK_TOKEN ,\nchannel : \"C12345\" ,\nblocks : [\n{\ntype : \"section\" ,\ntext : {\ntype : \"mrkdwn\" ,\ntext : `Sync Shopify function failed for Store ${\noriginalEvent .storeId\n} : ${ error .toString () } ` ,\n} ,\n} ,\n] ,\n});\n\nreturn result;\n} ,\n} ,\n{ event : \"shop/product_sync.requested\" } ,\nasync ({ event , step , runId }) => {\n// This is the main function handler's code\nconst products = await step .run ( \"fetch-products\" , async () => {\nconst storeId = event . data .storeId;\n// The function might fail here or...\n});\nawait step .run ( \"save-products\" , async () => {\n// The function might fail here after the maximum number of retries\n});\n}\n);\n```",
      "char_count": 1440,
      "token_count": 369,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_handling-failures.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_handling-failures.md",
        "file_name": "reference_functions_handling-failures.md",
        "file_size": 8536,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "cae572f1fba36a8b85ac43b6e5b88755b5d7821e422c4c9eba4b54040f889fa6",
        "author": null,
        "created_at": "2025-10-13T00:00:34.168177",
        "modified_at": "2025-10-13T00:00:34.168729",
        "page_count": null,
        "word_count": 1012,
        "extracted_at": "2025-10-13T20:04:31.227734",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 11,
        "token_count": 369,
        "has_context": true
      }
    },
    {
      "index": 9,
      "text": "Handling Failures\nExamples\nCapture all failure errors with Sentry\nSimilar to the above example, you can capture and all failed functions' errors and send them to a singular place. Here's an example using\n[Sentry's node.js library](https://docs.datadoghq.com/api/latest/events/)\nto capture and send all failure errors to Sentry.\nCopy Copied\n```\nimport * as Sentry from \"@sentry/node\" ;\nimport { inngest } from \"./client\" ;\n\nSentry .init ({\ndsn : \"https://examplePublicKey@o0.ingest.sentry.io/0\" ,\n});\n\nexport default inngest .createFunction (\n{\nname : \"Send failures to Sentry\" ,\nid : \"send-failed-function-errors-to-sentry\"\n} ,\n{ event : \"inngest/function.failed\" } ,\nasync ({ event , step }) => {\n\n// The error is serialized as JSON, so we must re-construct it for Sentry's error handling:\nconst error = event . data .error;\nconst reconstructedEvent = new Error ( error .message);\n// Set the name in the newly created event:\n// You can even customize the name here if you'd like,\n// e.g. `Function Failure: ${event.} - ${error.name}`\nreconstructedEvent .name = error .name;\n\n// Add the stack trace to the error:\nreconstructedEvent .stack = error .stack;\n\n// Capture the error with Sentry and append any additional tags or metadata:\nSentry .captureException (reconstructedEvent , {\nextra : {\nfunction_id ,\n} ,\n});\n\n// Flush the Sentry queue to ensure the error is sent:\nreturn await Sentry .flush ();\n}\n);\n```",
      "char_count": 1409,
      "token_count": 343,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_handling-failures.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_handling-failures.md",
        "file_name": "reference_functions_handling-failures.md",
        "file_size": 8536,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "cae572f1fba36a8b85ac43b6e5b88755b5d7821e422c4c9eba4b54040f889fa6",
        "author": null,
        "created_at": "2025-10-13T00:00:34.168177",
        "modified_at": "2025-10-13T00:00:34.168729",
        "page_count": null,
        "word_count": 1012,
        "extracted_at": "2025-10-13T20:04:31.227734",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 11,
        "token_count": 343,
        "has_context": true
      }
    },
    {
      "index": 10,
      "text": "Handling Failures\nExamples\nTrack all function failures in Datadog\n[Send all function failures to Datadog (or similar) for monitoring.](\\docs\\examples\\track-failures-in-datadog)",
      "char_count": 176,
      "token_count": 46,
      "metadata": {
        "title": "#### On this page",
        "source": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_handling-failures.md",
        "chunk_method": "hybrid",
        "file_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\Docs\\inngest_overall\\reference_functions_handling-failures.md",
        "file_name": "reference_functions_handling-failures.md",
        "file_size": 8536,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "cae572f1fba36a8b85ac43b6e5b88755b5d7821e422c4c9eba4b54040f889fa6",
        "author": null,
        "created_at": "2025-10-13T00:00:34.168177",
        "modified_at": "2025-10-13T00:00:34.168729",
        "page_count": null,
        "word_count": 1012,
        "extracted_at": "2025-10-13T20:04:31.227734",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 11,
        "token_count": 46,
        "has_context": true
      }
    }
  ]
}