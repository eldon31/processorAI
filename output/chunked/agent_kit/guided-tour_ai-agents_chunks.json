{
  "source": "Docs\\agent_kit\\guided-tour_ai-agents.md",
  "title": "##### Get Started",
  "num_chunks": 16,
  "total_chars": 14591,
  "chunks": [
    {
      "index": 0,
      "text": "Get Started\n- [Overview](\\overview)\n- [Quick start](\\getting-started\\quick-start)\n- [Installation](\\getting-started\\installation)\n- [Local development](\\getting-started\\local-development)",
      "char_count": 187,
      "token_count": 47,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\guided-tour_ai-agents.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\guided-tour_ai-agents.md",
        "file_name": "guided-tour_ai-agents.md",
        "file_size": 15129,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "b86d9b4ac87bb2e4ae2049ea8b71cf761ed6b39fe1e5aeb919a5d5c692c8c8da",
        "author": null,
        "created_at": "2025-10-12T23:51:44.508425",
        "modified_at": "2025-10-12T23:51:44.509106",
        "page_count": null,
        "word_count": 2243,
        "extracted_at": "2025-10-13T19:59:42.004588",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 16,
        "token_count": 47,
        "has_context": true
      }
    },
    {
      "index": 1,
      "text": "Concepts\n- [Agents](\\concepts\\agents)\n- [Tools](\\concepts\\tools)\n- [Networks](\\concepts\\networks)\n- [State](\\concepts\\state)\n- [Routers](\\concepts\\routers)\n- [History](\\concepts\\history)\n- [Memory](\\concepts\\memory)\n- [Models](\\concepts\\models)\n- [Deployment](\\concepts\\deployment)",
      "char_count": 281,
      "token_count": 95,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\guided-tour_ai-agents.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\guided-tour_ai-agents.md",
        "file_name": "guided-tour_ai-agents.md",
        "file_size": 15129,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "b86d9b4ac87bb2e4ae2049ea8b71cf761ed6b39fe1e5aeb919a5d5c692c8c8da",
        "author": null,
        "created_at": "2025-10-12T23:51:44.508425",
        "modified_at": "2025-10-12T23:51:44.509106",
        "page_count": null,
        "word_count": 2243,
        "extracted_at": "2025-10-13T19:59:42.004588",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 16,
        "token_count": 95,
        "has_context": true
      }
    },
    {
      "index": 2,
      "text": "Streaming\n- [Overview](\\streaming\\overview)\n- [Usage Guide](\\streaming\\usage-guide)\n- [Events](\\streaming\\events)\n- [Transport](\\streaming\\transport)\n- [Provider](\\streaming\\provider)",
      "char_count": 183,
      "token_count": 54,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\guided-tour_ai-agents.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\guided-tour_ai-agents.md",
        "file_name": "guided-tour_ai-agents.md",
        "file_size": 15129,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "b86d9b4ac87bb2e4ae2049ea8b71cf761ed6b39fe1e5aeb919a5d5c692c8c8da",
        "author": null,
        "created_at": "2025-10-12T23:51:44.508425",
        "modified_at": "2025-10-12T23:51:44.509106",
        "page_count": null,
        "word_count": 2243,
        "extracted_at": "2025-10-13T19:59:42.004588",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 16,
        "token_count": 54,
        "has_context": true
      }
    },
    {
      "index": 3,
      "text": "Advanced Patterns\n- [Deterministic state routing](\\advanced-patterns\\routing)\n- [MCP as tools](\\advanced-patterns\\mcp)\n- [Human in the Loop](\\advanced-patterns\\human-in-the-loop)\n- [Multi-steps tools](\\advanced-patterns\\multi-steps-tools)\n- [Configuring Retries](\\advanced-patterns\\retries)\n- [Configuring Multi-tenancy](\\advanced-patterns\\multitenancy)\n- [UI Streaming with useAgent](\\advanced-patterns\\legacy-ui-streaming)",
      "char_count": 424,
      "token_count": 117,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\guided-tour_ai-agents.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\guided-tour_ai-agents.md",
        "file_name": "guided-tour_ai-agents.md",
        "file_size": 15129,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "b86d9b4ac87bb2e4ae2049ea8b71cf761ed6b39fe1e5aeb919a5d5c692c8c8da",
        "author": null,
        "created_at": "2025-10-12T23:51:44.508425",
        "modified_at": "2025-10-12T23:51:44.509106",
        "page_count": null,
        "word_count": 2243,
        "extracted_at": "2025-10-13T19:59:42.004588",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 16,
        "token_count": 117,
        "has_context": true
      }
    },
    {
      "index": 4,
      "text": "Guided Tour\n- [The three levels of AI apps](\\guided-tour\\overview)\n- [1. Explaining a given code file](\\guided-tour\\ai-workflows)\n- [2. Complex code analysis](\\guided-tour\\agentic-workflows)\n- [3. Autonomous Bug Solver](\\guided-tour\\ai-agents)",
      "char_count": 243,
      "token_count": 75,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\guided-tour_ai-agents.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\guided-tour_ai-agents.md",
        "file_name": "guided-tour_ai-agents.md",
        "file_size": 15129,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "b86d9b4ac87bb2e4ae2049ea8b71cf761ed6b39fe1e5aeb919a5d5c692c8c8da",
        "author": null,
        "created_at": "2025-10-12T23:51:44.508425",
        "modified_at": "2025-10-12T23:51:44.509106",
        "page_count": null,
        "word_count": 2243,
        "extracted_at": "2025-10-13T19:59:42.004588",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 16,
        "token_count": 75,
        "has_context": true
      }
    },
    {
      "index": 5,
      "text": "Integrations\n- [E2B - Sandboxes for AI Agents](\\integrations\\e2b)\n- [Browserbase - AI Browsers](\\integrations\\browserbase)\n- [Smithery - MCP Registry](\\integrations\\smithery)\nclose\nOn this page\n- [Overview](#overview)\n- [Setup](#setup)\n- [Implementing our Code Assistant v3](#implementing-our-code-assistant-v3)\n- [Overview of the autonomous workflow](#overview-of-the-autonomous-workflow)\n- [Implementing the Tools](#implementing-the-tools)\n- [Creating the Task-Specific Agents](#creating-the-task-specific-agents)\n- [Implementing the Router Agent](#implementing-the-router-agent)\n- [Assembling the Network](#assembling-the-network)\n- [Running our Code Assistant v3](#running-our-code-assistant-v3)\n- [What we've learned so far](#what-we%E2%80%99ve-learned-so-far)\nGuided Tour",
      "char_count": 777,
      "token_count": 220,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\guided-tour_ai-agents.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\guided-tour_ai-agents.md",
        "file_name": "guided-tour_ai-agents.md",
        "file_size": 15129,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "b86d9b4ac87bb2e4ae2049ea8b71cf761ed6b39fe1e5aeb919a5d5c692c8c8da",
        "author": null,
        "created_at": "2025-10-12T23:51:44.508425",
        "modified_at": "2025-10-12T23:51:44.509106",
        "page_count": null,
        "word_count": 2243,
        "extracted_at": "2025-10-13T19:59:42.004588",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 16,
        "token_count": 220,
        "has_context": true
      }
    },
    {
      "index": 6,
      "text": "Code Assistant v3: Autonomous Bug Solver\nBuild a custom Agent Router to autonomously solve bugs.",
      "char_count": 96,
      "token_count": 20,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\guided-tour_ai-agents.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\guided-tour_ai-agents.md",
        "file_name": "guided-tour_ai-agents.md",
        "file_size": 15129,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "b86d9b4ac87bb2e4ae2049ea8b71cf761ed6b39fe1e5aeb919a5d5c692c8c8da",
        "author": null,
        "created_at": "2025-10-12T23:51:44.508425",
        "modified_at": "2025-10-12T23:51:44.509106",
        "page_count": null,
        "word_count": 2243,
        "extracted_at": "2025-10-13T19:59:42.004588",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 16,
        "token_count": 20,
        "has_context": true
      }
    },
    {
      "index": 7,
      "text": "Code Assistant v3: Autonomous Bug Solver\nOverview\nOur\n[Code Assistant v2](\\ai-agents-in-practice\\agentic-workflows)\nintroduced some limited reasoning capabilities through Tools and a Network of Agents.\nThis third version will transform our Code Assistant into a semi-autonomous AI Agent that can solve bugs and improve code.\nOur AI Agent will operate over an Express API project containing bugs:\nCopy Ask AI\n```\n/examples/code-assistant-agent/project\n├── package.json\n├── tsconfig.json\n├── src\n│   ├── index.ts\n│   ├── routes\n│   │   ├── users.ts\n│   │   └── posts.ts\n│   ├── models\n│   │   ├── user.ts\n│   │   └── post.ts\n│   └── db.ts\n└── tests\n├── users.test.ts\n└── posts.test.ts\n```\nGiven a prompt such as:\nCopy Ask AI\n```\nCan you help me fix the following error?\n1. TypeError: Cannot read properties of undefined (reading 'body')\nat app.post (/project/src/routes/users.ts:10:23)\n```\nOur Code Assistant v3 will autonomously navigate through the codebase and fix the bug by updating the impacted files.\nThis new version relies on previously covered concepts such as\n[Tools](\\concepts\\tools)\n,\n[Agents](\\concepts\\agent)\n, and\n[Networks](\\concepts\\network)\nbut introduces\nthe creation of a custom\n[Router Agent](\\concepts\\routers#routing-agent-autonomous-routing)\nbringing routing autonomy to the AI Agent.\nLet's learn these concepts in practice.",
      "char_count": 1347,
      "token_count": 348,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\guided-tour_ai-agents.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\guided-tour_ai-agents.md",
        "file_name": "guided-tour_ai-agents.md",
        "file_size": 15129,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "b86d9b4ac87bb2e4ae2049ea8b71cf761ed6b39fe1e5aeb919a5d5c692c8c8da",
        "author": null,
        "created_at": "2025-10-12T23:51:44.508425",
        "modified_at": "2025-10-12T23:51:44.509106",
        "page_count": null,
        "word_count": 2243,
        "extracted_at": "2025-10-13T19:59:42.004588",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 16,
        "token_count": 348,
        "has_context": true
      }
    },
    {
      "index": 8,
      "text": "Code Assistant v3: Autonomous Bug Solver\nSetup\nSimilarly to the\n[Code Assistant v2](\\ai-agents-in-practice\\agentic-workflows)\n, perform the following steps to setup your project:\n1. Initialize your project\nnpm pnpm yarn Copy Ask AI\n```\nnpm init\n```\n1. Install the required dependencies\nnpm pnpm yarn Copy Ask AI\n```\nnpm install @inngest/agent-kit inngest zod\n```\n1. Add TypeScript support\nnpm pnpm yarn Copy Ask AI\n```\nnpm install -D tsx @types/node\n```\nAnd add the following scripts to your\n```\npackage.json\n```\n:\nCopy Ask AI\n```\n\"scripts\" : {\n\"start\" : \"tsx ./index.ts\"\n}\n```\nYou are now set up, let's implement our autonomous Code Assistant.",
      "char_count": 644,
      "token_count": 181,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\guided-tour_ai-agents.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\guided-tour_ai-agents.md",
        "file_name": "guided-tour_ai-agents.md",
        "file_size": 15129,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "b86d9b4ac87bb2e4ae2049ea8b71cf761ed6b39fe1e5aeb919a5d5c692c8c8da",
        "author": null,
        "created_at": "2025-10-12T23:51:44.508425",
        "modified_at": "2025-10-12T23:51:44.509106",
        "page_count": null,
        "word_count": 2243,
        "extracted_at": "2025-10-13T19:59:42.004588",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 16,
        "token_count": 181,
        "has_context": true
      }
    },
    {
      "index": 9,
      "text": "Code Assistant v3: Autonomous Bug Solver\nImplementing our Code Assistant v3\nOverview of the autonomous workflow\nOur Code Assistant v3 introduces autonomy through a specialized Router Agent that orchestrates two task-specific Agents:\n- `plannerAgent` : Analyzes code and plans fixes using code search capabilities\n- `editorAgent` : Implements the planned fixes using file system operations\nThe Router Agent acts as the \"brain\" of our Code Assistant, deciding which Agent to use based on the current context and user request.\nLet's implement each component of our autonomous workflow.",
      "char_count": 582,
      "token_count": 114,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\guided-tour_ai-agents.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\guided-tour_ai-agents.md",
        "file_name": "guided-tour_ai-agents.md",
        "file_size": 15129,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "b86d9b4ac87bb2e4ae2049ea8b71cf761ed6b39fe1e5aeb919a5d5c692c8c8da",
        "author": null,
        "created_at": "2025-10-12T23:51:44.508425",
        "modified_at": "2025-10-12T23:51:44.509106",
        "page_count": null,
        "word_count": 2243,
        "extracted_at": "2025-10-13T19:59:42.004588",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 16,
        "token_count": 114,
        "has_context": true
      }
    },
    {
      "index": 10,
      "text": "Code Assistant v3: Autonomous Bug Solver\nImplementing our Code Assistant v3\nImplementing the Tools\nOur Code Assistant v3 needs to interact with the file system and search through code. Let's implement these capabilities as Tools:\nCopy Ask AI\n```\nimport { createTool } from \"@inngest/agent-kit\" ;\n\nconst writeFile = createTool ({\nname: \"writeFile\" ,\ndescription: \"Write a file to the filesystem\" ,\nparameters: z . object ({\npath: z . string (). describe ( \"The path to the file to write\" ),\ncontent: z . string (). describe ( \"The content to write to the file\" ),\n}),\nhandler : async ({ path , content }) => {\ntry {\nlet relativePath = path . startsWith ( \"/\" ) ? path . slice ( 1 ) : path ;\nwriteFileSync ( relativePath , content );\nreturn \"File written\" ;\n} catch ( err ) {\nconsole . error ( `Error writing file ${ path } :` , err );\nthrow new Error ( `Failed to write file ${ path } ` );\n}\n},\n});\n\nconst readFile = createTool ({\nname: \"readFile\" ,\ndescription: \"Read a file from the filesystem\" ,\nparameters: z . object ({\npath: z . string (). describe ( \"The path to the file to read\" ),\n}),\nhandler : async ({ path }) => {\ntry {\nlet relativePath = path . startsWith ( \"/\" ) ? path . slice ( 1 ) : path ;\nconst content = readFileSync ( relativePath , \"utf-8\" );\nreturn content ;\n} catch ( err ) {\nconsole . error ( `Error reading file ${ path } :` , err );\nthrow new Error ( `Failed to read file ${ path } ` );\n}\n},\n});\n\nconst searchCode = createTool ({\nname: \"searchCode\" ,\ndescription: \"Search for a given pattern in a project files\" ,\nparameters: z . object ({\nquery: z . string (). describe ( \"The query to search for\" ),\n}),\nhandler : async ({ query }) => {\nconst searchFiles = ( dir : string , searchQuery : string ) : string [] => {\nconst results : string [] = [];\nconst walk = ( currentPath : string ) => {\nconst files = readdirSync ( currentPath );\nfor ( const file of files ) {\nconst filePath = join ( currentPath , file );\nconst stat = statSync ( filePath );\nif ( stat . isDirectory ()) {\nwalk ( filePath );\n} else {\ntry {\nconst content = readFileSync ( filePath , \"utf-8\" );\nif ( content . includes ( searchQuery )) {\nresults . push ( filePath );\n}\n} catch ( err ) {\nconsole . error ( `Error reading file ${ filePath } :` , err );\n}\n}\n}\n};\nwalk ( dir );\nreturn results ;\n};\nconst matches = searchFiles ( process . cwd (), query );\nreturn matches . length === 0\n? \"No matches found\"\n: `Found matches in following files: \\n ${ matches . join ( \" \\n \" ) } ` ;\n},\n});\n```\nSome notes on the highlighted lines:\n- As noted in the [\"Building Effective Agents\" article](https://www.anthropic.com/research/building-effective-agents) from Anthropic, Tools based on file system operations are most effective when provided with absolute paths.\n- Tools performing action such as `writeFile` should always return a value to inform the Agent that the action has been completed.\nThese Tools provide our Agents with the following capabilities:\n- `writeFile` : Write content to a file\n- `readFile` : Read content from a file\n- `searchCode` : Search for patterns in project files\nLet's now create our task-specific Agents.",
      "char_count": 3116,
      "token_count": 761,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\guided-tour_ai-agents.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\guided-tour_ai-agents.md",
        "file_name": "guided-tour_ai-agents.md",
        "file_size": 15129,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "b86d9b4ac87bb2e4ae2049ea8b71cf761ed6b39fe1e5aeb919a5d5c692c8c8da",
        "author": null,
        "created_at": "2025-10-12T23:51:44.508425",
        "modified_at": "2025-10-12T23:51:44.509106",
        "page_count": null,
        "word_count": 2243,
        "extracted_at": "2025-10-13T19:59:42.004588",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 16,
        "token_count": 761,
        "has_context": true
      }
    },
    {
      "index": 11,
      "text": "Code Assistant v3: Autonomous Bug Solver\nImplementing our Code Assistant v3\nCreating the Task-Specific Agents\nOur Code Assistant v3 relies on two specialized Agents:\nCopy Ask AI\n```\nimport { createAgent } from \"@inngest/agent-kit\" ;\n\nconst plannerAgent = createAgent ({\nname: \"planner\" ,\nsystem: \"You are an expert in debugging TypeScript projects.\" ,\ntools: [ searchCode ],\n});\n\nconst editorAgent = createAgent ({\nname: \"editor\" ,\nsystem: \"You are an expert in fixing bugs in TypeScript projects.\" ,\ntools: [ writeFile , readFile ],\n});\n```\nEach Agent has a specific role:\n- `plannerAgent` uses the `searchCode` Tool to analyze code and plan fixes\n- `editorAgent` uses the `readFile` and `writeFile` Tools to implement fixes\nSeparating the Agents into two distinct roles will enable our AI Agent to better\n*\"divide and conquer\"*\nthe problem to solve.\nLet's now implement the Router Agent that will bring the reasoning capabilities to autonomously orchestrate these Agents.",
      "char_count": 973,
      "token_count": 224,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\guided-tour_ai-agents.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\guided-tour_ai-agents.md",
        "file_name": "guided-tour_ai-agents.md",
        "file_size": 15129,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "b86d9b4ac87bb2e4ae2049ea8b71cf761ed6b39fe1e5aeb919a5d5c692c8c8da",
        "author": null,
        "created_at": "2025-10-12T23:51:44.508425",
        "modified_at": "2025-10-12T23:51:44.509106",
        "page_count": null,
        "word_count": 2243,
        "extracted_at": "2025-10-13T19:59:42.004588",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 16,
        "token_count": 224,
        "has_context": true
      }
    },
    {
      "index": 12,
      "text": "Code Assistant v3: Autonomous Bug Solver\nImplementing our Code Assistant v3\nImplementing the Router Agent\nThe\n[Router Agent](\\concepts\\routers#routing-agent-autonomous-routing)\nis the \"brain\" of our Code Assistant, deciding which Agent to use based on the context.\nThe router developed in the\n[Code Assistant v2](\\ai-agents-in-practice\\agentic-workflows)\nwas a function that decided which Agent to call next\nbased on the progress of the workflow. Such router made a Agent deterministic, but lacked the reasoning capabilities to autonomously orchestrate the Agents.\nIn this version, we will provide an Agent as a router, called a Router Agent.\nBy doing so, we can leverage the reasoning capabilities of the LLM to autonomously orchestrate the Agents around a given goal (here, fixing the bug).\nCreating a Router Agent is done by using the\n[```\ncreateRoutingAgent\n```](\\reference\\network-router#createroutingagent)\nhelper function:\nCopy Ask AI\n```\nimport { createRoutingAgent } from \"@inngest/agent-kit\" ;\n\nconst router = createRoutingAgent ({\nname: \"Code Assistant routing agent\" ,\nsystem : async ({ network }) : Promise < string > => {\nif ( ! network ) {\nthrow new Error (\n\"The routing agent can only be used within a network of agents\"\n);\n}\nconst agents = await network ?. availableAgents ();\nreturn `You are the orchestrator between a group of agents. Each agent is suited for a set of specific tasks, and has a name, instructions, and a set of tools.\n\nThe following agents are available:\n<agents>\n${ agents\n. map (( a ) => {\nreturn `\n<agent>\n<name> ${ a . name } </name>\n<description> ${ a . description } </description>\n<tools> ${ JSON . stringify ( Array . from ( a . tools . values ())) } </tools>\n</agent>` ;\n} )\n. join ( \" \\n \" ) }\n</agents>\n\nFollow the set of instructions:\n\n<instructions>\nThink about the current history and status.\nIf the user issue has been fixed, call select_agent with \"finished\"\nOtherwise, determine which agent to use to handle the user's request, based off of the current agents and their tools.\n\nYour aim is to thoroughly complete the request, thinking step by step, choosing the right agent based off of the context.\n</instructions>` ;\n},\ntools: [\ncreateTool ({\nname: \"select_agent\" ,\ndescription:\n\"select an agent to handle the input, based off of the current conversation\" ,\nparameters: z\n. object ({\nname: z\n. string ()\n. describe ( \"The name of the agent that should handle the request\" ),\n})\n. strict (),\nhandler : ({ name }, { network }) => {\nif ( ! network ) {\nthrow new Error (\n\"The routing agent can only be used within a network of agents\"\n);\n}\nif ( name === \"finished\" ) {\nreturn undefined ;\n}\nconst agent = network . agents . get ( name );\nif ( agent === undefined ) {\nthrow new Error (\n`The routing agent requested an agent that doesn't exist: ${ name } `\n);\n}\nreturn agent . name ;\n},\n}),\n],\ntool_choice: \"select_agent\" ,\nlifecycle: {\nonRoute : ({ result }) => {\nconst tool = result . toolCalls [ 0 ];\nif ( ! tool ) {\nreturn ;\n}\nconst agentName = ( tool . content as any ). data || ( tool . content as string );\nif ( agentName === \"finished\" ) {\nreturn ;\n} else {\nreturn [ agentName ];\n}\n},\n},\n});\n```\nLooking at the highlighted lines, we can see that a Router Agent mixes features from regular Agents and a function Router:\n1. A Router Agent is a regular Agent with a `system` function that returns a prompt\n2. A Router Agent can use [Tools](\\concepts\\tools) to interact with the environment\n3. Finally, a Router Agent can also define lifecycle callbacks, [like Agents do](\\concepts\\agents#lifecycle-hooks)\nLet's now dissect how this Router Agent works:\n1. \nThe\n```\nsystem\n```\nfunction is used to define the prompt dynamically based on the Agents available in the Network\n- You will notice that the prompt explicitly ask to call a \"finished\" tool when the user issue has been fixed\n2. \nThe\n```\nselect_agent\n```\nTool is used to validate that the Agent selected is available in the Network\n- The tool ensures that the \"finished\" edge case is handled\n3. \nThe\n```\nonRoute\n```\nlifecycle callback is used to determine which Agent to call next\n- This callback stops the conversation when the user issue has been fixed (when the \"finished\" Agent is called)\nThis is it! Using this prompt, our Router Agent will orchestrate the Agents until the given bug is fixed.",
      "char_count": 4305,
      "token_count": 1017,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\guided-tour_ai-agents.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\guided-tour_ai-agents.md",
        "file_name": "guided-tour_ai-agents.md",
        "file_size": 15129,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "b86d9b4ac87bb2e4ae2049ea8b71cf761ed6b39fe1e5aeb919a5d5c692c8c8da",
        "author": null,
        "created_at": "2025-10-12T23:51:44.508425",
        "modified_at": "2025-10-12T23:51:44.509106",
        "page_count": null,
        "word_count": 2243,
        "extracted_at": "2025-10-13T19:59:42.004588",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 16,
        "token_count": 1017,
        "has_context": true
      }
    },
    {
      "index": 13,
      "text": "Code Assistant v3: Autonomous Bug Solver\nImplementing our Code Assistant v3\nAssembling the Network\nFinally, assemble the Network of Agents and Router Agent:\nCopy Ask AI\n```\nconst network = createNetwork ({\nname: \"code-assistant-v3\" ,\nagents: [ plannerAgent , editorAgent ],\ndefaultModel: anthropic ({\nmodel: \"claude-3-5-sonnet-latest\" ,\nmax_tokens: 4096 ,\n}),\nrouter: router ,\n});\n```\nOur Code Assistant v3 is now complete and ready to be used!",
      "char_count": 444,
      "token_count": 117,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\guided-tour_ai-agents.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\guided-tour_ai-agents.md",
        "file_name": "guided-tour_ai-agents.md",
        "file_size": 15129,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "b86d9b4ac87bb2e4ae2049ea8b71cf761ed6b39fe1e5aeb919a5d5c692c8c8da",
        "author": null,
        "created_at": "2025-10-12T23:51:44.508425",
        "modified_at": "2025-10-12T23:51:44.509106",
        "page_count": null,
        "word_count": 2243,
        "extracted_at": "2025-10-13T19:59:42.004588",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 16,
        "token_count": 117,
        "has_context": true
      }
    },
    {
      "index": 14,
      "text": "Code Assistant v3: Autonomous Bug Solver\nRunning our Code Assistant v3\nFirst, go to your Anthropic dashboard and create a new API key.\nThen, run the following command to start the server:\nnpm pnpm yarn Copy Ask AI\n```\nANTHROPIC_API_KEY =< your-api-key > npm run start\n```\nYour Code Assistant is now running at\n```\nhttp://localhost:3010\n```\nand ready to help fix bugs in your TypeScript projects!",
      "char_count": 395,
      "token_count": 102,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\guided-tour_ai-agents.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\guided-tour_ai-agents.md",
        "file_name": "guided-tour_ai-agents.md",
        "file_size": 15129,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "b86d9b4ac87bb2e4ae2049ea8b71cf761ed6b39fe1e5aeb919a5d5c692c8c8da",
        "author": null,
        "created_at": "2025-10-12T23:51:44.508425",
        "modified_at": "2025-10-12T23:51:44.509106",
        "page_count": null,
        "word_count": 2243,
        "extracted_at": "2025-10-13T19:59:42.004588",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 16,
        "token_count": 102,
        "has_context": true
      }
    },
    {
      "index": 15,
      "text": "Code Assistant v3: Autonomous Bug Solver\nWhat we've learned so far\nLet's recap what we've learned so far:\n- **Autonomous AI Agents** can be built by using [**Router Agents**](\\concepts\\routers#routing-agent-autonomous-routing) , which act as the \"brain\" of an autonomous system by orchestrating other Agents\n- **Tools** provide Agents with capabilities to interact with their environment\n[Code Assistant v2: Complex code analysis Previous](\\guided-tour\\agentic-workflows)\n[Using AgentKit with E2B Next](\\integrations\\e2b)\n⌘ I\nAssistant Responses are generated using AI and may contain mistakes.",
      "char_count": 594,
      "token_count": 140,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\guided-tour_ai-agents.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\guided-tour_ai-agents.md",
        "file_name": "guided-tour_ai-agents.md",
        "file_size": 15129,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "b86d9b4ac87bb2e4ae2049ea8b71cf761ed6b39fe1e5aeb919a5d5c692c8c8da",
        "author": null,
        "created_at": "2025-10-12T23:51:44.508425",
        "modified_at": "2025-10-12T23:51:44.509106",
        "page_count": null,
        "word_count": 2243,
        "extracted_at": "2025-10-13T19:59:42.004588",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 16,
        "token_count": 140,
        "has_context": true
      }
    }
  ]
}