{
  "source": "Docs\\agent_kit\\integrations_browserbase.md",
  "title": "##### Get Started",
  "num_chunks": 12,
  "total_chars": 10595,
  "chunks": [
    {
      "index": 0,
      "text": "Get Started\n- [Overview](\\overview)\n- [Quick start](\\getting-started\\quick-start)\n- [Installation](\\getting-started\\installation)\n- [Local development](\\getting-started\\local-development)",
      "char_count": 187,
      "token_count": 47,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\integrations_browserbase.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\integrations_browserbase.md",
        "file_name": "integrations_browserbase.md",
        "file_size": 11164,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "b2524c5742391d6f0c31ba025b098a863509e9ed2d0753191ba2677dc5bb95e7",
        "author": null,
        "created_at": "2025-10-12T23:51:49.629696",
        "modified_at": "2025-10-12T23:51:49.629803",
        "page_count": null,
        "word_count": 1516,
        "extracted_at": "2025-10-13T19:59:46.251993",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 12,
        "token_count": 47,
        "has_context": true
      }
    },
    {
      "index": 1,
      "text": "Concepts\n- [Agents](\\concepts\\agents)\n- [Tools](\\concepts\\tools)\n- [Networks](\\concepts\\networks)\n- [State](\\concepts\\state)\n- [Routers](\\concepts\\routers)\n- [History](\\concepts\\history)\n- [Memory](\\concepts\\memory)\n- [Models](\\concepts\\models)\n- [Deployment](\\concepts\\deployment)",
      "char_count": 281,
      "token_count": 95,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\integrations_browserbase.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\integrations_browserbase.md",
        "file_name": "integrations_browserbase.md",
        "file_size": 11164,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "b2524c5742391d6f0c31ba025b098a863509e9ed2d0753191ba2677dc5bb95e7",
        "author": null,
        "created_at": "2025-10-12T23:51:49.629696",
        "modified_at": "2025-10-12T23:51:49.629803",
        "page_count": null,
        "word_count": 1516,
        "extracted_at": "2025-10-13T19:59:46.251993",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 12,
        "token_count": 95,
        "has_context": true
      }
    },
    {
      "index": 2,
      "text": "Streaming\n- [Overview](\\streaming\\overview)\n- [Usage Guide](\\streaming\\usage-guide)\n- [Events](\\streaming\\events)\n- [Transport](\\streaming\\transport)\n- [Provider](\\streaming\\provider)",
      "char_count": 183,
      "token_count": 54,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\integrations_browserbase.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\integrations_browserbase.md",
        "file_name": "integrations_browserbase.md",
        "file_size": 11164,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "b2524c5742391d6f0c31ba025b098a863509e9ed2d0753191ba2677dc5bb95e7",
        "author": null,
        "created_at": "2025-10-12T23:51:49.629696",
        "modified_at": "2025-10-12T23:51:49.629803",
        "page_count": null,
        "word_count": 1516,
        "extracted_at": "2025-10-13T19:59:46.251993",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 12,
        "token_count": 54,
        "has_context": true
      }
    },
    {
      "index": 3,
      "text": "Advanced Patterns\n- [Deterministic state routing](\\advanced-patterns\\routing)\n- [MCP as tools](\\advanced-patterns\\mcp)\n- [Human in the Loop](\\advanced-patterns\\human-in-the-loop)\n- [Multi-steps tools](\\advanced-patterns\\multi-steps-tools)\n- [Configuring Retries](\\advanced-patterns\\retries)\n- [Configuring Multi-tenancy](\\advanced-patterns\\multitenancy)\n- [UI Streaming with useAgent](\\advanced-patterns\\legacy-ui-streaming)",
      "char_count": 424,
      "token_count": 117,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\integrations_browserbase.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\integrations_browserbase.md",
        "file_name": "integrations_browserbase.md",
        "file_size": 11164,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "b2524c5742391d6f0c31ba025b098a863509e9ed2d0753191ba2677dc5bb95e7",
        "author": null,
        "created_at": "2025-10-12T23:51:49.629696",
        "modified_at": "2025-10-12T23:51:49.629803",
        "page_count": null,
        "word_count": 1516,
        "extracted_at": "2025-10-13T19:59:46.251993",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 12,
        "token_count": 117,
        "has_context": true
      }
    },
    {
      "index": 4,
      "text": "Guided Tour\n- [The three levels of AI apps](\\guided-tour\\overview)\n- [1. Explaining a given code file](\\guided-tour\\ai-workflows)\n- [2. Complex code analysis](\\guided-tour\\agentic-workflows)\n- [3. Autonomous Bug Solver](\\guided-tour\\ai-agents)",
      "char_count": 243,
      "token_count": 75,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\integrations_browserbase.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\integrations_browserbase.md",
        "file_name": "integrations_browserbase.md",
        "file_size": 11164,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "b2524c5742391d6f0c31ba025b098a863509e9ed2d0753191ba2677dc5bb95e7",
        "author": null,
        "created_at": "2025-10-12T23:51:49.629696",
        "modified_at": "2025-10-12T23:51:49.629803",
        "page_count": null,
        "word_count": 1516,
        "extracted_at": "2025-10-13T19:59:46.251993",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 12,
        "token_count": 75,
        "has_context": true
      }
    },
    {
      "index": 5,
      "text": "Integrations\n- [E2B - Sandboxes for AI Agents](\\integrations\\e2b)\n- [Browserbase - AI Browsers](\\integrations\\browserbase)\n- [Smithery - MCP Registry](\\integrations\\smithery)\nclose\nOn this page\n- [Building AgentKit tools using Browserbase](#building-agentkit-tools-using-browserbase)\n- [Example: Reddit Search Agent using Browserbase](#example%3A-reddit-search-agent-using-browserbase)\n- [Enable autonomous browsing with Stagehand](#enable-autonomous-browsing-with-stagehand)\nIntegrations",
      "char_count": 488,
      "token_count": 125,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\integrations_browserbase.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\integrations_browserbase.md",
        "file_name": "integrations_browserbase.md",
        "file_size": 11164,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "b2524c5742391d6f0c31ba025b098a863509e9ed2d0753191ba2677dc5bb95e7",
        "author": null,
        "created_at": "2025-10-12T23:51:49.629696",
        "modified_at": "2025-10-12T23:51:49.629803",
        "page_count": null,
        "word_count": 1516,
        "extracted_at": "2025-10-13T19:59:46.251993",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 12,
        "token_count": 125,
        "has_context": true
      }
    },
    {
      "index": 6,
      "text": "Using AgentKit with Browserbase\nDevelop AI Agents that can browse the web\n[Browserbase](https://www.browserbase.com/)\nprovides managed\n[headless browsers](https://docs.browserbase.com/introduction/what-is-headless-browser)\nto\nenable Agents to browse the web autonomously.\nThere are two ways to use Browserbase with AgentKit:\n- **Create your own Browserbase tools** : useful if you want to build simple actions on webpages with manual browser control.\n- **Use Browserbase's** [**Stagehand**](https://www.stagehand.dev/) **library as tools** : a better approach for autonomous browsing and resilient scraping.",
      "char_count": 607,
      "token_count": 136,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\integrations_browserbase.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\integrations_browserbase.md",
        "file_name": "integrations_browserbase.md",
        "file_size": 11164,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "b2524c5742391d6f0c31ba025b098a863509e9ed2d0753191ba2677dc5bb95e7",
        "author": null,
        "created_at": "2025-10-12T23:51:49.629696",
        "modified_at": "2025-10-12T23:51:49.629803",
        "page_count": null,
        "word_count": 1516,
        "extracted_at": "2025-10-13T19:59:46.251993",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 12,
        "token_count": 136,
        "has_context": true
      }
    },
    {
      "index": 7,
      "text": "Using AgentKit with Browserbase\nBuilding AgentKit tools using Browserbase\nCreating AgentKit\n[tools](\\concepts\\tools)\nusing the Browserbase TypeScript SDK is straightforward.\n1\nInstall AgentKit\nWithin an existing project, install AgentKit, Browserbase and Playwright core:\nnpm pnpm yarn Copy Ask AI\n```\nnpm install @inngest/agent-kit inngest @browserbasehq/sdk playwright-core\n```\nDon't have an existing project?\nTo create a new project, create a new directory then initialize using your package manager:\nnpm pnpm yarn Copy Ask AI\n```\nmkdir my-agent-kit-project && npm init\n```\n2\n1. Setup an AgentKit Newtork with an Agent\nCreate a Agent and its associated Network, for example a Reddit Search Agent:\nCopy Ask AI\n```\nimport {\nanthropic ,\ncreateAgent ,\ncreateNetwork ,\n} from \"@inngest/agent-kit\" ;\n\nconst searchAgent = createAgent ({\nname: \"reddit_searcher\" ,\ndescription: \"An agent that searches Reddit for relevant information\" ,\nsystem:\n\"You are a helpful assistant that searches Reddit for relevant information.\" ,\n});\n\n// Create the network\nconst redditSearchNetwork = createNetwork ({\nname: \"reddit_search_network\" ,\ndescription: \"A network that searches Reddit using Browserbase\" ,\nagents: [ searchAgent ],\nmaxIter: 2 ,\ndefaultModel: anthropic ({\nmodel: \"claude-3-5-sonnet-latest\" ,\nmax_tokens: 4096 ,\n});\n```\n3\nCreate a Browserbase tool\nLet's configure the Browserbase SDK and create a tool that can search Reddit:\nCopy Ask AI\n```\nimport {\nanthropic ,\ncreateAgent ,\ncreateNetwork ,\ncreateTool ,\n} from \"@inngest/agent-kit\" ;\nimport { z } from \"zod\" ;\nimport { chromium } from \"playwright-core\" ;\nimport Browserbase from \"@browserbasehq/sdk\" ;\n\nconst bb = new Browserbase ({\napiKey: process . env . BROWSERBASE_API_KEY as string ,\n});\n\n// Create a tool to search Reddit using Browserbase\nconst searchReddit = createTool ({\nname: \"search_reddit\" ,\ndescription: \"Search Reddit posts and comments\" ,\nparameters: z . object ({\nquery: z . string (). describe ( \"The search query for Reddit\" ),\n}),\nhandler : async ({ query }, { step }) => {\nreturn await step ?. run ( \"search-on-reddit\" , async () => {\n// Create a new session\nconst session = await bb . sessions . create ({\nprojectId: process . env . BROWSERBASE_PROJECT_ID as string ,\n});\n\n// Connect to the session\nconst browser = await chromium . connectOverCDP ( session . connectUrl );\ntry {\nconst page = await browser . newPage ();\n\n// Construct the search URL\nconst searchUrl = `https://search-new.pullpush.io/?type=submission&q= ${ query } ` ;\n\nconsole . log ( searchUrl );\n\nawait page . goto ( searchUrl );\n\n// Wait for results to load\nawait page . waitForSelector ( \"div.results\" , { timeout: 10000 });\n\n// Extract search results\nconst results = await page . evaluate (() => {\nconst posts = document . querySelectorAll ( \"div.results div:has(h1)\" );\nreturn Array . from ( posts ). map (( post ) => ({\ntitle: post . querySelector ( \"h1\" )?. textContent ?. trim (),\ncontent: post . querySelector ( \"div\" )?. textContent ?. trim (),\n}));\n});\n\nconsole . log ( \"results\" , JSON . stringify ( results , null , 2 ));\n\nreturn results . slice ( 0 , 5 ); // Return top 5 results\n} finally {\nawait browser . close ();\n}\n});\n},\n});\n```\nConfigure your\n```\nBROWSERBASE_API_KEY\n```\nand\n```\nBROWSERBASE_PROJECT_ID\n```\nin the\n```\n.env\n```\nfile. You can find your API key and project ID from the\n[Browserbase](https://docs.browserbase.com/introduction/getting-started#creating-your-account)\n[dashboard](https://docs.browserbase.com/introduction/getting-started#creating-your-account)\n. We recommend building tools using Browserbase using Inngest's\n```\nstep.run()\n```\nfunction. This ensures that the tool will only run once across multiple runs. More information about using\n```\nstep.run()\n```\ncan be found in the\n[Multi steps tools](\\advanced-patterns\\multi-steps-tools)\npage.",
      "char_count": 3820,
      "token_count": 945,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\integrations_browserbase.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\integrations_browserbase.md",
        "file_name": "integrations_browserbase.md",
        "file_size": 11164,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "b2524c5742391d6f0c31ba025b098a863509e9ed2d0753191ba2677dc5bb95e7",
        "author": null,
        "created_at": "2025-10-12T23:51:49.629696",
        "modified_at": "2025-10-12T23:51:49.629803",
        "page_count": null,
        "word_count": 1516,
        "extracted_at": "2025-10-13T19:59:46.251993",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 12,
        "token_count": 945,
        "has_context": true
      }
    },
    {
      "index": 8,
      "text": "Using AgentKit with Browserbase\nBuilding AgentKit tools using Browserbase\nExample: Reddit Search Agent using Browserbase\nYou will find a complete example of a Reddit search agent using Browserbase in the Reddit Search Agent using Browserbase example:",
      "char_count": 250,
      "token_count": 48,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\integrations_browserbase.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\integrations_browserbase.md",
        "file_name": "integrations_browserbase.md",
        "file_size": 11164,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "b2524c5742391d6f0c31ba025b098a863509e9ed2d0753191ba2677dc5bb95e7",
        "author": null,
        "created_at": "2025-10-12T23:51:49.629696",
        "modified_at": "2025-10-12T23:51:49.629803",
        "page_count": null,
        "word_count": 1516,
        "extracted_at": "2025-10-13T19:59:46.251993",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 12,
        "token_count": 48,
        "has_context": true
      }
    },
    {
      "index": 9,
      "text": "Using AgentKit with Browserbase\nReddit Search Agent using Browserbase\n[This examples shows how to build tools using Browserbase to power a Reddit search agent. Agents Tools Network Integrations](https://github.com/inngest/agent-kit/tree/main/examples/reddit-search-browserbase-tools#readme)",
      "char_count": 290,
      "token_count": 61,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\integrations_browserbase.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\integrations_browserbase.md",
        "file_name": "integrations_browserbase.md",
        "file_size": 11164,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "b2524c5742391d6f0c31ba025b098a863509e9ed2d0753191ba2677dc5bb95e7",
        "author": null,
        "created_at": "2025-10-12T23:51:49.629696",
        "modified_at": "2025-10-12T23:51:49.629803",
        "page_count": null,
        "word_count": 1516,
        "extracted_at": "2025-10-13T19:59:46.251993",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 12,
        "token_count": 61,
        "has_context": true
      }
    },
    {
      "index": 10,
      "text": "Using AgentKit with Browserbase\nEnable autonomous browsing with Stagehand\nBuilding AgentKit tools using\n[Stagehand](https://www.stagehand.dev/)\ngives more autonomy to your agents.\nStagehand comes with 4 primary API that can be directly used as tools:\n- `goto()` : navigate to a specific URL\n- `observe()` : observe the current page\n- `extract()` : extract data from the current page\n- `act()` : take action on the current page\nThese methods can be easily directly be used as tools in AgentKit, enabling agents to browse the web autonomously.\nBelow is an example of a simple search agent that uses Stagehand to search the web:\nCopy Ask AI\n```\nimport { createAgent , createTool } from \"@inngest/agent-kit\" ;\nimport { z } from \"zod\" ;\nimport { getStagehand , stringToZodSchema } from \"./utils.js\" ;\n\nconst webSearchAgent = createAgent ({\nname: \"web_search_agent\" ,\ndescription: \"I am a web search agent.\" ,\nsystem: `You are a web search agent.\n` ,\ntools: [\ncreateTool ({\nname: \"navigate\" ,\ndescription: \"Navigate to a given URL\" ,\nparameters: z . object ({\nurl: z . string (). describe ( \"the URL to navigate to\" ),\n}),\nhandler : async ({ url }, { step , network }) => {\nreturn await step ?. run ( \"navigate\" , async () => {\nconst stagehand = await getStagehand (\nnetwork ?. state . kv . get ( \"browserbaseSessionID\" ) !\n);\nawait stagehand . page . goto ( url );\nreturn `Navigated to ${ url } .` ;\n});\n},\n}),\ncreateTool ({\nname: \"extract\" ,\ndescription: \"Extract data from the page\" ,\nparameters: z . object ({\ninstruction: z\n. string ()\n. describe ( \"Instructions for what data to extract from the page\" ),\nschema: z\n. string ()\n. describe (\n\"A string representing the properties and types of data to extract, for example: '{ name: string, age: number }'\"\n),\n}),\nhandler : async ({ instruction , schema }, { step , network }) => {\nreturn await step ?. run ( \"extract\" , async () => {\nconst stagehand = await getStagehand (\nnetwork ?. state . kv . get ( \"browserbaseSessionID\" ) !\n);\nconst zodSchema = stringToZodSchema ( schema );\nreturn await stagehand . page . extract ({\ninstruction ,\nschema: zodSchema ,\n});\n});\n},\n}),\ncreateTool ({\nname: \"act\" ,\ndescription: \"Perform an action on the page\" ,\nparameters: z . object ({\naction: z\n. string ()\n. describe ( \"The action to perform (e.g. 'click the login button')\" ),\n}),\nhandler : async ({ action }, { step , network }) => {\nreturn await step ?. run ( \"act\" , async () => {\nconst stagehand = await getStagehand (\nnetwork ?. state . kv . get ( \"browserbaseSessionID\" ) !\n);\nreturn await stagehand . page . act ({ action });\n});\n},\n}),\ncreateTool ({\nname: \"observe\" ,\ndescription: \"Observe the page\" ,\nparameters: z . object ({\ninstruction: z\n. string ()\n. describe ( \"Specific instruction for what to observe on the page\" ),\n}),\nhandler : async ({ instruction }, { step , network }) => {\nreturn await step ?. run ( \"observe\" , async () => {\nconst stagehand = await getStagehand (\nnetwork ?. state . kv . get ( \"browserbaseSessionID\" ) !\n);\nreturn await stagehand . page . observe ({ instruction });\n});\n},\n}),\n],\n});\n```\nThese 4 AgentKit tools using Stagehand enables the Web Search Agent to browse the web autonomously. The\n```\ngetStagehand()\n```\nhelper function is used to retrieve the persisted instance created for the network execution (\n*see full code below*\n).\nYou will find the complete example on GitHub:",
      "char_count": 3361,
      "token_count": 827,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\integrations_browserbase.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\integrations_browserbase.md",
        "file_name": "integrations_browserbase.md",
        "file_size": 11164,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "b2524c5742391d6f0c31ba025b098a863509e9ed2d0753191ba2677dc5bb95e7",
        "author": null,
        "created_at": "2025-10-12T23:51:49.629696",
        "modified_at": "2025-10-12T23:51:49.629803",
        "page_count": null,
        "word_count": 1516,
        "extracted_at": "2025-10-13T19:59:46.251993",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 12,
        "token_count": 827,
        "has_context": true
      }
    },
    {
      "index": 11,
      "text": "Using AgentKit with Browserbase\nSimple Search Agent using Stagehand\n[This examples shows how to build tools using Stagehand to power a simple search agent. Agents Tools Network Integrations](https://github.com/inngest/agent-kit/tree/main/examples/simple-search-stagehand/#readme)\n[Using AgentKit with E2B Previous](\\integrations\\e2b)\n[Smithery - MCP Registry Next](\\integrations\\smithery)\n⌘ I\nAssistant Responses are generated using AI and may contain mistakes.",
      "char_count": 461,
      "token_count": 105,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\integrations_browserbase.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\integrations_browserbase.md",
        "file_name": "integrations_browserbase.md",
        "file_size": 11164,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "b2524c5742391d6f0c31ba025b098a863509e9ed2d0753191ba2677dc5bb95e7",
        "author": null,
        "created_at": "2025-10-12T23:51:49.629696",
        "modified_at": "2025-10-12T23:51:49.629803",
        "page_count": null,
        "word_count": 1516,
        "extracted_at": "2025-10-13T19:59:46.251993",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 12,
        "token_count": 105,
        "has_context": true
      }
    }
  ]
}