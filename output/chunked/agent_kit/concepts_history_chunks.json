{
  "source": "Docs\\agent_kit\\concepts_history.md",
  "title": "##### Get Started",
  "num_chunks": 23,
  "total_chars": 20049,
  "chunks": [
    {
      "index": 0,
      "text": "Get Started\n- [Overview](\\overview)\n- [Quick start](\\getting-started\\quick-start)\n- [Installation](\\getting-started\\installation)\n- [Local development](\\getting-started\\local-development)",
      "char_count": 187,
      "token_count": 47,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\concepts_history.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\concepts_history.md",
        "file_name": "concepts_history.md",
        "file_size": 21741,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "49b9ed83cfb01a88071cc70c516fccd0cd28ea5776c14cece765855f4812d985",
        "author": null,
        "created_at": "2025-10-12T23:51:22.142527",
        "modified_at": "2025-10-12T23:51:22.142744",
        "page_count": null,
        "word_count": 3182,
        "extracted_at": "2025-10-13T19:59:25.022740",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 23,
        "token_count": 47,
        "has_context": true
      }
    },
    {
      "index": 1,
      "text": "Concepts\n- [Agents](\\concepts\\agents)\n- [Tools](\\concepts\\tools)\n- [Networks](\\concepts\\networks)\n- [State](\\concepts\\state)\n- [Routers](\\concepts\\routers)\n- [History](\\concepts\\history)\n- [Memory](\\concepts\\memory)\n- [Models](\\concepts\\models)\n- [Deployment](\\concepts\\deployment)",
      "char_count": 281,
      "token_count": 95,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\concepts_history.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\concepts_history.md",
        "file_name": "concepts_history.md",
        "file_size": 21741,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "49b9ed83cfb01a88071cc70c516fccd0cd28ea5776c14cece765855f4812d985",
        "author": null,
        "created_at": "2025-10-12T23:51:22.142527",
        "modified_at": "2025-10-12T23:51:22.142744",
        "page_count": null,
        "word_count": 3182,
        "extracted_at": "2025-10-13T19:59:25.022740",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 23,
        "token_count": 95,
        "has_context": true
      }
    },
    {
      "index": 2,
      "text": "Streaming\n- [Overview](\\streaming\\overview)\n- [Usage Guide](\\streaming\\usage-guide)\n- [Events](\\streaming\\events)\n- [Transport](\\streaming\\transport)\n- [Provider](\\streaming\\provider)",
      "char_count": 183,
      "token_count": 54,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\concepts_history.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\concepts_history.md",
        "file_name": "concepts_history.md",
        "file_size": 21741,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "49b9ed83cfb01a88071cc70c516fccd0cd28ea5776c14cece765855f4812d985",
        "author": null,
        "created_at": "2025-10-12T23:51:22.142527",
        "modified_at": "2025-10-12T23:51:22.142744",
        "page_count": null,
        "word_count": 3182,
        "extracted_at": "2025-10-13T19:59:25.022740",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 23,
        "token_count": 54,
        "has_context": true
      }
    },
    {
      "index": 3,
      "text": "Advanced Patterns\n- [Deterministic state routing](\\advanced-patterns\\routing)\n- [MCP as tools](\\advanced-patterns\\mcp)\n- [Human in the Loop](\\advanced-patterns\\human-in-the-loop)\n- [Multi-steps tools](\\advanced-patterns\\multi-steps-tools)\n- [Configuring Retries](\\advanced-patterns\\retries)\n- [Configuring Multi-tenancy](\\advanced-patterns\\multitenancy)\n- [UI Streaming with useAgent](\\advanced-patterns\\legacy-ui-streaming)",
      "char_count": 424,
      "token_count": 117,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\concepts_history.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\concepts_history.md",
        "file_name": "concepts_history.md",
        "file_size": 21741,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "49b9ed83cfb01a88071cc70c516fccd0cd28ea5776c14cece765855f4812d985",
        "author": null,
        "created_at": "2025-10-12T23:51:22.142527",
        "modified_at": "2025-10-12T23:51:22.142744",
        "page_count": null,
        "word_count": 3182,
        "extracted_at": "2025-10-13T19:59:25.022740",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 23,
        "token_count": 117,
        "has_context": true
      }
    },
    {
      "index": 4,
      "text": "Guided Tour\n- [The three levels of AI apps](\\guided-tour\\overview)\n- [1. Explaining a given code file](\\guided-tour\\ai-workflows)\n- [2. Complex code analysis](\\guided-tour\\agentic-workflows)\n- [3. Autonomous Bug Solver](\\guided-tour\\ai-agents)",
      "char_count": 243,
      "token_count": 75,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\concepts_history.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\concepts_history.md",
        "file_name": "concepts_history.md",
        "file_size": 21741,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "49b9ed83cfb01a88071cc70c516fccd0cd28ea5776c14cece765855f4812d985",
        "author": null,
        "created_at": "2025-10-12T23:51:22.142527",
        "modified_at": "2025-10-12T23:51:22.142744",
        "page_count": null,
        "word_count": 3182,
        "extracted_at": "2025-10-13T19:59:25.022740",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 23,
        "token_count": 75,
        "has_context": true
      }
    },
    {
      "index": 5,
      "text": "Integrations\n- [E2B - Sandboxes for AI Agents](\\integrations\\e2b)\n- [Browserbase - AI Browsers](\\integrations\\browserbase)\n- [Smithery - MCP Registry](\\integrations\\smithery)\nclose\nOn this page\n- [Overview](#overview)\n- [HistoryConfig Interface](#historyconfig-interface)\n- [createThread](#createthread)\n- [get](#get)\n- [appendUserMessage](#appendusermessage)\n- [appendResults](#appendresults)\n- [Usage](#usage)\n- [Persistence Patterns](#persistence-patterns)\n- [Server-Authoritative](#server-authoritative)\n- [Client-Authoritative (Performance Optimized)](#client-authoritative-performance-optimized)\n- [Server/Client Hybrid Pattern](#server%2Fclient-hybrid-pattern)\n- [How Thread IDs Are Managed](#how-thread-ids-are-managed)\n- [Thread Initialization Flow](#thread-initialization-flow)\n- [Best Practices](#best-practices)\n- [Future Enhancements](#future-enhancements)\n- [Complete Example](#complete-example)\nConcepts",
      "char_count": 918,
      "token_count": 244,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\concepts_history.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\concepts_history.md",
        "file_name": "concepts_history.md",
        "file_size": 21741,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "49b9ed83cfb01a88071cc70c516fccd0cd28ea5776c14cece765855f4812d985",
        "author": null,
        "created_at": "2025-10-12T23:51:22.142527",
        "modified_at": "2025-10-12T23:51:22.142744",
        "page_count": null,
        "word_count": 3182,
        "extracted_at": "2025-10-13T19:59:25.022740",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 23,
        "token_count": 244,
        "has_context": true
      }
    },
    {
      "index": 6,
      "text": "History\nLearn how to persist conversations for your agents and networks",
      "char_count": 71,
      "token_count": 12,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\concepts_history.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\concepts_history.md",
        "file_name": "concepts_history.md",
        "file_size": 21741,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "49b9ed83cfb01a88071cc70c516fccd0cd28ea5776c14cece765855f4812d985",
        "author": null,
        "created_at": "2025-10-12T23:51:22.142527",
        "modified_at": "2025-10-12T23:51:22.142744",
        "page_count": null,
        "word_count": 3182,
        "extracted_at": "2025-10-13T19:59:25.022740",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 23,
        "token_count": 12,
        "has_context": true
      }
    },
    {
      "index": 7,
      "text": "History\nOverview\nAgentKit enables persistent conversations that maintain context across multiple runs. By implementing a\n**History Adapter**\n, you can connect your agents and networks to any database or storage solution, allowing conversations to resume exactly where they left off.\nA History Adapter is a configuration object that bridges AgentKit's execution lifecycle with your database. It tells AgentKit how to:\n1. **Create** new conversation threads\n2. **Load** existing conversation history\n3. **Save** new messages and results\nAgentKit is database-agnostic. You can use PostgreSQL, MongoDB, Redis, or any\nstorage solution by implementing the\n```\nHistoryConfig\n```\ninterface.\nThe adapter is passed to\n```\ncreateAgent()\n```\nor\n```\ncreateNetwork()\n```\nand AgentKit automatically calls your adapter's methods at the appropriate times during execution.",
      "char_count": 855,
      "token_count": 174,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\concepts_history.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\concepts_history.md",
        "file_name": "concepts_history.md",
        "file_size": 21741,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "49b9ed83cfb01a88071cc70c516fccd0cd28ea5776c14cece765855f4812d985",
        "author": null,
        "created_at": "2025-10-12T23:51:22.142527",
        "modified_at": "2025-10-12T23:51:22.142744",
        "page_count": null,
        "word_count": 3182,
        "extracted_at": "2025-10-13T19:59:25.022740",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 23,
        "token_count": 174,
        "has_context": true
      }
    },
    {
      "index": 8,
      "text": "History\nOverview\nHistoryConfig Interface\nThe\n```\nHistoryConfig\n```\ninterface has four optional methods. Below is an expanded view of the interface showing the context and parameters passed to each method.\nCopy Ask AI\n```\nimport type {\nState ,\nNetworkRun ,\nAgentResult ,\nGetStepTools ,\nStateData ,\n} from \"@inngest/agent-kit\" ;\n\ninterface HistoryConfig < T extends StateData > {\n/**\n* Creates a new conversation thread or ensures it exists.\n* Invoked at the start of a run to initialize the thread.\n*/\ncreateThread ?: ( ctx : {\nstate : State < T >; // The current state, including your custom data\ninput : string ; // The user's input string\nnetwork ?: NetworkRun < T >; // The network instance (if applicable)\nstep ?: GetStepTools ; // Inngest step tools for durable execution\n}) => Promise <{ threadId : string }>;\n\n/**\n* Retrieves conversation history from your database.\n* Invoked after thread initialization if no history is provided by the client.\n*/\nget ?: ( ctx : {\nthreadId ?: string ; // The ID of the conversation thread\nstate : State < T >;\ninput : string ;\nnetwork : NetworkRun < T >;\nstep ?: GetStepTools ;\n}) => Promise < AgentResult []>;\n\n/**\n* Saves the user's message at the beginning of a run.\n* Invoked immediately after thread initialization, before any agents run.\n*/\nappendUserMessage ?: ( ctx : {\nthreadId ?: string ;\nuserMessage : {\nid : string ; // Canonical, client-generated message ID\ncontent : string ;\nrole : \"user\" ;\ntimestamp : Date ;\n};\nstate : State < T >;\ninput : string ;\nnetwork : NetworkRun < T >;\nstep ?: GetStepTools ;\n}) => Promise < void >;\n\n/**\n* Saves new agent results to your database after a run.\n* Invoked at the end of a successful agent or network run.\n*/\nappendResults ?: ( ctx : {\nthreadId ?: string ;\nnewResults : AgentResult []; // The new results generated during this run\nstate : State < T >;\ninput : string ;\nnetwork : NetworkRun < T >;\nstep ?: GetStepTools ;\n}) => Promise < void >;\n}\n```",
      "char_count": 1946,
      "token_count": 461,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\concepts_history.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\concepts_history.md",
        "file_name": "concepts_history.md",
        "file_size": 21741,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "49b9ed83cfb01a88071cc70c516fccd0cd28ea5776c14cece765855f4812d985",
        "author": null,
        "created_at": "2025-10-12T23:51:22.142527",
        "modified_at": "2025-10-12T23:51:22.142744",
        "page_count": null,
        "word_count": 3182,
        "extracted_at": "2025-10-13T19:59:25.022740",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 23,
        "token_count": 461,
        "has_context": true
      }
    },
    {
      "index": 9,
      "text": "History\nOverview\nHistoryConfig Interface\ncreateThread\n- Creates a new conversation thread in your database or ensures an existing thread is present\n- Invoked at the start of a run to initialize the thread\n- **Important** : If a `threadId` already exists in the state, your adapter should upsert (insert or update) to ensure the thread exists in storage\n- Returns an object with the `threadId`",
      "char_count": 392,
      "token_count": 87,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\concepts_history.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\concepts_history.md",
        "file_name": "concepts_history.md",
        "file_size": 21741,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "49b9ed83cfb01a88071cc70c516fccd0cd28ea5776c14cece765855f4812d985",
        "author": null,
        "created_at": "2025-10-12T23:51:22.142527",
        "modified_at": "2025-10-12T23:51:22.142744",
        "page_count": null,
        "word_count": 3182,
        "extracted_at": "2025-10-13T19:59:25.022740",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 23,
        "token_count": 87,
        "has_context": true
      }
    },
    {
      "index": 10,
      "text": "History\nOverview\nHistoryConfig Interface\nget\n- Retrieves conversation history from your database\n- \nInvoked after thread initialization, but\n**only if**\n:\n- A `threadId` is present in the state\n- The client didn't provide `results` or `messages`\n- The thread was not just created in this run (client provided the threadId)\n- Returns an array of `AgentResult[]` representing the conversation history\n- **Recommended** : Include both user messages and agent results by converting user messages to `AgentResult` objects with `agentName: \"user\"` to preserve conversation order",
      "char_count": 572,
      "token_count": 124,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\concepts_history.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\concepts_history.md",
        "file_name": "concepts_history.md",
        "file_size": 21741,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "49b9ed83cfb01a88071cc70c516fccd0cd28ea5776c14cece765855f4812d985",
        "author": null,
        "created_at": "2025-10-12T23:51:22.142527",
        "modified_at": "2025-10-12T23:51:22.142744",
        "page_count": null,
        "word_count": 3182,
        "extracted_at": "2025-10-13T19:59:25.022740",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 23,
        "token_count": 124,
        "has_context": true
      }
    },
    {
      "index": 11,
      "text": "History\nOverview\nHistoryConfig Interface\nappendUserMessage\n- Saves the user's message immediately at the beginning of a run\n- Invoked after thread initialization but before any agents execute\n- Ensures user intent is captured even if the agent run fails (enables \"regenerate\" workflows)\n- Receives the user's message with a canonical, client-generated ID for idempotency",
      "char_count": 370,
      "token_count": 79,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\concepts_history.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\concepts_history.md",
        "file_name": "concepts_history.md",
        "file_size": 21741,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "49b9ed83cfb01a88071cc70c516fccd0cd28ea5776c14cece765855f4812d985",
        "author": null,
        "created_at": "2025-10-12T23:51:22.142527",
        "modified_at": "2025-10-12T23:51:22.142744",
        "page_count": null,
        "word_count": 3182,
        "extracted_at": "2025-10-13T19:59:25.022740",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 23,
        "token_count": 79,
        "has_context": true
      }
    },
    {
      "index": 12,
      "text": "History\nOverview\nHistoryConfig Interface\nappendResults\n- Saves new agent results to your database after a network or agent run\n- Invoked at the end of a successful agent or network run\n- Receives only the *new* results generated during this run (AgentKit automatically filters out historical results to prevent duplicates)",
      "char_count": 322,
      "token_count": 65,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\concepts_history.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\concepts_history.md",
        "file_name": "concepts_history.md",
        "file_size": 21741,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "49b9ed83cfb01a88071cc70c516fccd0cd28ea5776c14cece765855f4812d985",
        "author": null,
        "created_at": "2025-10-12T23:51:22.142527",
        "modified_at": "2025-10-12T23:51:22.142744",
        "page_count": null,
        "word_count": 3182,
        "extracted_at": "2025-10-13T19:59:25.022740",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 23,
        "token_count": 65,
        "has_context": true
      }
    },
    {
      "index": 13,
      "text": "History\nUsage\nHere's a complete example of creating a network with history persistence:\nCopy Ask AI\n```\nimport {\ncreateNetwork ,\ncreateAgent ,\ncreateState ,\nopenai ,\n} from \"@inngest/agent-kit\" ;\nimport { db } from \"./db\" ; // Your database client\n\n// Define your history adapter with all four methods\nconst conversationHistoryAdapter : HistoryConfig < any > = {\n// 1. Create new conversation threads (or ensure they exist)\ncreateThread : async ({ state , input }) => {\n// If a threadId already exists, upsert to ensure it's in the database\nif ( state . threadId ) {\nawait db . thread . upsert ({\nwhere: { id: state . threadId },\nupdate: { updatedAt: new Date () },\ncreate: {\nid: state . threadId ,\nuserId: state . data . userId ,\ntitle: input . slice ( 0 , 50 ),\ncreatedAt: new Date (),\n},\n});\nreturn { threadId: state . threadId };\n}\n\n// Otherwise, create a new thread\nconst thread = await db . thread . create ({\ndata: {\nuserId: state . data . userId ,\ntitle: input . slice ( 0 , 50 ), // First 50 chars as title\ncreatedAt: new Date (),\n},\n});\nreturn { threadId: thread . id };\n},\n\n// 2. Load conversation history (including user messages)\nget : async ({ threadId }) => {\nif ( ! threadId ) return [];\n\nconst messages = await db . message . findMany ({\nwhere: { threadId },\norderBy: { createdAt: \"asc\" },\n});\n\n// Transform ALL messages (user + agent) to AgentResult format\n// This preserves the complete conversation order\nreturn messages . map (( msg ) => {\nif ( msg . role === \"user\" ) {\n// Convert user messages to AgentResult with agentName: \"user\"\nreturn new AgentResult (\n\"user\" ,\n[\n{\ntype: \"text\" as const ,\nrole: \"user\" as const ,\ncontent: msg . content ,\nstop_reason: \"stop\" ,\n},\n],\n[],\nnew Date ( msg . createdAt )\n);\n} else {\n// Return agent results\nreturn new AgentResult (\nmsg . agentName ,\n[\n{\ntype: \"text\" as const ,\nrole: \"assistant\" as const ,\ncontent: msg . content ,\n},\n],\n[],\nnew Date ( msg . createdAt )\n);\n}\n});\n},\n\n// 3. Save user message immediately (before agents run)\nappendUserMessage : async ({ threadId , userMessage }) => {\nif ( ! threadId ) return ;\n\nawait db . message . create ({\ndata: {\nmessageId: userMessage . id , // Use canonical client-generated ID\nthreadId ,\nrole: \"user\" ,\ncontent: userMessage . content ,\ncreatedAt: userMessage . timestamp ,\n},\n});\n},\n\n// 4. Save agent results after the run\nappendResults : async ({ threadId , newResults }) => {\nif ( ! threadId ) return ;\n\n// Save only agent responses (user message already saved)\nfor ( const result of newResults ) {\nconst content = result . output\n. filter (( msg ) => msg . type === \"text\" )\n. map (( msg ) => msg . content )\n. join ( \" \\n \" );\n\nawait db . message . create ({\ndata: {\nmessageId: result . id || crypto . randomUUID (), // Use result.id if available\nthreadId ,\nrole: \"assistant\" ,\nagentName: result . agentName ,\ncontent ,\nchecksum: result . checksum , // For idempotency\ncreatedAt: result . createdAt ,\n},\n});\n}\n},\n};\n```\nOnce you've created your adapter, pass it to the\n```\nhistory\n```\nproperty when creating an agent or network:\nAgent Network Copy Ask AI\n```\nimport { createAgent } from \"@inngest/agent-kit\" ;\nimport { postgresHistoryAdapter } from \"./my-postgres-adapter\" ;\n\nconst chatAgent = createAgent ({\nname: \"chat-agent\" ,\nsystem: \"You are a helpful assistant.\" ,\nhistory: postgresHistoryAdapter , // Add your adapter here\n});\n\n// Now the agent will automatically persist conversations\nawait chatAgent . run ( \"Hello!\" , {\nstate: createState ({ userId: \"user123\" }, { threadId: \"thread-456\" }),\n});\n```",
      "char_count": 3526,
      "token_count": 896,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\concepts_history.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\concepts_history.md",
        "file_name": "concepts_history.md",
        "file_size": 21741,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "49b9ed83cfb01a88071cc70c516fccd0cd28ea5776c14cece765855f4812d985",
        "author": null,
        "created_at": "2025-10-12T23:51:22.142527",
        "modified_at": "2025-10-12T23:51:22.142744",
        "page_count": null,
        "word_count": 3182,
        "extracted_at": "2025-10-13T19:59:25.022740",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 23,
        "token_count": 896,
        "has_context": true
      }
    },
    {
      "index": 14,
      "text": "History\nPersistence Patterns\nAgentKit supports two distint patterns for managing conversation history.",
      "char_count": 102,
      "token_count": 16,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\concepts_history.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\concepts_history.md",
        "file_name": "concepts_history.md",
        "file_size": 21741,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "49b9ed83cfb01a88071cc70c516fccd0cd28ea5776c14cece765855f4812d985",
        "author": null,
        "created_at": "2025-10-12T23:51:22.142527",
        "modified_at": "2025-10-12T23:51:22.142744",
        "page_count": null,
        "word_count": 3182,
        "extracted_at": "2025-10-13T19:59:25.022740",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 23,
        "token_count": 16,
        "has_context": true
      }
    },
    {
      "index": 15,
      "text": "History\nPersistence Patterns\nServer-Authoritative\nThe client sends a message with a\n```\nthreadId\n```\n. AgentKit automatically loads the full conversation context from your database before the network runs.\nCopy Ask AI\n```\n// Client sends just the threadId\nconst state = createState (\n{ userId: \"user123\" },\n{ threadId: \"existing-thread-id\" }\n);\n\nawait chatNetwork . run ( \"Continue our conversation\" , { state });\n// AgentKit calls history.get() to load full context for all agents\n```\n**Use case**\n: Perfect for restoring conversations after page refresh or when opening the app on a new device.",
      "char_count": 596,
      "token_count": 136,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\concepts_history.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\concepts_history.md",
        "file_name": "concepts_history.md",
        "file_size": 21741,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "49b9ed83cfb01a88071cc70c516fccd0cd28ea5776c14cece765855f4812d985",
        "author": null,
        "created_at": "2025-10-12T23:51:22.142527",
        "modified_at": "2025-10-12T23:51:22.142744",
        "page_count": null,
        "word_count": 3182,
        "extracted_at": "2025-10-13T19:59:25.022740",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 23,
        "token_count": 136,
        "has_context": true
      }
    },
    {
      "index": 16,
      "text": "History\nPersistence Patterns\nClient-Authoritative (Performance Optimized)\nThe client maintains conversation state locally and sends the complete history with each request. AgentKit detects this and skips the database read for better performance.\nCopy Ask AI\n```\n// Client sends the full conversation history\nconst state = createState (\n{ userId: \"user123\" },\n{\nthreadId: \"thread-id\" ,\nresults: previousConversationResults , // Full history from client\n}\n);\n\nawait chatNetwork . run ( \"New message\" , { state });\n// AgentKit skips history.get() call - faster performance!\n// Still calls appendUserMessage() and appendResults() to save new messages\n```\n**Use case**\n: Ideal for interactive chat applications where the frontend maintains conversation state and fetches messages from an existing/separate API\n**Note**\n: Providing either\n```\nresults\n```\nor\n```\nmessages\n```\nto\n```\ncreateState\n```\nwill disable the\n```\nhistory.get()\n```\ncall, enabling this client-authoritative pattern.",
      "char_count": 980,
      "token_count": 215,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\concepts_history.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\concepts_history.md",
        "file_name": "concepts_history.md",
        "file_size": 21741,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "49b9ed83cfb01a88071cc70c516fccd0cd28ea5776c14cece765855f4812d985",
        "author": null,
        "created_at": "2025-10-12T23:51:22.142527",
        "modified_at": "2025-10-12T23:51:22.142744",
        "page_count": null,
        "word_count": 3182,
        "extracted_at": "2025-10-13T19:59:25.022740",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 23,
        "token_count": 215,
        "has_context": true
      }
    },
    {
      "index": 17,
      "text": "History\nPersistence Patterns\nServer/Client Hybrid Pattern\nYou can combine the Server-Authoritative and Client-Authoritative patterns for an optimal user experience. This hybrid approach allows for fast initial conversation loading and high-performance interactive chat.\n1. **Initial Load (Server-Authoritative):** When a user opens a conversation thread, the client sends only the `threadId` . AgentKit fetches the history from your database using `history.get()` . The application then hydrates the client-side state with this history.\n2. **Interactive Session (Client-Authoritative):** For all subsequent requests within the session, the client sends the full, up-to-date history ( `results` or `messages` ) along with the `threadId` . AgentKit detects the client-provided history and skips the database read, resulting in a faster response.\n**Use case**\n: Ideal for interactive chat applications where the frontend maintains conversation state but lets AgentKit fetch messages via their history adapter",
      "char_count": 1005,
      "token_count": 197,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\concepts_history.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\concepts_history.md",
        "file_name": "concepts_history.md",
        "file_size": 21741,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "49b9ed83cfb01a88071cc70c516fccd0cd28ea5776c14cece765855f4812d985",
        "author": null,
        "created_at": "2025-10-12T23:51:22.142527",
        "modified_at": "2025-10-12T23:51:22.142744",
        "page_count": null,
        "word_count": 3182,
        "extracted_at": "2025-10-13T19:59:25.022740",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 23,
        "token_count": 197,
        "has_context": true
      }
    },
    {
      "index": 18,
      "text": "History\nHow Thread IDs Are Managed\nAgentKit offers a flexible system for managing conversation thread IDs, ensuring that history is handled correctly whether you're starting a new conversation or continuing an existing one. Here's how AgentKit determines which\n```\nthreadId\n```\nto use:",
      "char_count": 285,
      "token_count": 57,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\concepts_history.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\concepts_history.md",
        "file_name": "concepts_history.md",
        "file_size": 21741,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "49b9ed83cfb01a88071cc70c516fccd0cd28ea5776c14cece765855f4812d985",
        "author": null,
        "created_at": "2025-10-12T23:51:22.142527",
        "modified_at": "2025-10-12T23:51:22.142744",
        "page_count": null,
        "word_count": 3182,
        "extracted_at": "2025-10-13T19:59:25.022740",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 23,
        "token_count": 57,
        "has_context": true
      }
    },
    {
      "index": 19,
      "text": "History\nHow Thread IDs Are Managed\nThread Initialization Flow\n```\nthreadId\n```\n```\ncreateThread\n```\n```\ncreateThread\n```\n```\nthreadId\n```\n```\ncreateThread\n```\n```\nthreadId\n```\n```\nget\n```\n```\nthreadId\n```\n1. **Explicit** **`threadId`** **with** **`createThread`** **:** When you provide a `threadId` and your adapter has a `createThread` method, AgentKit calls `createThread` to ensure the thread exists in your database. Your adapter should implement an **upsert** pattern (insert if new, update if exists) to handle both new and existing threads gracefully. Copy Ask AI `// Continue a specific, existing conversation const state = createState ( { userId: \"user-123\" }, { threadId: \"existing-thread-id-123\" } ); await network . run ( \"Let's pick up where we left off.\" , { state }); // createThread is called to ensure thread exists in DB // Then history.get() loads the conversation history`\n2. **Automatic Creation via** **`createThread`** **:** If you don't provide a `threadId` , AgentKit checks if your history adapter has a `createThread` method. If so, AgentKit calls it to create a new conversation thread in your database. Your `createThread` function is responsible for generating and returning the new unique `threadId` . This is the recommended approach for starting new conversations, as it ensures a record is created in your backend from the very beginning. Copy Ask AI `// Start a new conversation const state = createState ({ userId: \"user-123\" }); await network . run ( \"Hello!\" , { state }); // createThread is called to create a new thread // state.threadId is set to the new thread ID`\n3. **Automatic Generation (Fallback):** In cases where you don't provide a `threadId` and your history adapter does *not* have a `createThread` method but *does* have a `get` method, AgentKit provides a fallback. It will automatically generate a standard UUID and assign it as the `threadId` for the current run. This convenience ensures the conversation can proceed with a unique identifier for saving and loading history, even without an explicit creation step. Copy Ask AI `// Fallback: UUID is generated automatically const state = createState ({ userId: \"user-123\" }); await network . run ( \"Hello!\" , { state }); // state.threadId is set to a new UUID // appendUserMessage and appendResults can use this ID`",
      "char_count": 2321,
      "token_count": 554,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\concepts_history.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\concepts_history.md",
        "file_name": "concepts_history.md",
        "file_size": 21741,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "49b9ed83cfb01a88071cc70c516fccd0cd28ea5776c14cece765855f4812d985",
        "author": null,
        "created_at": "2025-10-12T23:51:22.142527",
        "modified_at": "2025-10-12T23:51:22.142744",
        "page_count": null,
        "word_count": 3182,
        "extracted_at": "2025-10-13T19:59:25.022740",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 23,
        "token_count": 554,
        "has_context": true
      }
    },
    {
      "index": 20,
      "text": "History\nBest Practices\nImplement Idempotency with Message IDs and Checksums\nUse unique constraints on\n```\nmessage_id\n```\nand\n```\nchecksum\n```\nto prevent duplicate messages during retries or streaming scenarios.\nCopy Ask AI\n```\nCREATE TABLE messages (\nid SERIAL PRIMARY KEY ,\nmessage_id UUID NOT NULL ,\nthread_id UUID NOT NULL ,\nmessage_type TEXT NOT NULL , -- 'user' or 'agent'\ncontent TEXT ,\nchecksum TEXT NOT NULL ,\ncreated_at TIMESTAMP DEFAULT NOW (),\nUNIQUE (thread_id, message_id), -- Prevent duplicate message IDs\nUNIQUE (thread_id, checksum ) -- Prevent duplicate content\n);\n```\nCopy Ask AI\n```\nappendUserMessage : async ({ threadId , userMessage }) => {\nawait db . message . create ({\ndata: {\nmessageId: userMessage . id , // Use canonical client ID\nthreadId ,\ncontent: userMessage . content ,\nchecksum: generateChecksum ( userMessage ),\n},\n});\n},\n\nappendResults : async ({ threadId , newResults }) => {\nfor ( const result of newResults ) {\nawait db . message . create ({\ndata: {\nmessageId: result . id || crypto . randomUUID (),\nthreadId ,\nchecksum: result . checksum , // Built-in checksum\n// ... other fields\n},\n});\n}\n}\n```\nLeverage Inngest's Durable Steps\nWrap database operations in\n```\nstep.run()\n```\nfor automatic retries and durability.\nCopy Ask AI\n```\nappendUserMessage : async ({ threadId , userMessage , step }) => {\nif ( step ) {\nreturn await step . run ( \"save-user-message\" , async () => {\nreturn await db . saveMessage ( threadId , userMessage );\n});\n}\nreturn await db . saveMessage ( threadId , userMessage );\n}\n```\nHandle Missing Threads Gracefully\nIf a thread doesn't exist, return an empty array rather than throwing an error.\nCopy Ask AI\n```\nget : async ({ threadId }) => {\nif ( ! threadId ) return [];\n\nconst messages = await db . getMessages ( threadId );\nreturn messages || []; // Handle null/undefined gracefully\n}\n```\nIndex Your Database Properly\nEnsure you have indexes on key columns for fast queries.\nCopy Ask AI\n```\nCREATE INDEX idx_messages_thread_id ON messages(thread_id);\nCREATE INDEX idx_messages_created_at ON messages(created_at);\nCREATE INDEX idx_messages_type ON messages(message_type);\nCREATE INDEX idx_messages_message_id ON messages(message_id);\n```\nReturn Complete Conversation History\nInclude both user messages and agent results in your\n```\nget()\n```\nmethod to preserve conversation order.\nCopy Ask AI\n```\nget : async ({ threadId }) => {\nconst messages = await db . message . findMany ({\nwhere: { threadId },\norderBy: { createdAt: \"asc\" },\n});\n\n// Convert ALL messages (user + agent) to AgentResult format\nreturn messages . map (( msg ) => {\nif ( msg . role === \"user\" ) {\nreturn new AgentResult ( \"user\" , [\n{ type: \"text\" , role: \"user\" , content: msg . content }\n], [], new Date ( msg . createdAt ));\n} else {\nreturn new AgentResult ( msg . agentName , [\n{ type: \"text\" , role: \"assistant\" , content: msg . content }\n], [], new Date ( msg . createdAt ));\n}\n});\n}\n```\nImplement Upsert in createThread\nHandle both new and existing threads gracefully by implementing an upsert pattern.\nCopy Ask AI\n```\ncreateThread : async ({ state }) => {\nif ( state . threadId ) {\n// Upsert: ensure existing thread is in DB\nawait db . thread . upsert ({\nwhere: { id: state . threadId },\nupdate: { updatedAt: new Date () },\ncreate: { id: state . threadId , userId: state . data . userId },\n});\nreturn { threadId: state . threadId };\n}\n\n// Create new thread\nconst thread = await db . thread . create ({\ndata: { userId: state . data . userId },\n});\nreturn { threadId: thread . id };\n}\n```",
      "char_count": 3522,
      "token_count": 849,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\concepts_history.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\concepts_history.md",
        "file_name": "concepts_history.md",
        "file_size": 21741,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "49b9ed83cfb01a88071cc70c516fccd0cd28ea5776c14cece765855f4812d985",
        "author": null,
        "created_at": "2025-10-12T23:51:22.142527",
        "modified_at": "2025-10-12T23:51:22.142744",
        "page_count": null,
        "word_count": 3182,
        "extracted_at": "2025-10-13T19:59:25.022740",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 23,
        "token_count": 849,
        "has_context": true
      }
    },
    {
      "index": 21,
      "text": "History\nFuture Enhancements\nThe history system provides a foundation for advanced features to be released in the coming future including:\n- **Database Adapters** : Pre-built adapters for popular databases (coming soon)\n- **Progressive Summarization** : Automatic conversation compression for long threads\n- **Search & Retrieval** : Semantic search across conversation history",
      "char_count": 375,
      "token_count": 70,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\concepts_history.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\concepts_history.md",
        "file_name": "concepts_history.md",
        "file_size": 21741,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "49b9ed83cfb01a88071cc70c516fccd0cd28ea5776c14cece765855f4812d985",
        "author": null,
        "created_at": "2025-10-12T23:51:22.142527",
        "modified_at": "2025-10-12T23:51:22.142744",
        "page_count": null,
        "word_count": 3182,
        "extracted_at": "2025-10-13T19:59:25.022740",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 23,
        "token_count": 70,
        "has_context": true
      }
    },
    {
      "index": 22,
      "text": "History\nComplete Example\nCheck out the\n[AgentKit Starter](https://github.com/inngest/agent-kit/tree/main/examples/agentkit-starter)\nfor a complete implementation featuring:\n- PostgreSQL history adapter\n- ChatGPT-style UI with thread management\n- Real-time streaming responses\n- Both server and client-authoritative patterns\nThe starter includes everything you need to build a conversational AI application with persistent history.\n[Routers Previous](\\concepts\\routers)\n[Memory Next](\\concepts\\memory)\n⌘ I\nAssistant Responses are generated using AI and may contain mistakes.",
      "char_count": 573,
      "token_count": 120,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\concepts_history.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\concepts_history.md",
        "file_name": "concepts_history.md",
        "file_size": 21741,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "49b9ed83cfb01a88071cc70c516fccd0cd28ea5776c14cece765855f4812d985",
        "author": null,
        "created_at": "2025-10-12T23:51:22.142527",
        "modified_at": "2025-10-12T23:51:22.142744",
        "page_count": null,
        "word_count": 3182,
        "extracted_at": "2025-10-13T19:59:25.022740",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 23,
        "token_count": 120,
        "has_context": true
      }
    }
  ]
}