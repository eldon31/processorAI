{
  "source": "Docs\\agent_kit\\guided-tour_agentic-workflows.md",
  "title": "##### Get Started",
  "num_chunks": 17,
  "total_chars": 19178,
  "chunks": [
    {
      "index": 0,
      "text": "Get Started\n- [Overview](\\overview)\n- [Quick start](\\getting-started\\quick-start)\n- [Installation](\\getting-started\\installation)\n- [Local development](\\getting-started\\local-development)",
      "char_count": 187,
      "token_count": 47,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\guided-tour_agentic-workflows.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\guided-tour_agentic-workflows.md",
        "file_name": "guided-tour_agentic-workflows.md",
        "file_size": 19570,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "9865a3ddd8aead1cb1b027a4e59c9db9811ef66d75bd2f3f0ac136646aa8b2e5",
        "author": null,
        "created_at": "2025-10-12T23:51:42.628860",
        "modified_at": "2025-10-12T23:51:42.628860",
        "page_count": null,
        "word_count": 2850,
        "extracted_at": "2025-10-13T19:59:39.746020",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 17,
        "token_count": 47,
        "has_context": true
      }
    },
    {
      "index": 1,
      "text": "Concepts\n- [Agents](\\concepts\\agents)\n- [Tools](\\concepts\\tools)\n- [Networks](\\concepts\\networks)\n- [State](\\concepts\\state)\n- [Routers](\\concepts\\routers)\n- [History](\\concepts\\history)\n- [Memory](\\concepts\\memory)\n- [Models](\\concepts\\models)\n- [Deployment](\\concepts\\deployment)",
      "char_count": 281,
      "token_count": 95,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\guided-tour_agentic-workflows.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\guided-tour_agentic-workflows.md",
        "file_name": "guided-tour_agentic-workflows.md",
        "file_size": 19570,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "9865a3ddd8aead1cb1b027a4e59c9db9811ef66d75bd2f3f0ac136646aa8b2e5",
        "author": null,
        "created_at": "2025-10-12T23:51:42.628860",
        "modified_at": "2025-10-12T23:51:42.628860",
        "page_count": null,
        "word_count": 2850,
        "extracted_at": "2025-10-13T19:59:39.746020",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 17,
        "token_count": 95,
        "has_context": true
      }
    },
    {
      "index": 2,
      "text": "Streaming\n- [Overview](\\streaming\\overview)\n- [Usage Guide](\\streaming\\usage-guide)\n- [Events](\\streaming\\events)\n- [Transport](\\streaming\\transport)\n- [Provider](\\streaming\\provider)",
      "char_count": 183,
      "token_count": 54,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\guided-tour_agentic-workflows.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\guided-tour_agentic-workflows.md",
        "file_name": "guided-tour_agentic-workflows.md",
        "file_size": 19570,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "9865a3ddd8aead1cb1b027a4e59c9db9811ef66d75bd2f3f0ac136646aa8b2e5",
        "author": null,
        "created_at": "2025-10-12T23:51:42.628860",
        "modified_at": "2025-10-12T23:51:42.628860",
        "page_count": null,
        "word_count": 2850,
        "extracted_at": "2025-10-13T19:59:39.746020",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 17,
        "token_count": 54,
        "has_context": true
      }
    },
    {
      "index": 3,
      "text": "Advanced Patterns\n- [Deterministic state routing](\\advanced-patterns\\routing)\n- [MCP as tools](\\advanced-patterns\\mcp)\n- [Human in the Loop](\\advanced-patterns\\human-in-the-loop)\n- [Multi-steps tools](\\advanced-patterns\\multi-steps-tools)\n- [Configuring Retries](\\advanced-patterns\\retries)\n- [Configuring Multi-tenancy](\\advanced-patterns\\multitenancy)\n- [UI Streaming with useAgent](\\advanced-patterns\\legacy-ui-streaming)",
      "char_count": 424,
      "token_count": 117,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\guided-tour_agentic-workflows.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\guided-tour_agentic-workflows.md",
        "file_name": "guided-tour_agentic-workflows.md",
        "file_size": 19570,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "9865a3ddd8aead1cb1b027a4e59c9db9811ef66d75bd2f3f0ac136646aa8b2e5",
        "author": null,
        "created_at": "2025-10-12T23:51:42.628860",
        "modified_at": "2025-10-12T23:51:42.628860",
        "page_count": null,
        "word_count": 2850,
        "extracted_at": "2025-10-13T19:59:39.746020",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 17,
        "token_count": 117,
        "has_context": true
      }
    },
    {
      "index": 4,
      "text": "Guided Tour\n- [The three levels of AI apps](\\guided-tour\\overview)\n- [1. Explaining a given code file](\\guided-tour\\ai-workflows)\n- [2. Complex code analysis](\\guided-tour\\agentic-workflows)\n- [3. Autonomous Bug Solver](\\guided-tour\\ai-agents)",
      "char_count": 243,
      "token_count": 75,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\guided-tour_agentic-workflows.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\guided-tour_agentic-workflows.md",
        "file_name": "guided-tour_agentic-workflows.md",
        "file_size": 19570,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "9865a3ddd8aead1cb1b027a4e59c9db9811ef66d75bd2f3f0ac136646aa8b2e5",
        "author": null,
        "created_at": "2025-10-12T23:51:42.628860",
        "modified_at": "2025-10-12T23:51:42.628860",
        "page_count": null,
        "word_count": 2850,
        "extracted_at": "2025-10-13T19:59:39.746020",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 17,
        "token_count": 75,
        "has_context": true
      }
    },
    {
      "index": 5,
      "text": "Integrations\n- [E2B - Sandboxes for AI Agents](\\integrations\\e2b)\n- [Browserbase - AI Browsers](\\integrations\\browserbase)\n- [Smithery - MCP Registry](\\integrations\\smithery)\nclose\nOn this page\n- [Overview](#overview)\n- [Setup](#setup)\n- [Implementing our Code Assistant v2](#implementing-our-code-assistant-v2)\n- [Overview of the agentic workflow](#overview-of-the-agentic-workflow)\n- [A Network of Agents](#a-network-of-agents)\n- [Creating Agents with Tools](#creating-agents-with-tools)\n- [Assembling the Network](#assembling-the-network)\n- [Running the Code Assistant v2](#running-the-code-assistant-v2)\n- [What we've learned so far](#what-we%E2%80%99ve-learned-so-far)\n- [Next steps](#next-steps)\nGuided Tour",
      "char_count": 713,
      "token_count": 213,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\guided-tour_agentic-workflows.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\guided-tour_agentic-workflows.md",
        "file_name": "guided-tour_agentic-workflows.md",
        "file_size": 19570,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "9865a3ddd8aead1cb1b027a4e59c9db9811ef66d75bd2f3f0ac136646aa8b2e5",
        "author": null,
        "created_at": "2025-10-12T23:51:42.628860",
        "modified_at": "2025-10-12T23:51:42.628860",
        "page_count": null,
        "word_count": 2850,
        "extracted_at": "2025-10-13T19:59:39.746020",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 17,
        "token_count": 213,
        "has_context": true
      }
    },
    {
      "index": 6,
      "text": "Code Assistant v2: Complex code analysis\nUse AgentKit Tools and Custom Router to add agentic capabilities.",
      "char_count": 106,
      "token_count": 22,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\guided-tour_agentic-workflows.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\guided-tour_agentic-workflows.md",
        "file_name": "guided-tour_agentic-workflows.md",
        "file_size": 19570,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "9865a3ddd8aead1cb1b027a4e59c9db9811ef66d75bd2f3f0ac136646aa8b2e5",
        "author": null,
        "created_at": "2025-10-12T23:51:42.628860",
        "modified_at": "2025-10-12T23:51:42.628860",
        "page_count": null,
        "word_count": 2850,
        "extracted_at": "2025-10-13T19:59:39.746020",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 17,
        "token_count": 22,
        "has_context": true
      }
    },
    {
      "index": 7,
      "text": "Code Assistant v2: Complex code analysis\nOverview\nOur\n[Code Assistant v1](\\ai-agents-in-practice\\ai-workflows)\n, relying on a RAG workflow, had limited capabilities linked to its lack of reasoning.\nThe second version of our Code Assistant will introduce reasoning capabilities to adapt analysis based on the user's input:\nCopy Ask AI\n```\nconst {\nstate : { kv },\n} = await network . run (\n`Analyze the files/example.ts file by suggesting improvements and documentation.`\n);\nconsole . log ( \"Analysis:\" , kv . get ( \"summary\" ));\n\n// Analysis: The code analysis suggests several key areas for improvement:\n\n// 1. Type Safety and Structure:\n// - Implement strict TypeScript configurations\n// - Add explicit return types and interfaces\n// - Break down complex functions\n// - Follow Single Responsibility Principle\n// - Implement proper error handling\n\n// 2. Performance Optimization:\n// - Review and optimize critical operations\n// ...\n```\nThese agentic (reasoning) capabilities are introduced by the following AgentKit concepts:\n- [**Tools**](\\concepts\\tools) : Enables [Agents](\\concepts\\agents) to interact with their environment (ex: file system or shared State).\n- [**Router**](\\concepts\\router) : Powers the flow of the conversation between Agents.\n- [**Network**](\\concepts\\network) : Add a shared [State](\\concepts\\state) to share information between Agents.\nLet's learn these concepts in practice.",
      "char_count": 1402,
      "token_count": 315,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\guided-tour_agentic-workflows.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\guided-tour_agentic-workflows.md",
        "file_name": "guided-tour_agentic-workflows.md",
        "file_size": 19570,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "9865a3ddd8aead1cb1b027a4e59c9db9811ef66d75bd2f3f0ac136646aa8b2e5",
        "author": null,
        "created_at": "2025-10-12T23:51:42.628860",
        "modified_at": "2025-10-12T23:51:42.628860",
        "page_count": null,
        "word_count": 2850,
        "extracted_at": "2025-10-13T19:59:39.746020",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 17,
        "token_count": 315,
        "has_context": true
      }
    },
    {
      "index": 8,
      "text": "Code Assistant v2: Complex code analysis\nSetup\nSimilarly to the\n[Code Assistant v1](\\ai-agents-in-practice\\ai-workflows)\n, perform the following steps to setup your project:\n1. Initialize your project\nnpm pnpm yarn Copy Ask AI\n```\nnpm init\n```\n1. Install the required dependencies\nnpm pnpm yarn Copy Ask AI\n```\nnpm install @inngest/agent-kit inngest zod\n```\n1. Add TypeScript support\nnpm pnpm yarn Copy Ask AI\n```\nInstall the following dev dependencies:\n```\nAnd add the following scripts to your\n```\npackage.json\n```\n:\nCopy Ask AI\n```\n\"scripts\" : {\n\"start\" : \"tsx ./index.ts\"\n}\n```\n1. Download the example code file\nCopy Ask AI\n```\nmkdir files\ncd files\nwget https://raw.githubusercontent.com/inngest/agent-kit/main/examples/code-assistant-agentic/files/example.ts\ncd -\n```\nYou are now set up, let's implement the v2 of our Code Assistant.",
      "char_count": 838,
      "token_count": 226,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\guided-tour_agentic-workflows.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\guided-tour_agentic-workflows.md",
        "file_name": "guided-tour_agentic-workflows.md",
        "file_size": 19570,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "9865a3ddd8aead1cb1b027a4e59c9db9811ef66d75bd2f3f0ac136646aa8b2e5",
        "author": null,
        "created_at": "2025-10-12T23:51:42.628860",
        "modified_at": "2025-10-12T23:51:42.628860",
        "page_count": null,
        "word_count": 2850,
        "extracted_at": "2025-10-13T19:59:39.746020",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 17,
        "token_count": 226,
        "has_context": true
      }
    },
    {
      "index": 9,
      "text": "Code Assistant v2: Complex code analysis\nImplementing our Code Assistant v2\nOverview of the agentic workflow\nOur Code Assistant v2 introduces reasoning to perform tailored recommendations based on a given code file: refactoring, documentation, etc.\nTo achieve this behavior, we will need to:\n- \nCreate a\n```\ncode_assistant_agent\n```\nAgent that will load a given filename from disk and plan a workflow using the following available\n[Agents](\\concepts\\agents)\n:\n- `analysis_agent` that will analyze the code file and suggest improvements\n- `documentation_agent` that will generate documentation for the code file\n- Finally, create a `summarization_agent` Agent that will generate a summary of the suggestions made by other agents\nCompared to our\n[Code Assistant v1](\\ai-agents-in-practice\\ai-workflows)\n, this new version does not consist of simple retrieval and generations steps.\nInstead, it introduces more flexibility by enabling LLM models to plan actions and select tools to use.\nLet's see how to implement the Agents.",
      "char_count": 1022,
      "token_count": 221,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\guided-tour_agentic-workflows.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\guided-tour_agentic-workflows.md",
        "file_name": "guided-tour_agentic-workflows.md",
        "file_size": 19570,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "9865a3ddd8aead1cb1b027a4e59c9db9811ef66d75bd2f3f0ac136646aa8b2e5",
        "author": null,
        "created_at": "2025-10-12T23:51:42.628860",
        "modified_at": "2025-10-12T23:51:42.628860",
        "page_count": null,
        "word_count": 2850,
        "extracted_at": "2025-10-13T19:59:39.746020",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 17,
        "token_count": 221,
        "has_context": true
      }
    },
    {
      "index": 10,
      "text": "Code Assistant v2: Complex code analysis\nImplementing our Code Assistant v2\nA Network of Agents\nOur Code Assistant v2 is composed of 4 Agents collaborating together to analyze a given code file.\nSuch collaboration is made possible by using a\n[Network](\\concepts\\network)\nto orchestrate the Agents and share\n[State](\\concepts\\state)\nbetween them.\nUnlike the\n[Code Assistant v1](\\ai-agents-in-practice\\ai-workflows)\n, the user prompt will be passed to the network instead of an individual Agent:\nCopy Ask AI\n```\nawait network . run (\n`Analyze the files/example.ts file by suggesting improvements and documentation.`\n);\n```\nTo successfully run, a\n```\nNetwork\n```\nrelies on:\n- A Router to **indicate which Agent should be run next**\n- **A shared State** , updated by the Agents' LLM responses and **tool calls**\nLet's start by implementing our Agents and registering them into the Network.",
      "char_count": 885,
      "token_count": 210,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\guided-tour_agentic-workflows.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\guided-tour_agentic-workflows.md",
        "file_name": "guided-tour_agentic-workflows.md",
        "file_size": 19570,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "9865a3ddd8aead1cb1b027a4e59c9db9811ef66d75bd2f3f0ac136646aa8b2e5",
        "author": null,
        "created_at": "2025-10-12T23:51:42.628860",
        "modified_at": "2025-10-12T23:51:42.628860",
        "page_count": null,
        "word_count": 2850,
        "extracted_at": "2025-10-13T19:59:39.746020",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 17,
        "token_count": 210,
        "has_context": true
      }
    },
    {
      "index": 11,
      "text": "Code Assistant v2: Complex code analysis\nImplementing our Code Assistant v2\nCreating Agents with Tools\nAttaching Tools to an Agent helps to:\n- Enrich dynamically the Agent context with dynamic data\n- Store the Agent results in the shared State\nLearn more about\n[Tools](\\concepts\\tools)\n.\n**The Analysis and Documentation Agents**\nOur first two analysis Agents are straightforward:\nCopy Ask AI\n```\nimport { createAgent } from \"@inngest/agent-kit\" ;\n\nconst documentationAgent = createAgent ({\nname: \"documentation_agent\" ,\nsystem: \"You are an expert at generating documentation for code\" ,\n});\n\nconst analysisAgent = createAgent ({\nname: \"analysis_agent\" ,\nsystem: \"You are an expert at analyzing code and suggesting improvements\" ,\n});\n```\nDefining task specific LLM calls (Agents) is a great way to make the LLM reasoning more efficient and avoid unnecessary generations.\nOur\n```\ndocumentation_agent\n```\nand\n```\nanalysis_agent\n```\nare currently stateless and need to be\n*connected*\nto the Network by saving their suggestions into the shared State.\nFor this, we will create our first Tool using\n[```\ncreateTool\n```](\\reference\\create-tool)\n:\nCopy Ask AI\n```\nconst saveSuggestions = createTool ({\nname: \"save_suggestions\" ,\ndescription: \"Save the suggestions made by other agents into the state\" ,\nparameters: z . object ({\nsuggestions: z . array ( z . string ()),\n}),\nhandler : async ( input , { network }) => {\nconst suggestions = network ?. state . kv . get ( \"suggestions\" ) || [];\nnetwork ?. state . kv . set ( \"suggestions\" , [\n... suggestions ,\n... input . suggestions ,\n]);\nreturn \"Suggestions saved!\" ;\n},\n});\n```\nA Tool is a function that can be called by an Agent. The\n```\nname\n```\n,\n```\ndescription\n```\nand\n```\nparameters\n```\nare used by the Agent to understand what the Tool does and what it expects as input. The\n```\nhandler\n```\nis the function that will be called when the Tool is used.\n```\nsave_suggestions\n```\n's handler relies on the\n[Network's State](\\reference\\state#reading-and-modifying-state-state-kv)\n[```\nkv\n```](\\reference\\state#reading-and-modifying-state-state-kv)\n[(key-value store)](\\reference\\state#reading-and-modifying-state-state-kv)\nAPI to share information with other Agents. Learn more about the\n[createTool()](\\reference\\create-tool)\nAPI.\nThe\n```\nsave_suggestions\n```\nTool is used by both\n```\ndocumentation_agent\n```\nand\n```\nanalysis_agent\n```\nto save their suggestions into the shared State:\nCopy Ask AI\n```\nimport { createAgent } from \"@inngest/agent-kit\" ;\n\n// `save_suggestions` definition...\n\nconst documentationAgent = createAgent ({\nname: \"documentation_agent\" ,\nsystem: \"You are an expert at generating documentation for code\" ,\ntools: [ saveSuggestions ],\n});\n\nconst analysisAgent = createAgent ({\nname: \"analysis_agent\" ,\nsystem: \"You are an expert at analyzing code and suggesting improvements\" ,\ntools: [ saveSuggestions ],\n});\n```\nOur\n```\ndocumentation_agent\n```\nand\n```\nanalysis_agent\n```\nare now connected to the Network and will save their suggestions into the shared State.\nLet's now create our\n```\ncode_assistant_agent\n```\nthat will read the code file from disk and plan the workflow to run.\n**The Code Assistant Agent**\nLet's jump into the action by looking at the full implementation of our\n```\ncode_assistant_agent\n```\n:\nCopy Ask AI\n```\nconst codeAssistantAgent = createAgent ({\nname: \"code_assistant_agent\" ,\nsystem : ({ network }) => {\nconst agents = Array . from ( network ?. agents . values () || [])\n. filter (\n( agent ) =>\n! [ \"code_assistant_agent\" , \"summarization_agent\" ]. includes ( agent . name )\n)\n. map (( agent ) => ` ${ agent . name } ( ${ agent . system } )` );\nreturn `From a given user request, ONLY perform the following tool calls:\n- read the file content\n- generate a plan of agents to run from the following list: ${ agents . join ( \", \" ) }\n\nAnswer with \"done\" when you are finished.` ;\n},\ntools: [\ncreateTool ({\nname: \"read_file\" ,\ndescription: \"Read a file from the current directory\" ,\nparameters: z . object ({\nfilename: z . string (),\n}),\nhandler : async ( input , { network }) => {\nconst filePath = join ( process . cwd (), `files/ ${ input . filename } ` );\nconst code = readFileSync ( filePath , \"utf-8\" );\nnetwork ?. state . kv . set ( \"code\" , code );\nreturn \"File read!\" ;\n},\n}),\ncreateTool ({\nname: \"generate_plan\" ,\ndescription: \"Generate a plan of agents to run\" ,\nparameters: z . object ({\nplan: z . array ( z . string ()),\n}),\nhandler : async ( input , { network }) => {\nnetwork ?. state . kv . set ( \"plan\" , input . plan );\nreturn \"Plan generated!\" ;\n},\n}),\n],\n});\n```\nThe highlighted lines emphasize three important parts of the\n```\ncode_assistant_agent\n```\n:\n- \nThe\n[```\nsystem\n```](\\reference\\create-agent#param-system)\n[property](\\reference\\create-agent#param-system)\ncan take a function receiving the current Network state as argument, enabling more flexibility in the Agent's behavior\n- Here, the `system` function is used to generate a prompt for the LLM based on the available Agents in the Network, enabling the LLM to plan the workflow to run\n- \nThe\n```\ncode_assistant_agent\n```\nrelies on two Tools to achieve its goal:\n- `read_file` to read the code file from disk and save it into the shared State\n- `generate_plan` to generate a plan of agents to run and save it into the shared State\nThe pattern of dynamic\n```\nsystem\n```\nprompt and tools are also used by the\n```\nsummarization_agent\n```\nto generate a summary of the suggestions made by other agents.\n**The Summarization Agent**\nCopy Ask AI\n```\nconst summarizationAgent = createAgent ({\nname: \"summarization_agent\" ,\nsystem : ({ network }) => {\nconst suggestions = network ?. state . kv . get ( \"suggestions\" ) || [];\nreturn `Save a summary of the following suggestions:\n${ suggestions . join ( \" \\n \" ) } ` ;\n},\ntools: [\ncreateTool ({\nname: \"save_summary\" ,\ndescription:\n\"Save a summary of the suggestions made by other agents into the state\" ,\nparameters: z . object ({\nsummary: z . string (),\n}),\nhandler : async ( input , { network }) => {\nnetwork ?. state . kv . set ( \"summary\" , input . summary );\nreturn \"Saved!\" ;\n},\n}),\n],\n});\n```\nThe\n```\nsummarization_agent\n```\nis a good example on how the State can be used to\nstore intermediate results and pass them to the next Agent: - the\n```\nsuggestions\n```\nare stored in the State by the\n```\ndocumentation_agent\n```\nand\n```\nanalysis_agent\n```\n- the\n```\nsummarization_agent\n```\nwill read the\n```\nsuggestions\n```\nfrom\nthe State and generate a summary - the summary is then stored in the State as\nthe\n```\nsummary\n```\nkey\nOur four Agents are now propely defined and connected to the Network's State.\nLet's now configure our Network to run the Agents with a Router.",
      "char_count": 6675,
      "token_count": 1648,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\guided-tour_agentic-workflows.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\guided-tour_agentic-workflows.md",
        "file_name": "guided-tour_agentic-workflows.md",
        "file_size": 19570,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "9865a3ddd8aead1cb1b027a4e59c9db9811ef66d75bd2f3f0ac136646aa8b2e5",
        "author": null,
        "created_at": "2025-10-12T23:51:42.628860",
        "modified_at": "2025-10-12T23:51:42.628860",
        "page_count": null,
        "word_count": 2850,
        "extracted_at": "2025-10-13T19:59:39.746020",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 17,
        "token_count": 1648,
        "has_context": true
      }
    },
    {
      "index": 12,
      "text": "Code Assistant v2: Complex code analysis\nImplementing our Code Assistant v2\nAssembling the Network\nAn AgentKit\n[Network](\\concepts\\network)\nis defined by a set of Agents and an optional\n```\ndefaultModel\n```\n:\nCopy Ask AI\n```\nimport { createNetwork , anthropic } from \"@inngest/agent-kit\" ;\n\n// Agent and Tools definitions...\n\nconst network = createNetwork ({\nname: \"code-assistant-v2\" ,\nagents: [\ncodeAssistantAgent ,\ndocumentationAgent ,\nanalysisAgent ,\nsummarizationAgent ,\n],\ndefaultModel: anthropic ({\nmodel: \"claude-3-5-sonnet-latest\" ,\nmax_tokens: 4096 ,\n}),\n});\n```\nThe\n```\ndefaultModel\n```\nwill be applied to all Agents part of the Network.\nA model can also be set on an individual Agent by setting the\n```\nmodel\n```\nproperty. Learn more about the\n[Network Model configuration](\\concepts\\networks#model-configuration)\n.\nOur Code Assistant v2 is missing a final piece: the Router.\nWithout a Router, the Network will not know which Agent to run next.\n**Implementing the Router**\nAs stated in the\n[workflow overview](#overview-of-the-agentic-workflow)\n, our Code Assistant v2 is an agentic worflow composed of the following steps:\n1. The `code_assistant_agent` will read the code file from disk and generate a plan of agents to run\n2. Depending on the plan, the Network will run the next Agent in the plan ( *ex:* *`analysis_agent`* *and* *`documentation_agent`* )\n3. Finally, the `summarization_agent` will generate a summary of the suggestions made by other agents\nAgentKit's Router enables us to implement such dynamic workflow with code by providing a\n```\ndefaultRouter\n```\nfunction:\nCopy Ask AI\n```\nconst network = createNetwork ({\nname: \"code-assistant-v2\" ,\nagents: [\ncodeAssistantAgent ,\ndocumentationAgent ,\nanalysisAgent ,\nsummarizationAgent ,\n],\nrouter : ({ network }) => {\nif ( ! network ?. state . kv . has ( \"code\" ) || ! network ?. state . kv . has ( \"plan\" )) {\nreturn codeAssistantAgent ;\n} else {\nconst plan = ( network ?. state . kv . get ( \"plan\" ) || []) as string [];\nconst nextAgent = plan . pop ();\nif ( nextAgent ) {\nnetwork ?. state . kv . set ( \"plan\" , plan );\nreturn network ?. agents . get ( nextAgent );\n} else if ( ! network ?. state . kv . has ( \"summary\" )) {\nreturn summarizationAgent ;\n} else {\nreturn undefined ;\n}\n}\n},\ndefaultModel: anthropic ({\nmodel: \"claude-3-5-sonnet-latest\" ,\nmax_tokens: 4096 ,\n}),\n});\n```\n**How does a Router work?**\nThe Router is a function called by the Network when starting a new run and between each Agent call. The provided Router function (\n```\ndefaultRouter\n```\n) receives a\n```\nnetwork\n```\nargument granting access to the Network's state and Agents. Learn more about the\n[Router](\\concepts\\router)\n.\nLet's have a closer look at the Router implementation:\nCopy Ask AI\n```\nconst router = ({ network }) => {\n// the first iteration of the network will have an empty state\n//  also, the first run of `code_assistant_agent` will store the `code`,\n//  requiring a second run to generate the plan\nif ( ! network ?. state . kv . has ( \"code\" ) || ! network ?. state . kv . has ( \"plan\" )) {\nreturn codeAssistantAgent ;\n} else {\n// once the `plan` available in the state, we iterate over the agents to execute\nconst plan = ( network ?. state . kv . get ( \"plan\" ) || []) as string [];\nconst nextAgent = plan . pop ();\nif ( nextAgent ) {\nnetwork ?. state . kv . set ( \"plan\" , plan );\nreturn network ?. agents . get ( nextAgent );\n// we no agents are left to run, we generate a summary\n} else if ( ! network ?. state . kv . has ( \"summary\" )) {\nreturn summarizationAgent ;\n// if no agent are left to run and a summary is available, we are done\n} else {\nreturn undefined ;\n}\n}\n};\n```\nOur Code Assistant v2 iteration is now complete. Let's run it!",
      "char_count": 3710,
      "token_count": 954,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\guided-tour_agentic-workflows.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\guided-tour_agentic-workflows.md",
        "file_name": "guided-tour_agentic-workflows.md",
        "file_size": 19570,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "9865a3ddd8aead1cb1b027a4e59c9db9811ef66d75bd2f3f0ac136646aa8b2e5",
        "author": null,
        "created_at": "2025-10-12T23:51:42.628860",
        "modified_at": "2025-10-12T23:51:42.628860",
        "page_count": null,
        "word_count": 2850,
        "extracted_at": "2025-10-13T19:59:39.746020",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 17,
        "token_count": 954,
        "has_context": true
      }
    },
    {
      "index": 13,
      "text": "Code Assistant v2: Complex code analysis\nRunning the Code Assistant v2\nFirst, go to your Anthropic dashboard and create a new API key.\nThen, run the following command to execute our Code Assistant:\nnpm pnpm yarn Copy Ask AI\n```\nANTHROPIC_API_KEY =< your-api-key > npm run start\n```\nThe following output should be displayed in your terminal:\nCopy Ask AI\n```\nAnalysis: The code analysis suggests several key areas for improvement:\n\n1. Type Safety and Structure:\n- Implement strict TypeScript configurations\n- Add explicit return types and interfaces\n- Break down complex functions\n- Follow Single Responsibility Principle\n- Implement proper error handling\n\n2. Performance Optimization:\n- Review and optimize critical operations\n- Consider caching mechanisms\n- Improve data processing efficiency\n\n3. Documentation:\n- Add comprehensive JSDoc comments\n- Document complex logic and assumptions\n- Create detailed README\n- Include setup and usage instructions\n- Add code examples\n```\nUpdating the\n```\nfiles/example.ts\n```\nby applying the suggestions and running the Code Assistant again will yield a different planning with a different summary. Try it out!",
      "char_count": 1148,
      "token_count": 234,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\guided-tour_agentic-workflows.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\guided-tour_agentic-workflows.md",
        "file_name": "guided-tour_agentic-workflows.md",
        "file_size": 19570,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "9865a3ddd8aead1cb1b027a4e59c9db9811ef66d75bd2f3f0ac136646aa8b2e5",
        "author": null,
        "created_at": "2025-10-12T23:51:42.628860",
        "modified_at": "2025-10-12T23:51:42.628860",
        "page_count": null,
        "word_count": 2850,
        "extracted_at": "2025-10-13T19:59:39.746020",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 17,
        "token_count": 234,
        "has_context": true
      }
    },
    {
      "index": 14,
      "text": "Code Assistant v2: Complex code analysis\nWhat we've learned so far\nLet's recap what we've learned so far:\n- **Agentic workflows** , compared to RAG workflows, **are more flexible** and can be used to perform more complex tasks\n- **Combining multiple Agents improves the accuracy** of the LLM reasoning and can save tokens\n- **AgentKit enables to combine multiple Agents** into a [Network](\\concepts\\networks) , connected by a common [State](\\concepts\\state)\n- **AgentKit's Router enables to implement our workflow with code** , keeping control over our reasoning planning",
      "char_count": 571,
      "token_count": 131,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\guided-tour_agentic-workflows.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\guided-tour_agentic-workflows.md",
        "file_name": "guided-tour_agentic-workflows.md",
        "file_size": 19570,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "9865a3ddd8aead1cb1b027a4e59c9db9811ef66d75bd2f3f0ac136646aa8b2e5",
        "author": null,
        "created_at": "2025-10-12T23:51:42.628860",
        "modified_at": "2025-10-12T23:51:42.628860",
        "page_count": null,
        "word_count": 2850,
        "extracted_at": "2025-10-13T19:59:39.746020",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 17,
        "token_count": 131,
        "has_context": true
      }
    },
    {
      "index": 15,
      "text": "Code Assistant v2: Complex code analysis\nNext steps\nThis Code Assistant v2 shines by its analysis capabilities, but cannot be qualified as an AI Agent.\nIn the next version of our Code Assistant, we will transform it into a semi-autonomous AI Agent that can solve bugs and improve code of a small project.",
      "char_count": 304,
      "token_count": 64,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\guided-tour_agentic-workflows.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\guided-tour_agentic-workflows.md",
        "file_name": "guided-tour_agentic-workflows.md",
        "file_size": 19570,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "9865a3ddd8aead1cb1b027a4e59c9db9811ef66d75bd2f3f0ac136646aa8b2e5",
        "author": null,
        "created_at": "2025-10-12T23:51:42.628860",
        "modified_at": "2025-10-12T23:51:42.628860",
        "page_count": null,
        "word_count": 2850,
        "extracted_at": "2025-10-13T19:59:39.746020",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 17,
        "token_count": 64,
        "has_context": true
      }
    },
    {
      "index": 16,
      "text": "Code Assistant v2: Complex code analysis\nCode Assistant v3: Autonomous Code Assistant\n[The final version update of our Code Assistant will transform it into a](\\ai-agents-in-practice\\ai-agents)\n[semi-autonomous AI Agent.](\\ai-agents-in-practice\\ai-agents)\n[Code Assistant v1: Explaining a given code file Previous](\\guided-tour\\ai-workflows)\n[Code Assistant v3: Autonomous Bug Solver Next](\\guided-tour\\ai-agents)\n⌘ I\nAssistant Responses are generated using AI and may contain mistakes.",
      "char_count": 486,
      "token_count": 122,
      "metadata": {
        "title": "##### Get Started",
        "source": "Docs\\agent_kit\\guided-tour_agentic-workflows.md",
        "chunk_method": "hybrid",
        "file_path": "Docs\\agent_kit\\guided-tour_agentic-workflows.md",
        "file_name": "guided-tour_agentic-workflows.md",
        "file_size": 19570,
        "file_format": ".md",
        "mime_type": "text/markdown",
        "sha256_hash": "9865a3ddd8aead1cb1b027a4e59c9db9811ef66d75bd2f3f0ac136646aa8b2e5",
        "author": null,
        "created_at": "2025-10-12T23:51:42.628860",
        "modified_at": "2025-10-12T23:51:42.628860",
        "page_count": null,
        "word_count": 2850,
        "extracted_at": "2025-10-13T19:59:39.746020",
        "processing_method": "markdown_docling",
        "custom_metadata": {},
        "total_chunks": 17,
        "token_count": 122,
        "has_context": true
      }
    }
  ]
}